                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.8.4 #10774 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module elfloader
                                      6 	.optsdcc -mmcs51 --model-huge
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _symtab_lookup
                                     12 	.globl _elfloader_arch_write_rom
                                     13 	.globl _elfloader_arch_relocate
                                     14 	.globl _elfloader_arch_allocate_rom
                                     15 	.globl _elfloader_arch_allocate_ram
                                     16 	.globl _cfs_seek
                                     17 	.globl _cfs_read
                                     18 	.globl ___memcpy
                                     19 	.globl _memset
                                     20 	.globl _strncmp
                                     21 	.globl _strcmp
                                     22 	.globl _memcmp
                                     23 	.globl _ACTIVE
                                     24 	.globl _TX_BYTE
                                     25 	.globl _RX_BYTE
                                     26 	.globl _ERR
                                     27 	.globl _FE
                                     28 	.globl _SLAVE
                                     29 	.globl _RE
                                     30 	.globl _MODE
                                     31 	.globl _T3OVFIF
                                     32 	.globl _T3CH0IF
                                     33 	.globl _T3CH1IF
                                     34 	.globl _T4OVFIF
                                     35 	.globl _T4CH0IF
                                     36 	.globl _T4CH1IF
                                     37 	.globl _OVFIM
                                     38 	.globl _B_0
                                     39 	.globl _B_1
                                     40 	.globl _B_2
                                     41 	.globl _B_3
                                     42 	.globl _B_4
                                     43 	.globl _B_5
                                     44 	.globl _B_6
                                     45 	.globl _B_7
                                     46 	.globl _P2IF
                                     47 	.globl _UTX0IF
                                     48 	.globl _UTX1IF
                                     49 	.globl _P1IF
                                     50 	.globl _WDTIF
                                     51 	.globl _ACC_0
                                     52 	.globl _ACC_1
                                     53 	.globl _ACC_2
                                     54 	.globl _ACC_3
                                     55 	.globl _ACC_4
                                     56 	.globl _ACC_5
                                     57 	.globl _ACC_6
                                     58 	.globl _ACC_7
                                     59 	.globl _P
                                     60 	.globl _F1
                                     61 	.globl _OV
                                     62 	.globl _RS0
                                     63 	.globl _RS1
                                     64 	.globl _F0
                                     65 	.globl _AC
                                     66 	.globl _CY
                                     67 	.globl _DMAIF
                                     68 	.globl _T1IF
                                     69 	.globl _T2IF
                                     70 	.globl _T3IF
                                     71 	.globl _T4IF
                                     72 	.globl _P0IF
                                     73 	.globl _STIF
                                     74 	.globl _DMAIE
                                     75 	.globl _T1IE
                                     76 	.globl _T2IE
                                     77 	.globl _T3IE
                                     78 	.globl _T4IE
                                     79 	.globl _P0IE
                                     80 	.globl _RFERRIE
                                     81 	.globl _ADCIE
                                     82 	.globl _URX0IE
                                     83 	.globl _URX1IE
                                     84 	.globl _ENCIE
                                     85 	.globl _STIE
                                     86 	.globl _EA
                                     87 	.globl _P2_0
                                     88 	.globl _P2_1
                                     89 	.globl _P2_2
                                     90 	.globl _P2_3
                                     91 	.globl _P2_4
                                     92 	.globl _P2_5
                                     93 	.globl _P2_6
                                     94 	.globl _P2_7
                                     95 	.globl _ENCIF_0
                                     96 	.globl _ENCIF_1
                                     97 	.globl _P1_0
                                     98 	.globl _P1_1
                                     99 	.globl _P1_2
                                    100 	.globl _P1_3
                                    101 	.globl _P1_4
                                    102 	.globl _P1_5
                                    103 	.globl _P1_6
                                    104 	.globl _P1_7
                                    105 	.globl _IT0
                                    106 	.globl _RFERRIF
                                    107 	.globl _IT1
                                    108 	.globl _URX0IF
                                    109 	.globl _ADCIF
                                    110 	.globl _URX1IF
                                    111 	.globl _P0_0
                                    112 	.globl _P0_1
                                    113 	.globl _P0_2
                                    114 	.globl _P0_3
                                    115 	.globl _P0_4
                                    116 	.globl _P0_5
                                    117 	.globl _P0_6
                                    118 	.globl _P0_7
                                    119 	.globl _WDCTL
                                    120 	.globl _U1GCR
                                    121 	.globl _U1UCR
                                    122 	.globl _U1BAUD
                                    123 	.globl _U1DBUF
                                    124 	.globl _U1CSR
                                    125 	.globl _U0GCR
                                    126 	.globl _U0UCR
                                    127 	.globl _U0BAUD
                                    128 	.globl _U0DBUF
                                    129 	.globl _U0CSR
                                    130 	.globl _TIMIF
                                    131 	.globl _T4CC1
                                    132 	.globl _T4CCTL1
                                    133 	.globl _T4CC0
                                    134 	.globl _T4CCTL0
                                    135 	.globl _T4CTL
                                    136 	.globl _T4CNT
                                    137 	.globl _T3CC1
                                    138 	.globl _T3CCTL1
                                    139 	.globl _T3CC0
                                    140 	.globl _T3CCTL0
                                    141 	.globl _T3CTL
                                    142 	.globl _T3CNT
                                    143 	.globl _T2MSEL
                                    144 	.globl _T2IRQM
                                    145 	.globl _T2MOVF2
                                    146 	.globl _T2MOVF1
                                    147 	.globl _T2MOVF0
                                    148 	.globl _T2M1
                                    149 	.globl _T2M0
                                    150 	.globl _T2IRQF
                                    151 	.globl _T2EVTCFG
                                    152 	.globl _T2CTRL
                                    153 	.globl _T1STAT
                                    154 	.globl _T1CCTL2
                                    155 	.globl _T1CCTL1
                                    156 	.globl _T1CCTL0
                                    157 	.globl _T1CTL
                                    158 	.globl _T1CNTH
                                    159 	.globl _T1CNTL
                                    160 	.globl _T1CC2H
                                    161 	.globl _T1CC2L
                                    162 	.globl _T1CC1H
                                    163 	.globl _T1CC1L
                                    164 	.globl _T1CC0H
                                    165 	.globl _T1CC0L
                                    166 	.globl _CLKCONSTA
                                    167 	.globl _CLKCONCMD
                                    168 	.globl _SLEEPSTA
                                    169 	.globl _SLEEPCMD
                                    170 	.globl _STLOAD
                                    171 	.globl _ST2
                                    172 	.globl _ST1
                                    173 	.globl _ST0
                                    174 	.globl _RFERRF
                                    175 	.globl _RFIRQF0
                                    176 	.globl _RFST
                                    177 	.globl _RFD
                                    178 	.globl _RFIRQF1
                                    179 	.globl _PSBANK
                                    180 	.globl _FMAP
                                    181 	.globl _MEMCTR
                                    182 	.globl __XPAGE
                                    183 	.globl _MPAGE
                                    184 	.globl _PMUX
                                    185 	.globl _P2DIR
                                    186 	.globl _P1DIR
                                    187 	.globl _P0DIR
                                    188 	.globl _P2INP
                                    189 	.globl _P1INP
                                    190 	.globl _P2SEL
                                    191 	.globl _P1SEL
                                    192 	.globl _P0SEL
                                    193 	.globl _APCFG
                                    194 	.globl _PERCFG
                                    195 	.globl _P0INP
                                    196 	.globl _P2IEN
                                    197 	.globl _P1IEN
                                    198 	.globl _P0IEN
                                    199 	.globl _PICTL
                                    200 	.globl _P2IFG
                                    201 	.globl _P1IFG
                                    202 	.globl _P0IFG
                                    203 	.globl _DMAREQ
                                    204 	.globl _DMAARM
                                    205 	.globl _DMA0CFGH
                                    206 	.globl _DMA0CFGL
                                    207 	.globl _DMA1CFGH
                                    208 	.globl _DMA1CFGL
                                    209 	.globl _DMAIRQ
                                    210 	.globl _ENCCS
                                    211 	.globl _ENCDO
                                    212 	.globl _ENCDI
                                    213 	.globl _RNDH
                                    214 	.globl _RNDL
                                    215 	.globl _ADCH
                                    216 	.globl _ADCL
                                    217 	.globl _ADCCON3
                                    218 	.globl _ADCCON2
                                    219 	.globl _ADCCON1
                                    220 	.globl _B
                                    221 	.globl _IRCON2
                                    222 	.globl _ACC
                                    223 	.globl _PSW
                                    224 	.globl _IRCON
                                    225 	.globl _IP1
                                    226 	.globl _IEN1
                                    227 	.globl _IP0
                                    228 	.globl _IEN0
                                    229 	.globl _P2
                                    230 	.globl _S1CON
                                    231 	.globl _IEN2
                                    232 	.globl _S0CON
                                    233 	.globl _DPS
                                    234 	.globl _P1
                                    235 	.globl _TCON
                                    236 	.globl _PCON
                                    237 	.globl _DPH1
                                    238 	.globl _DPL1
                                    239 	.globl _DPH0
                                    240 	.globl _DPL0
                                    241 	.globl _SP
                                    242 	.globl _P0
                                    243 	.globl _elfloader_autostart_processes
                                    244 	.globl _elfloader_unknown
                                    245 	.globl _X_IEEE_ADDR
                                    246 	.globl _X_INFOPAGE
                                    247 	.globl _X_P2DIR
                                    248 	.globl _X_P1DIR
                                    249 	.globl _X_P0DIR
                                    250 	.globl _X_U1GCR
                                    251 	.globl _X_U1UCR
                                    252 	.globl _X_U1BAUD
                                    253 	.globl _X_U1DBUF
                                    254 	.globl _X_U1CSR
                                    255 	.globl _X_P2INP
                                    256 	.globl _X_P1INP
                                    257 	.globl _X_P2SEL
                                    258 	.globl _X_P1SEL
                                    259 	.globl _X_P0SEL
                                    260 	.globl _X_APCFG
                                    261 	.globl _X_PERCFG
                                    262 	.globl _X_T4CC1
                                    263 	.globl _X_T4CCTL1
                                    264 	.globl _X_T4CC0
                                    265 	.globl _X_T4CCTL0
                                    266 	.globl _X_T4CTL
                                    267 	.globl _X_T4CNT
                                    268 	.globl _X_RFIRQF0
                                    269 	.globl _X_T1CCTL2
                                    270 	.globl _X_T1CCTL1
                                    271 	.globl _X_T1CCTL0
                                    272 	.globl _X_T1CTL
                                    273 	.globl _X_T1CNTH
                                    274 	.globl _X_T1CNTL
                                    275 	.globl _X_RFST
                                    276 	.globl _X_T1CC2H
                                    277 	.globl _X_T1CC2L
                                    278 	.globl _X_T1CC1H
                                    279 	.globl _X_T1CC1L
                                    280 	.globl _X_T1CC0H
                                    281 	.globl _X_T1CC0L
                                    282 	.globl _X_RFD
                                    283 	.globl _X_TIMIF
                                    284 	.globl _X_DMAREQ
                                    285 	.globl _X_DMAARM
                                    286 	.globl _X_DMA0CFGH
                                    287 	.globl _X_DMA0CFGL
                                    288 	.globl _X_DMA1CFGH
                                    289 	.globl _X_DMA1CFGL
                                    290 	.globl _X_DMAIRQ
                                    291 	.globl _X_T3CC1
                                    292 	.globl _X_T3CCTL1
                                    293 	.globl _X_T3CC0
                                    294 	.globl _X_T3CCTL0
                                    295 	.globl _X_T3CTL
                                    296 	.globl _X_T3CNT
                                    297 	.globl _X_WDCTL
                                    298 	.globl _X_MEMCTR
                                    299 	.globl _X_CLKCONCMD
                                    300 	.globl _X_U0GCR
                                    301 	.globl _X_U0UCR
                                    302 	.globl _X_T2MSEL
                                    303 	.globl _X_U0BAUD
                                    304 	.globl _X_U0DBUF
                                    305 	.globl _X_RFERRF
                                    306 	.globl _X_SLEEPCMD
                                    307 	.globl _X_RNDH
                                    308 	.globl _X_RNDL
                                    309 	.globl _X_ADCH
                                    310 	.globl _X_ADCL
                                    311 	.globl _X_ADCCON3
                                    312 	.globl _X_ADCCON2
                                    313 	.globl _X_ADCCON1
                                    314 	.globl _X_ENCCS
                                    315 	.globl _X_ENCDO
                                    316 	.globl _X_ENCDI
                                    317 	.globl _X_T1STAT
                                    318 	.globl _X_PMUX
                                    319 	.globl _X_STLOAD
                                    320 	.globl _X_P2IEN
                                    321 	.globl _X_P0IEN
                                    322 	.globl _X_T2IRQM
                                    323 	.globl _X_T2MOVF2
                                    324 	.globl _X_T2MOVF1
                                    325 	.globl _X_T2MOVF0
                                    326 	.globl _X_T2M1
                                    327 	.globl _X_T2M0
                                    328 	.globl _X_T2IRQF
                                    329 	.globl _X_P2
                                    330 	.globl _X_PSBANK
                                    331 	.globl _X_FMAP
                                    332 	.globl _X_CLKCONSTA
                                    333 	.globl _X_SLEEPSTA
                                    334 	.globl _X_T2EVTCFG
                                    335 	.globl _X_ST2
                                    336 	.globl _X_ST1
                                    337 	.globl _X_ST0
                                    338 	.globl _X_T2CTRL
                                    339 	.globl _X__XPAGE
                                    340 	.globl _X_MPAGE
                                    341 	.globl _X_RFIRQF1
                                    342 	.globl _X_P1
                                    343 	.globl _X_P0INP
                                    344 	.globl _X_P1IEN
                                    345 	.globl _X_PICTL
                                    346 	.globl _X_P2IFG
                                    347 	.globl _X_P1IFG
                                    348 	.globl _X_P0IFG
                                    349 	.globl _X_U0CSR
                                    350 	.globl _X_P0
                                    351 	.globl _USBF5
                                    352 	.globl _USBF4
                                    353 	.globl _USBF3
                                    354 	.globl _USBF2
                                    355 	.globl _USBF1
                                    356 	.globl _USBF0
                                    357 	.globl _USBCNTH
                                    358 	.globl _USBCNTL
                                    359 	.globl _USBCNT0
                                    360 	.globl _USBCSOH
                                    361 	.globl _USBCSOL
                                    362 	.globl _USBMAXO
                                    363 	.globl _USBCSIH
                                    364 	.globl _USBCSIL
                                    365 	.globl _USBCS0
                                    366 	.globl _USBMAXI
                                    367 	.globl _USBCTRL
                                    368 	.globl _USBINDEX
                                    369 	.globl _USBFRMH
                                    370 	.globl _USBFRML
                                    371 	.globl _USBCIE
                                    372 	.globl _USBOIE
                                    373 	.globl _USBIIE
                                    374 	.globl _USBCIF
                                    375 	.globl _USBOIF
                                    376 	.globl _USBIIF
                                    377 	.globl _USBPOW
                                    378 	.globl _USBADDR
                                    379 	.globl _CSPT
                                    380 	.globl _CSPZ
                                    381 	.globl _CSPY
                                    382 	.globl _CSPX
                                    383 	.globl _CSPSTAT
                                    384 	.globl _CSPCTRL
                                    385 	.globl _CSPPROG23
                                    386 	.globl _CSPPROG22
                                    387 	.globl _CSPPROG21
                                    388 	.globl _CSPPROG20
                                    389 	.globl _CSPPROG19
                                    390 	.globl _CSPPROG18
                                    391 	.globl _CSPPROG17
                                    392 	.globl _CSPPROG16
                                    393 	.globl _CSPPROG15
                                    394 	.globl _CSPPROG14
                                    395 	.globl _CSPPROG13
                                    396 	.globl _CSPPROG12
                                    397 	.globl _CSPPROG11
                                    398 	.globl _CSPPROG10
                                    399 	.globl _CSPPROG9
                                    400 	.globl _CSPPROG8
                                    401 	.globl _CSPPROG7
                                    402 	.globl _CSPPROG6
                                    403 	.globl _CSPPROG5
                                    404 	.globl _CSPPROG4
                                    405 	.globl _CSPPROG3
                                    406 	.globl _CSPPROG2
                                    407 	.globl _CSPPROG1
                                    408 	.globl _CSPPROG0
                                    409 	.globl _RFC_OBS_CTRL2
                                    410 	.globl _RFC_OBS_CTRL1
                                    411 	.globl _RFC_OBS_CTRL0
                                    412 	.globl _TXFILTCFG
                                    413 	.globl _PTEST1
                                    414 	.globl _PTEST0
                                    415 	.globl _ATEST
                                    416 	.globl _DACTEST2
                                    417 	.globl _DACTEST1
                                    418 	.globl _DACTEST0
                                    419 	.globl _MDMTEST1
                                    420 	.globl _MDMTEST0
                                    421 	.globl _ADCTEST2
                                    422 	.globl _ADCTEST1
                                    423 	.globl _ADCTEST0
                                    424 	.globl _AGCCTRL3
                                    425 	.globl _AGCCTRL2
                                    426 	.globl _AGCCTRL1
                                    427 	.globl _AGCCTRL0
                                    428 	.globl _FSCAL3
                                    429 	.globl _FSCAL2
                                    430 	.globl _FSCAL1
                                    431 	.globl _FSCAL0
                                    432 	.globl _FSCTRL
                                    433 	.globl _RXCTRL
                                    434 	.globl _FREQEST
                                    435 	.globl _MDMCTRL1
                                    436 	.globl _MDMCTRL0
                                    437 	.globl _RFRND
                                    438 	.globl _RFERRM
                                    439 	.globl _RFIRQM1
                                    440 	.globl _RFIRQM0
                                    441 	.globl _TXLAST_PTR
                                    442 	.globl _TXFIRST_PTR
                                    443 	.globl _RXP1_PTR
                                    444 	.globl _RXLAST_PTR
                                    445 	.globl _RXFIRST_PTR
                                    446 	.globl _TXFIFOCNT
                                    447 	.globl _RXFIFOCNT
                                    448 	.globl _RXFIRST
                                    449 	.globl _RSSISTAT
                                    450 	.globl _RSSI
                                    451 	.globl _CCACTRL1
                                    452 	.globl _CCACTRL0
                                    453 	.globl _FSMCTRL
                                    454 	.globl _FIFOPCTRL
                                    455 	.globl _FSMSTAT1
                                    456 	.globl _FSMSTAT0
                                    457 	.globl _TXCTRL
                                    458 	.globl _TXPOWER
                                    459 	.globl _FREQCTRL
                                    460 	.globl _FREQTUNE
                                    461 	.globl _RXMASKCLR
                                    462 	.globl _RXMASKSET
                                    463 	.globl _RXENABLE
                                    464 	.globl _FRMCTRL1
                                    465 	.globl _FRMCTRL0
                                    466 	.globl _SRCEXTEN2
                                    467 	.globl _SRCEXTEN1
                                    468 	.globl _SRCEXTEN0
                                    469 	.globl _SRCSHORTEN2
                                    470 	.globl _SRCSHORTEN1
                                    471 	.globl _SRCSHORTEN0
                                    472 	.globl _SRCMATCH
                                    473 	.globl _FRMFILT1
                                    474 	.globl _FRMFILT0
                                    475 	.globl _SHORT_ADDR1
                                    476 	.globl _SHORT_ADDR0
                                    477 	.globl _PAN_ID1
                                    478 	.globl _PAN_ID0
                                    479 	.globl _EXT_ADDR7
                                    480 	.globl _EXT_ADDR6
                                    481 	.globl _EXT_ADDR5
                                    482 	.globl _EXT_ADDR4
                                    483 	.globl _EXT_ADDR3
                                    484 	.globl _EXT_ADDR2
                                    485 	.globl _EXT_ADDR1
                                    486 	.globl _EXT_ADDR0
                                    487 	.globl _SRCSHORTPENDEN2
                                    488 	.globl _SRCSHORTPENDEN1
                                    489 	.globl _SRCSHORTPENDEN0
                                    490 	.globl _SRCEXTPENDEN2
                                    491 	.globl _SRCEXTPENDEN1
                                    492 	.globl _SRCEXTPENDEN0
                                    493 	.globl _SRCRESINDEX
                                    494 	.globl _SRCRESMASK2
                                    495 	.globl _SRCRESMASK1
                                    496 	.globl _SRCRESMASK0
                                    497 	.globl _SRC_ADDR_TABLE
                                    498 	.globl _TXFIFO
                                    499 	.globl _RXFIFO
                                    500 	.globl _RFCORE_RAM
                                    501 	.globl _CMPCTL
                                    502 	.globl _OPAMPS
                                    503 	.globl _OPAMPC
                                    504 	.globl _STCV2
                                    505 	.globl _STCV1
                                    506 	.globl _STCV0
                                    507 	.globl _STCS
                                    508 	.globl _STCC
                                    509 	.globl _T1CC4H
                                    510 	.globl _T1CC4L
                                    511 	.globl _T1CC3H
                                    512 	.globl _T1CC3L
                                    513 	.globl _XX_T1CC2H
                                    514 	.globl _XX_T1CC2L
                                    515 	.globl _XX_T1CC1H
                                    516 	.globl _XX_T1CC1L
                                    517 	.globl _XX_T1CC0H
                                    518 	.globl _XX_T1CC0L
                                    519 	.globl _T1CCTL4
                                    520 	.globl _T1CCTL3
                                    521 	.globl _XX_T1CCTL2
                                    522 	.globl _XX_T1CCTL1
                                    523 	.globl _XX_T1CCTL0
                                    524 	.globl _CLD
                                    525 	.globl _IRCTL
                                    526 	.globl _CHIPINFO1
                                    527 	.globl _CHIPINFO0
                                    528 	.globl _FWDATA
                                    529 	.globl _FADDRH
                                    530 	.globl _FADDRL
                                    531 	.globl _FCTL
                                    532 	.globl _IVCTRL
                                    533 	.globl _BATTMON
                                    534 	.globl _SRCRC
                                    535 	.globl _DBGDATA
                                    536 	.globl _TESTREG0
                                    537 	.globl _CHIPID
                                    538 	.globl _CHVER
                                    539 	.globl _OBSSEL5
                                    540 	.globl _OBSSEL4
                                    541 	.globl _OBSSEL3
                                    542 	.globl _OBSSEL2
                                    543 	.globl _OBSSEL1
                                    544 	.globl _OBSSEL0
                                    545 	.globl _I2CIO
                                    546 	.globl _I2CWC
                                    547 	.globl _I2CADDR
                                    548 	.globl _I2CDATA
                                    549 	.globl _I2CSTAT
                                    550 	.globl _I2CCFG
                                    551 	.globl _OPAMPMC
                                    552 	.globl _MONMUX
                                    553 	.globl _elfloader_init
                                    554 	.globl _elfloader_load
                                    555 ;--------------------------------------------------------
                                    556 ; special function registers
                                    557 ;--------------------------------------------------------
                                    558 	.area RSEG    (ABS,DATA)
      000000                        559 	.org 0x0000
                           000080   560 _P0	=	0x0080
                           000081   561 _SP	=	0x0081
                           000082   562 _DPL0	=	0x0082
                           000083   563 _DPH0	=	0x0083
                           000084   564 _DPL1	=	0x0084
                           000085   565 _DPH1	=	0x0085
                           000087   566 _PCON	=	0x0087
                           000088   567 _TCON	=	0x0088
                           000090   568 _P1	=	0x0090
                           000092   569 _DPS	=	0x0092
                           000098   570 _S0CON	=	0x0098
                           00009A   571 _IEN2	=	0x009a
                           00009B   572 _S1CON	=	0x009b
                           0000A0   573 _P2	=	0x00a0
                           0000A8   574 _IEN0	=	0x00a8
                           0000A9   575 _IP0	=	0x00a9
                           0000B8   576 _IEN1	=	0x00b8
                           0000B9   577 _IP1	=	0x00b9
                           0000C0   578 _IRCON	=	0x00c0
                           0000D0   579 _PSW	=	0x00d0
                           0000E0   580 _ACC	=	0x00e0
                           0000E8   581 _IRCON2	=	0x00e8
                           0000F0   582 _B	=	0x00f0
                           0000B4   583 _ADCCON1	=	0x00b4
                           0000B5   584 _ADCCON2	=	0x00b5
                           0000B6   585 _ADCCON3	=	0x00b6
                           0000BA   586 _ADCL	=	0x00ba
                           0000BB   587 _ADCH	=	0x00bb
                           0000BC   588 _RNDL	=	0x00bc
                           0000BD   589 _RNDH	=	0x00bd
                           0000B1   590 _ENCDI	=	0x00b1
                           0000B2   591 _ENCDO	=	0x00b2
                           0000B3   592 _ENCCS	=	0x00b3
                           0000D1   593 _DMAIRQ	=	0x00d1
                           0000D2   594 _DMA1CFGL	=	0x00d2
                           0000D3   595 _DMA1CFGH	=	0x00d3
                           0000D4   596 _DMA0CFGL	=	0x00d4
                           0000D5   597 _DMA0CFGH	=	0x00d5
                           0000D6   598 _DMAARM	=	0x00d6
                           0000D7   599 _DMAREQ	=	0x00d7
                           000089   600 _P0IFG	=	0x0089
                           00008A   601 _P1IFG	=	0x008a
                           00008B   602 _P2IFG	=	0x008b
                           00008C   603 _PICTL	=	0x008c
                           0000AB   604 _P0IEN	=	0x00ab
                           00008D   605 _P1IEN	=	0x008d
                           0000AC   606 _P2IEN	=	0x00ac
                           00008F   607 _P0INP	=	0x008f
                           0000F1   608 _PERCFG	=	0x00f1
                           0000F2   609 _APCFG	=	0x00f2
                           0000F3   610 _P0SEL	=	0x00f3
                           0000F4   611 _P1SEL	=	0x00f4
                           0000F5   612 _P2SEL	=	0x00f5
                           0000F6   613 _P1INP	=	0x00f6
                           0000F7   614 _P2INP	=	0x00f7
                           0000FD   615 _P0DIR	=	0x00fd
                           0000FE   616 _P1DIR	=	0x00fe
                           0000FF   617 _P2DIR	=	0x00ff
                           0000AE   618 _PMUX	=	0x00ae
                           000093   619 _MPAGE	=	0x0093
                           000093   620 __XPAGE	=	0x0093
                           0000C7   621 _MEMCTR	=	0x00c7
                           00009F   622 _FMAP	=	0x009f
                           00009F   623 _PSBANK	=	0x009f
                           000091   624 _RFIRQF1	=	0x0091
                           0000D9   625 _RFD	=	0x00d9
                           0000E1   626 _RFST	=	0x00e1
                           0000E9   627 _RFIRQF0	=	0x00e9
                           0000BF   628 _RFERRF	=	0x00bf
                           000095   629 _ST0	=	0x0095
                           000096   630 _ST1	=	0x0096
                           000097   631 _ST2	=	0x0097
                           0000AD   632 _STLOAD	=	0x00ad
                           0000BE   633 _SLEEPCMD	=	0x00be
                           00009D   634 _SLEEPSTA	=	0x009d
                           0000C6   635 _CLKCONCMD	=	0x00c6
                           00009E   636 _CLKCONSTA	=	0x009e
                           0000DA   637 _T1CC0L	=	0x00da
                           0000DB   638 _T1CC0H	=	0x00db
                           0000DC   639 _T1CC1L	=	0x00dc
                           0000DD   640 _T1CC1H	=	0x00dd
                           0000DE   641 _T1CC2L	=	0x00de
                           0000DF   642 _T1CC2H	=	0x00df
                           0000E2   643 _T1CNTL	=	0x00e2
                           0000E3   644 _T1CNTH	=	0x00e3
                           0000E4   645 _T1CTL	=	0x00e4
                           0000E5   646 _T1CCTL0	=	0x00e5
                           0000E6   647 _T1CCTL1	=	0x00e6
                           0000E7   648 _T1CCTL2	=	0x00e7
                           0000AF   649 _T1STAT	=	0x00af
                           000094   650 _T2CTRL	=	0x0094
                           00009C   651 _T2EVTCFG	=	0x009c
                           0000A1   652 _T2IRQF	=	0x00a1
                           0000A2   653 _T2M0	=	0x00a2
                           0000A3   654 _T2M1	=	0x00a3
                           0000A4   655 _T2MOVF0	=	0x00a4
                           0000A5   656 _T2MOVF1	=	0x00a5
                           0000A6   657 _T2MOVF2	=	0x00a6
                           0000A7   658 _T2IRQM	=	0x00a7
                           0000C3   659 _T2MSEL	=	0x00c3
                           0000CA   660 _T3CNT	=	0x00ca
                           0000CB   661 _T3CTL	=	0x00cb
                           0000CC   662 _T3CCTL0	=	0x00cc
                           0000CD   663 _T3CC0	=	0x00cd
                           0000CE   664 _T3CCTL1	=	0x00ce
                           0000CF   665 _T3CC1	=	0x00cf
                           0000EA   666 _T4CNT	=	0x00ea
                           0000EB   667 _T4CTL	=	0x00eb
                           0000EC   668 _T4CCTL0	=	0x00ec
                           0000ED   669 _T4CC0	=	0x00ed
                           0000EE   670 _T4CCTL1	=	0x00ee
                           0000EF   671 _T4CC1	=	0x00ef
                           0000D8   672 _TIMIF	=	0x00d8
                           000086   673 _U0CSR	=	0x0086
                           0000C1   674 _U0DBUF	=	0x00c1
                           0000C2   675 _U0BAUD	=	0x00c2
                           0000C4   676 _U0UCR	=	0x00c4
                           0000C5   677 _U0GCR	=	0x00c5
                           0000F8   678 _U1CSR	=	0x00f8
                           0000F9   679 _U1DBUF	=	0x00f9
                           0000FA   680 _U1BAUD	=	0x00fa
                           0000FB   681 _U1UCR	=	0x00fb
                           0000FC   682 _U1GCR	=	0x00fc
                           0000C9   683 _WDCTL	=	0x00c9
                                    684 ;--------------------------------------------------------
                                    685 ; special function bits
                                    686 ;--------------------------------------------------------
                                    687 	.area RSEG    (ABS,DATA)
      000000                        688 	.org 0x0000
                           000087   689 _P0_7	=	0x0087
                           000086   690 _P0_6	=	0x0086
                           000085   691 _P0_5	=	0x0085
                           000084   692 _P0_4	=	0x0084
                           000083   693 _P0_3	=	0x0083
                           000082   694 _P0_2	=	0x0082
                           000081   695 _P0_1	=	0x0081
                           000080   696 _P0_0	=	0x0080
                           00008F   697 _URX1IF	=	0x008f
                           00008D   698 _ADCIF	=	0x008d
                           00008B   699 _URX0IF	=	0x008b
                           00008A   700 _IT1	=	0x008a
                           000089   701 _RFERRIF	=	0x0089
                           000088   702 _IT0	=	0x0088
                           000097   703 _P1_7	=	0x0097
                           000096   704 _P1_6	=	0x0096
                           000095   705 _P1_5	=	0x0095
                           000094   706 _P1_4	=	0x0094
                           000093   707 _P1_3	=	0x0093
                           000092   708 _P1_2	=	0x0092
                           000091   709 _P1_1	=	0x0091
                           000090   710 _P1_0	=	0x0090
                           000099   711 _ENCIF_1	=	0x0099
                           000098   712 _ENCIF_0	=	0x0098
                           0000A7   713 _P2_7	=	0x00a7
                           0000A6   714 _P2_6	=	0x00a6
                           0000A5   715 _P2_5	=	0x00a5
                           0000A4   716 _P2_4	=	0x00a4
                           0000A3   717 _P2_3	=	0x00a3
                           0000A2   718 _P2_2	=	0x00a2
                           0000A1   719 _P2_1	=	0x00a1
                           0000A0   720 _P2_0	=	0x00a0
                           0000AF   721 _EA	=	0x00af
                           0000AD   722 _STIE	=	0x00ad
                           0000AC   723 _ENCIE	=	0x00ac
                           0000AB   724 _URX1IE	=	0x00ab
                           0000AA   725 _URX0IE	=	0x00aa
                           0000A9   726 _ADCIE	=	0x00a9
                           0000A8   727 _RFERRIE	=	0x00a8
                           0000BD   728 _P0IE	=	0x00bd
                           0000BC   729 _T4IE	=	0x00bc
                           0000BB   730 _T3IE	=	0x00bb
                           0000BA   731 _T2IE	=	0x00ba
                           0000B9   732 _T1IE	=	0x00b9
                           0000B8   733 _DMAIE	=	0x00b8
                           0000C7   734 _STIF	=	0x00c7
                           0000C5   735 _P0IF	=	0x00c5
                           0000C4   736 _T4IF	=	0x00c4
                           0000C3   737 _T3IF	=	0x00c3
                           0000C2   738 _T2IF	=	0x00c2
                           0000C1   739 _T1IF	=	0x00c1
                           0000C0   740 _DMAIF	=	0x00c0
                           0000D7   741 _CY	=	0x00d7
                           0000D6   742 _AC	=	0x00d6
                           0000D5   743 _F0	=	0x00d5
                           0000D4   744 _RS1	=	0x00d4
                           0000D3   745 _RS0	=	0x00d3
                           0000D2   746 _OV	=	0x00d2
                           0000D1   747 _F1	=	0x00d1
                           0000D0   748 _P	=	0x00d0
                           0000E7   749 _ACC_7	=	0x00e7
                           0000E6   750 _ACC_6	=	0x00e6
                           0000E5   751 _ACC_5	=	0x00e5
                           0000E4   752 _ACC_4	=	0x00e4
                           0000E3   753 _ACC_3	=	0x00e3
                           0000E2   754 _ACC_2	=	0x00e2
                           0000E1   755 _ACC_1	=	0x00e1
                           0000E0   756 _ACC_0	=	0x00e0
                           0000EC   757 _WDTIF	=	0x00ec
                           0000EB   758 _P1IF	=	0x00eb
                           0000EA   759 _UTX1IF	=	0x00ea
                           0000E9   760 _UTX0IF	=	0x00e9
                           0000E8   761 _P2IF	=	0x00e8
                           0000F7   762 _B_7	=	0x00f7
                           0000F6   763 _B_6	=	0x00f6
                           0000F5   764 _B_5	=	0x00f5
                           0000F4   765 _B_4	=	0x00f4
                           0000F3   766 _B_3	=	0x00f3
                           0000F2   767 _B_2	=	0x00f2
                           0000F1   768 _B_1	=	0x00f1
                           0000F0   769 _B_0	=	0x00f0
                           0000DE   770 _OVFIM	=	0x00de
                           0000DD   771 _T4CH1IF	=	0x00dd
                           0000DC   772 _T4CH0IF	=	0x00dc
                           0000DB   773 _T4OVFIF	=	0x00db
                           0000DA   774 _T3CH1IF	=	0x00da
                           0000D9   775 _T3CH0IF	=	0x00d9
                           0000D8   776 _T3OVFIF	=	0x00d8
                           0000FF   777 _MODE	=	0x00ff
                           0000FE   778 _RE	=	0x00fe
                           0000FD   779 _SLAVE	=	0x00fd
                           0000FC   780 _FE	=	0x00fc
                           0000FB   781 _ERR	=	0x00fb
                           0000FA   782 _RX_BYTE	=	0x00fa
                           0000F9   783 _TX_BYTE	=	0x00f9
                           0000F8   784 _ACTIVE	=	0x00f8
                                    785 ;--------------------------------------------------------
                                    786 ; overlayable register banks
                                    787 ;--------------------------------------------------------
                                    788 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        789 	.ds 8
                                    790 ;--------------------------------------------------------
                                    791 ; internal ram data
                                    792 ;--------------------------------------------------------
                                    793 	.area DSEG    (DATA)
                                    794 ;--------------------------------------------------------
                                    795 ; overlayable items in internal ram 
                                    796 ;--------------------------------------------------------
                                    797 ;--------------------------------------------------------
                                    798 ; indirectly addressable internal ram data
                                    799 ;--------------------------------------------------------
                                    800 	.area ISEG    (DATA)
                                    801 ;--------------------------------------------------------
                                    802 ; absolute internal ram data
                                    803 ;--------------------------------------------------------
                                    804 	.area IABS    (ABS,DATA)
                                    805 	.area IABS    (ABS,DATA)
                                    806 ;--------------------------------------------------------
                                    807 ; bit data
                                    808 ;--------------------------------------------------------
                                    809 	.area BSEG    (BIT)
                                    810 ;--------------------------------------------------------
                                    811 ; paged external ram data
                                    812 ;--------------------------------------------------------
                                    813 	.area PSEG    (PAG,XDATA)
                                    814 ;--------------------------------------------------------
                                    815 ; external ram data
                                    816 ;--------------------------------------------------------
                                    817 	.area XSEG    (XDATA)
                           0061A6   818 _MONMUX	=	0x61a6
                           0061A6   819 _OPAMPMC	=	0x61a6
                           006230   820 _I2CCFG	=	0x6230
                           006231   821 _I2CSTAT	=	0x6231
                           006232   822 _I2CDATA	=	0x6232
                           006233   823 _I2CADDR	=	0x6233
                           006234   824 _I2CWC	=	0x6234
                           006235   825 _I2CIO	=	0x6235
                           006243   826 _OBSSEL0	=	0x6243
                           006244   827 _OBSSEL1	=	0x6244
                           006245   828 _OBSSEL2	=	0x6245
                           006246   829 _OBSSEL3	=	0x6246
                           006247   830 _OBSSEL4	=	0x6247
                           006248   831 _OBSSEL5	=	0x6248
                           006249   832 _CHVER	=	0x6249
                           00624A   833 _CHIPID	=	0x624a
                           00624B   834 _TESTREG0	=	0x624b
                           006260   835 _DBGDATA	=	0x6260
                           006262   836 _SRCRC	=	0x6262
                           006264   837 _BATTMON	=	0x6264
                           006265   838 _IVCTRL	=	0x6265
                           006270   839 _FCTL	=	0x6270
                           006271   840 _FADDRL	=	0x6271
                           006272   841 _FADDRH	=	0x6272
                           006273   842 _FWDATA	=	0x6273
                           006276   843 _CHIPINFO0	=	0x6276
                           006277   844 _CHIPINFO1	=	0x6277
                           006281   845 _IRCTL	=	0x6281
                           006290   846 _CLD	=	0x6290
                           0062A0   847 _XX_T1CCTL0	=	0x62a0
                           0062A1   848 _XX_T1CCTL1	=	0x62a1
                           0062A2   849 _XX_T1CCTL2	=	0x62a2
                           0062A3   850 _T1CCTL3	=	0x62a3
                           0062A4   851 _T1CCTL4	=	0x62a4
                           0062A6   852 _XX_T1CC0L	=	0x62a6
                           0062A7   853 _XX_T1CC0H	=	0x62a7
                           0062A8   854 _XX_T1CC1L	=	0x62a8
                           0062A9   855 _XX_T1CC1H	=	0x62a9
                           0062AA   856 _XX_T1CC2L	=	0x62aa
                           0062AB   857 _XX_T1CC2H	=	0x62ab
                           0062AC   858 _T1CC3L	=	0x62ac
                           0062AD   859 _T1CC3H	=	0x62ad
                           0062AE   860 _T1CC4L	=	0x62ae
                           0062AF   861 _T1CC4H	=	0x62af
                           0062B0   862 _STCC	=	0x62b0
                           0062B1   863 _STCS	=	0x62b1
                           0062B2   864 _STCV0	=	0x62b2
                           0062B3   865 _STCV1	=	0x62b3
                           0062B4   866 _STCV2	=	0x62b4
                           0062C0   867 _OPAMPC	=	0x62c0
                           0062C1   868 _OPAMPS	=	0x62c1
                           0062D0   869 _CMPCTL	=	0x62d0
                           006000   870 _RFCORE_RAM	=	0x6000
                           006000   871 _RXFIFO	=	0x6000
                           006080   872 _TXFIFO	=	0x6080
                           006100   873 _SRC_ADDR_TABLE	=	0x6100
                           006160   874 _SRCRESMASK0	=	0x6160
                           006161   875 _SRCRESMASK1	=	0x6161
                           006162   876 _SRCRESMASK2	=	0x6162
                           006163   877 _SRCRESINDEX	=	0x6163
                           006164   878 _SRCEXTPENDEN0	=	0x6164
                           006165   879 _SRCEXTPENDEN1	=	0x6165
                           006166   880 _SRCEXTPENDEN2	=	0x6166
                           006167   881 _SRCSHORTPENDEN0	=	0x6167
                           006168   882 _SRCSHORTPENDEN1	=	0x6168
                           006169   883 _SRCSHORTPENDEN2	=	0x6169
                           00616A   884 _EXT_ADDR0	=	0x616a
                           00616B   885 _EXT_ADDR1	=	0x616b
                           00616C   886 _EXT_ADDR2	=	0x616c
                           00616D   887 _EXT_ADDR3	=	0x616d
                           00616E   888 _EXT_ADDR4	=	0x616e
                           00616F   889 _EXT_ADDR5	=	0x616f
                           006170   890 _EXT_ADDR6	=	0x6170
                           006171   891 _EXT_ADDR7	=	0x6171
                           006172   892 _PAN_ID0	=	0x6172
                           006173   893 _PAN_ID1	=	0x6173
                           006174   894 _SHORT_ADDR0	=	0x6174
                           006175   895 _SHORT_ADDR1	=	0x6175
                           006180   896 _FRMFILT0	=	0x6180
                           006181   897 _FRMFILT1	=	0x6181
                           006182   898 _SRCMATCH	=	0x6182
                           006183   899 _SRCSHORTEN0	=	0x6183
                           006184   900 _SRCSHORTEN1	=	0x6184
                           006185   901 _SRCSHORTEN2	=	0x6185
                           006186   902 _SRCEXTEN0	=	0x6186
                           006187   903 _SRCEXTEN1	=	0x6187
                           006188   904 _SRCEXTEN2	=	0x6188
                           006189   905 _FRMCTRL0	=	0x6189
                           00618A   906 _FRMCTRL1	=	0x618a
                           00618B   907 _RXENABLE	=	0x618b
                           00618C   908 _RXMASKSET	=	0x618c
                           00618D   909 _RXMASKCLR	=	0x618d
                           00618E   910 _FREQTUNE	=	0x618e
                           00618F   911 _FREQCTRL	=	0x618f
                           006190   912 _TXPOWER	=	0x6190
                           006191   913 _TXCTRL	=	0x6191
                           006192   914 _FSMSTAT0	=	0x6192
                           006193   915 _FSMSTAT1	=	0x6193
                           006194   916 _FIFOPCTRL	=	0x6194
                           006195   917 _FSMCTRL	=	0x6195
                           006196   918 _CCACTRL0	=	0x6196
                           006197   919 _CCACTRL1	=	0x6197
                           006198   920 _RSSI	=	0x6198
                           006199   921 _RSSISTAT	=	0x6199
                           00619A   922 _RXFIRST	=	0x619a
                           00619B   923 _RXFIFOCNT	=	0x619b
                           00619C   924 _TXFIFOCNT	=	0x619c
                           00619D   925 _RXFIRST_PTR	=	0x619d
                           00619E   926 _RXLAST_PTR	=	0x619e
                           00619F   927 _RXP1_PTR	=	0x619f
                           0061A1   928 _TXFIRST_PTR	=	0x61a1
                           0061A2   929 _TXLAST_PTR	=	0x61a2
                           0061A3   930 _RFIRQM0	=	0x61a3
                           0061A4   931 _RFIRQM1	=	0x61a4
                           0061A5   932 _RFERRM	=	0x61a5
                           0061A7   933 _RFRND	=	0x61a7
                           0061A8   934 _MDMCTRL0	=	0x61a8
                           0061A9   935 _MDMCTRL1	=	0x61a9
                           0061AA   936 _FREQEST	=	0x61aa
                           0061AB   937 _RXCTRL	=	0x61ab
                           0061AC   938 _FSCTRL	=	0x61ac
                           0061AD   939 _FSCAL0	=	0x61ad
                           0061AE   940 _FSCAL1	=	0x61ae
                           0061AF   941 _FSCAL2	=	0x61af
                           0061B0   942 _FSCAL3	=	0x61b0
                           0061B1   943 _AGCCTRL0	=	0x61b1
                           0061B2   944 _AGCCTRL1	=	0x61b2
                           0061B3   945 _AGCCTRL2	=	0x61b3
                           0061B4   946 _AGCCTRL3	=	0x61b4
                           0061B5   947 _ADCTEST0	=	0x61b5
                           0061B6   948 _ADCTEST1	=	0x61b6
                           0061B7   949 _ADCTEST2	=	0x61b7
                           0061B8   950 _MDMTEST0	=	0x61b8
                           0061B9   951 _MDMTEST1	=	0x61b9
                           0061BA   952 _DACTEST0	=	0x61ba
                           0061BB   953 _DACTEST1	=	0x61bb
                           0061BC   954 _DACTEST2	=	0x61bc
                           0061BD   955 _ATEST	=	0x61bd
                           0061BE   956 _PTEST0	=	0x61be
                           0061BF   957 _PTEST1	=	0x61bf
                           0061FA   958 _TXFILTCFG	=	0x61fa
                           0061EB   959 _RFC_OBS_CTRL0	=	0x61eb
                           0061EC   960 _RFC_OBS_CTRL1	=	0x61ec
                           0061ED   961 _RFC_OBS_CTRL2	=	0x61ed
                           0061C0   962 _CSPPROG0	=	0x61c0
                           0061C1   963 _CSPPROG1	=	0x61c1
                           0061C2   964 _CSPPROG2	=	0x61c2
                           0061C3   965 _CSPPROG3	=	0x61c3
                           0061C4   966 _CSPPROG4	=	0x61c4
                           0061C5   967 _CSPPROG5	=	0x61c5
                           0061C6   968 _CSPPROG6	=	0x61c6
                           0061C7   969 _CSPPROG7	=	0x61c7
                           0061C8   970 _CSPPROG8	=	0x61c8
                           0061C9   971 _CSPPROG9	=	0x61c9
                           0061CA   972 _CSPPROG10	=	0x61ca
                           0061CB   973 _CSPPROG11	=	0x61cb
                           0061CC   974 _CSPPROG12	=	0x61cc
                           0061CD   975 _CSPPROG13	=	0x61cd
                           0061CE   976 _CSPPROG14	=	0x61ce
                           0061CF   977 _CSPPROG15	=	0x61cf
                           0061D0   978 _CSPPROG16	=	0x61d0
                           0061D1   979 _CSPPROG17	=	0x61d1
                           0061D2   980 _CSPPROG18	=	0x61d2
                           0061D3   981 _CSPPROG19	=	0x61d3
                           0061D4   982 _CSPPROG20	=	0x61d4
                           0061D5   983 _CSPPROG21	=	0x61d5
                           0061D6   984 _CSPPROG22	=	0x61d6
                           0061D7   985 _CSPPROG23	=	0x61d7
                           0061E0   986 _CSPCTRL	=	0x61e0
                           0061E1   987 _CSPSTAT	=	0x61e1
                           0061E2   988 _CSPX	=	0x61e2
                           0061E3   989 _CSPY	=	0x61e3
                           0061E4   990 _CSPZ	=	0x61e4
                           0061E5   991 _CSPT	=	0x61e5
                           006200   992 _USBADDR	=	0x6200
                           006201   993 _USBPOW	=	0x6201
                           006202   994 _USBIIF	=	0x6202
                           006204   995 _USBOIF	=	0x6204
                           006206   996 _USBCIF	=	0x6206
                           006207   997 _USBIIE	=	0x6207
                           006209   998 _USBOIE	=	0x6209
                           00620B   999 _USBCIE	=	0x620b
                           00620C  1000 _USBFRML	=	0x620c
                           00620D  1001 _USBFRMH	=	0x620d
                           00620E  1002 _USBINDEX	=	0x620e
                           00620F  1003 _USBCTRL	=	0x620f
                           006210  1004 _USBMAXI	=	0x6210
                           006211  1005 _USBCS0	=	0x6211
                           006211  1006 _USBCSIL	=	0x6211
                           006212  1007 _USBCSIH	=	0x6212
                           006213  1008 _USBMAXO	=	0x6213
                           006214  1009 _USBCSOL	=	0x6214
                           006215  1010 _USBCSOH	=	0x6215
                           006216  1011 _USBCNT0	=	0x6216
                           006216  1012 _USBCNTL	=	0x6216
                           006217  1013 _USBCNTH	=	0x6217
                           006220  1014 _USBF0	=	0x6220
                           006222  1015 _USBF1	=	0x6222
                           006224  1016 _USBF2	=	0x6224
                           006226  1017 _USBF3	=	0x6226
                           006228  1018 _USBF4	=	0x6228
                           00622A  1019 _USBF5	=	0x622a
                           007080  1020 _X_P0	=	0x7080
                           007086  1021 _X_U0CSR	=	0x7086
                           007089  1022 _X_P0IFG	=	0x7089
                           00708A  1023 _X_P1IFG	=	0x708a
                           00708B  1024 _X_P2IFG	=	0x708b
                           00708C  1025 _X_PICTL	=	0x708c
                           00708D  1026 _X_P1IEN	=	0x708d
                           00708F  1027 _X_P0INP	=	0x708f
                           007090  1028 _X_P1	=	0x7090
                           007091  1029 _X_RFIRQF1	=	0x7091
                           007093  1030 _X_MPAGE	=	0x7093
                           007093  1031 _X__XPAGE	=	0x7093
                           007094  1032 _X_T2CTRL	=	0x7094
                           007095  1033 _X_ST0	=	0x7095
                           007096  1034 _X_ST1	=	0x7096
                           007097  1035 _X_ST2	=	0x7097
                           00709C  1036 _X_T2EVTCFG	=	0x709c
                           00709D  1037 _X_SLEEPSTA	=	0x709d
                           00709E  1038 _X_CLKCONSTA	=	0x709e
                           00709F  1039 _X_FMAP	=	0x709f
                           00709F  1040 _X_PSBANK	=	0x709f
                           0070A0  1041 _X_P2	=	0x70a0
                           0070A1  1042 _X_T2IRQF	=	0x70a1
                           0070A2  1043 _X_T2M0	=	0x70a2
                           0070A3  1044 _X_T2M1	=	0x70a3
                           0070A4  1045 _X_T2MOVF0	=	0x70a4
                           0070A5  1046 _X_T2MOVF1	=	0x70a5
                           0070A6  1047 _X_T2MOVF2	=	0x70a6
                           0070A7  1048 _X_T2IRQM	=	0x70a7
                           0070AB  1049 _X_P0IEN	=	0x70ab
                           0070AC  1050 _X_P2IEN	=	0x70ac
                           0070AD  1051 _X_STLOAD	=	0x70ad
                           0070AE  1052 _X_PMUX	=	0x70ae
                           0070AF  1053 _X_T1STAT	=	0x70af
                           0070B1  1054 _X_ENCDI	=	0x70b1
                           0070B2  1055 _X_ENCDO	=	0x70b2
                           0070B3  1056 _X_ENCCS	=	0x70b3
                           0070B4  1057 _X_ADCCON1	=	0x70b4
                           0070B5  1058 _X_ADCCON2	=	0x70b5
                           0070B6  1059 _X_ADCCON3	=	0x70b6
                           0070BA  1060 _X_ADCL	=	0x70ba
                           0070BB  1061 _X_ADCH	=	0x70bb
                           0070BC  1062 _X_RNDL	=	0x70bc
                           0070BD  1063 _X_RNDH	=	0x70bd
                           0070BE  1064 _X_SLEEPCMD	=	0x70be
                           0070BF  1065 _X_RFERRF	=	0x70bf
                           0070C1  1066 _X_U0DBUF	=	0x70c1
                           0070C2  1067 _X_U0BAUD	=	0x70c2
                           0070C3  1068 _X_T2MSEL	=	0x70c3
                           0070C4  1069 _X_U0UCR	=	0x70c4
                           0070C5  1070 _X_U0GCR	=	0x70c5
                           0070C6  1071 _X_CLKCONCMD	=	0x70c6
                           0070C7  1072 _X_MEMCTR	=	0x70c7
                           0070C9  1073 _X_WDCTL	=	0x70c9
                           0070CA  1074 _X_T3CNT	=	0x70ca
                           0070CB  1075 _X_T3CTL	=	0x70cb
                           0070CC  1076 _X_T3CCTL0	=	0x70cc
                           0070CD  1077 _X_T3CC0	=	0x70cd
                           0070CE  1078 _X_T3CCTL1	=	0x70ce
                           0070CF  1079 _X_T3CC1	=	0x70cf
                           0070D1  1080 _X_DMAIRQ	=	0x70d1
                           0070D2  1081 _X_DMA1CFGL	=	0x70d2
                           0070D3  1082 _X_DMA1CFGH	=	0x70d3
                           0070D4  1083 _X_DMA0CFGL	=	0x70d4
                           0070D5  1084 _X_DMA0CFGH	=	0x70d5
                           0070D6  1085 _X_DMAARM	=	0x70d6
                           0070D7  1086 _X_DMAREQ	=	0x70d7
                           0070D8  1087 _X_TIMIF	=	0x70d8
                           0070D9  1088 _X_RFD	=	0x70d9
                           0070DA  1089 _X_T1CC0L	=	0x70da
                           0070DB  1090 _X_T1CC0H	=	0x70db
                           0070DC  1091 _X_T1CC1L	=	0x70dc
                           0070DD  1092 _X_T1CC1H	=	0x70dd
                           0070DE  1093 _X_T1CC2L	=	0x70de
                           0070DF  1094 _X_T1CC2H	=	0x70df
                           0070E1  1095 _X_RFST	=	0x70e1
                           0070E2  1096 _X_T1CNTL	=	0x70e2
                           0070E3  1097 _X_T1CNTH	=	0x70e3
                           0070E4  1098 _X_T1CTL	=	0x70e4
                           0070E5  1099 _X_T1CCTL0	=	0x70e5
                           0070E6  1100 _X_T1CCTL1	=	0x70e6
                           0070E7  1101 _X_T1CCTL2	=	0x70e7
                           0070E9  1102 _X_RFIRQF0	=	0x70e9
                           0070EA  1103 _X_T4CNT	=	0x70ea
                           0070EB  1104 _X_T4CTL	=	0x70eb
                           0070EC  1105 _X_T4CCTL0	=	0x70ec
                           0070ED  1106 _X_T4CC0	=	0x70ed
                           0070EE  1107 _X_T4CCTL1	=	0x70ee
                           0070EF  1108 _X_T4CC1	=	0x70ef
                           0070F1  1109 _X_PERCFG	=	0x70f1
                           0070F2  1110 _X_APCFG	=	0x70f2
                           0070F3  1111 _X_P0SEL	=	0x70f3
                           0070F4  1112 _X_P1SEL	=	0x70f4
                           0070F5  1113 _X_P2SEL	=	0x70f5
                           0070F6  1114 _X_P1INP	=	0x70f6
                           0070F7  1115 _X_P2INP	=	0x70f7
                           0070F8  1116 _X_U1CSR	=	0x70f8
                           0070F9  1117 _X_U1DBUF	=	0x70f9
                           0070FA  1118 _X_U1BAUD	=	0x70fa
                           0070FB  1119 _X_U1UCR	=	0x70fb
                           0070FC  1120 _X_U1GCR	=	0x70fc
                           0070FD  1121 _X_P0DIR	=	0x70fd
                           0070FE  1122 _X_P1DIR	=	0x70fe
                           0070FF  1123 _X_P2DIR	=	0x70ff
                           007800  1124 _X_INFOPAGE	=	0x7800
                           00780C  1125 _X_IEEE_ADDR	=	0x780c
      000000                       1126 _elfloader_unknown::
      000000                       1127 	.ds 30
      00001E                       1128 _elfloader_autostart_processes::
      00001E                       1129 	.ds 3
      000021                       1130 _bss:
      000021                       1131 	.ds 6
      000027                       1132 _data:
      000027                       1133 	.ds 6
      00002D                       1134 _rodata:
      00002D                       1135 	.ds 6
      000033                       1136 _text:
      000033                       1137 	.ds 6
                                   1138 ;--------------------------------------------------------
                                   1139 ; absolute external ram data
                                   1140 ;--------------------------------------------------------
                                   1141 	.area XABS    (ABS,XDATA)
                                   1142 ;--------------------------------------------------------
                                   1143 ; external initialized ram data
                                   1144 ;--------------------------------------------------------
                                   1145 	.area XISEG   (XDATA)
                                   1146 	.area HOME    (CODE)
                                   1147 	.area GSINIT0 (CODE)
                                   1148 	.area GSINIT1 (CODE)
                                   1149 	.area GSINIT2 (CODE)
                                   1150 	.area GSINIT3 (CODE)
                                   1151 	.area GSINIT4 (CODE)
                                   1152 	.area GSINIT5 (CODE)
                                   1153 	.area GSINIT  (CODE)
                                   1154 	.area GSFINAL (CODE)
                                   1155 	.area CSEG    (CODE)
                                   1156 ;--------------------------------------------------------
                                   1157 ; global & static initialisations
                                   1158 ;--------------------------------------------------------
                                   1159 	.area HOME    (CODE)
                                   1160 	.area GSINIT  (CODE)
                                   1161 	.area GSFINAL (CODE)
                                   1162 	.area GSINIT  (CODE)
                                   1163 ;--------------------------------------------------------
                                   1164 ; Home
                                   1165 ;--------------------------------------------------------
                                   1166 	.area HOME    (CODE)
                                   1167 	.area HOME    (CODE)
                                   1168 ;--------------------------------------------------------
                                   1169 ; code
                                   1170 ;--------------------------------------------------------
                                   1171 	.area BANK1   (CODE)
                                   1172 ;------------------------------------------------------------
                                   1173 ;Allocation info for local variables in function 'seek_read'
                                   1174 ;------------------------------------------------------------
                                   1175 ;offset                    Allocated to stack - sp -4
                                   1176 ;buf                       Allocated to stack - sp -7
                                   1177 ;len                       Allocated to stack - sp -9
                                   1178 ;fd                        Allocated to registers r6 r7 
                                   1179 ;------------------------------------------------------------
                                   1180 ;	../../../core/loader/elfloader.c:149: seek_read(int fd, unsigned int offset, char *buf, int len)
                                   1181 ;	-----------------------------------------
                                   1182 ;	 function seek_read
                                   1183 ;	-----------------------------------------
      000000                       1184 _seek_read:
                           000007  1185 	ar7 = 0x07
                           000006  1186 	ar6 = 0x06
                           000005  1187 	ar5 = 0x05
                           000004  1188 	ar4 = 0x04
                           000003  1189 	ar3 = 0x03
                           000002  1190 	ar2 = 0x02
                           000001  1191 	ar1 = 0x01
                           000000  1192 	ar0 = 0x00
      000000 AE 82            [24] 1193 	mov	r6,dpl
      000002 AF 83            [24] 1194 	mov	r7,dph
                                   1195 ;	../../../core/loader/elfloader.c:151: cfs_seek(fd, offset, CFS_SEEK_SET);
      000004 C0 07            [24] 1196 	push	ar7
      000006 C0 06            [24] 1197 	push	ar6
      000008 E4               [12] 1198 	clr	a
      000009 C0 E0            [24] 1199 	push	acc
      00000B C0 E0            [24] 1200 	push	acc
      00000D E5 81            [12] 1201 	mov	a,sp
      00000F 24 F8            [12] 1202 	add	a,#0xf8
      000011 F8               [12] 1203 	mov	r0,a
      000012 E6               [12] 1204 	mov	a,@r0
      000013 C0 E0            [24] 1205 	push	acc
      000015 08               [12] 1206 	inc	r0
      000016 E6               [12] 1207 	mov	a,@r0
      000017 C0 E0            [24] 1208 	push	acc
      000019 8E 82            [24] 1209 	mov	dpl,r6
      00001B 8F 83            [24] 1210 	mov	dph,r7
      00001D 78r00            [12] 1211 	mov	r0,#_cfs_seek
      00001F 79s00            [12] 1212 	mov	r1,#(_cfs_seek >> 8)
      000021 7As00            [12] 1213 	mov	r2,#(_cfs_seek >> 16)
      000023 12r00r00         [24] 1214 	lcall	__sdcc_banked_call
      000026 E5 81            [12] 1215 	mov	a,sp
      000028 24 FC            [12] 1216 	add	a,#0xfc
      00002A F5 81            [12] 1217 	mov	sp,a
      00002C D0 06            [24] 1218 	pop	ar6
      00002E D0 07            [24] 1219 	pop	ar7
                                   1220 ;	../../../core/loader/elfloader.c:152: cfs_read(fd, buf, len);
      000030 E5 81            [12] 1221 	mov	a,sp
      000032 24 F9            [12] 1222 	add	a,#0xf9
      000034 F8               [12] 1223 	mov	r0,a
      000035 86 03            [24] 1224 	mov	ar3,@r0
      000037 08               [12] 1225 	inc	r0
      000038 86 04            [24] 1226 	mov	ar4,@r0
      00003A 08               [12] 1227 	inc	r0
      00003B 86 05            [24] 1228 	mov	ar5,@r0
      00003D E5 81            [12] 1229 	mov	a,sp
      00003F 24 F7            [12] 1230 	add	a,#0xf7
      000041 F8               [12] 1231 	mov	r0,a
      000042 E6               [12] 1232 	mov	a,@r0
      000043 C0 E0            [24] 1233 	push	acc
      000045 08               [12] 1234 	inc	r0
      000046 E6               [12] 1235 	mov	a,@r0
      000047 C0 E0            [24] 1236 	push	acc
      000049 C0 03            [24] 1237 	push	ar3
      00004B C0 04            [24] 1238 	push	ar4
      00004D C0 05            [24] 1239 	push	ar5
      00004F 8E 82            [24] 1240 	mov	dpl,r6
      000051 8F 83            [24] 1241 	mov	dph,r7
      000053 78r00            [12] 1242 	mov	r0,#_cfs_read
      000055 79s00            [12] 1243 	mov	r1,#(_cfs_read >> 8)
      000057 7As00            [12] 1244 	mov	r2,#(_cfs_read >> 16)
      000059 12r00r00         [24] 1245 	lcall	__sdcc_banked_call
      00005C E5 81            [12] 1246 	mov	a,sp
      00005E 24 FB            [12] 1247 	add	a,#0xfb
      000060 F5 81            [12] 1248 	mov	sp,a
                                   1249 ;	../../../core/loader/elfloader.c:164: }
      000062 02r00r00         [24] 1250 	ljmp	__sdcc_banked_ret
                                   1251 ;------------------------------------------------------------
                                   1252 ;Allocation info for local variables in function 'find_local_symbol'
                                   1253 ;------------------------------------------------------------
                                   1254 ;symbol                    Allocated to stack - sp -62
                                   1255 ;symtab                    Allocated to stack - sp -64
                                   1256 ;symtabsize                Allocated to stack - sp -66
                                   1257 ;strtab                    Allocated to stack - sp -68
                                   1258 ;fd                        Allocated to stack - sp -56
                                   1259 ;s                         Allocated to stack - sp -45
                                   1260 ;a                         Allocated to registers 
                                   1261 ;name                      Allocated to stack - sp -29
                                   1262 ;sect                      Allocated to registers r3 r6 r7 
                                   1263 ;sloc0                     Allocated to stack - sp -54
                                   1264 ;sloc1                     Allocated to stack - sp -52
                                   1265 ;sloc2                     Allocated to stack - sp +1
                                   1266 ;sloc3                     Allocated to stack - sp -50
                                   1267 ;sloc4                     Allocated to stack - sp -49
                                   1268 ;sloc5                     Allocated to stack - sp -48
                                   1269 ;sloc6                     Allocated to stack - sp +7
                                   1270 ;------------------------------------------------------------
                                   1271 ;	../../../core/loader/elfloader.c:176: find_local_symbol(int fd, const char *symbol,
                                   1272 ;	-----------------------------------------
                                   1273 ;	 function find_local_symbol
                                   1274 ;	-----------------------------------------
      000065                       1275 _find_local_symbol:
      000065 C0 82            [24] 1276 	push	dpl
      000067 C0 83            [24] 1277 	push	dph
      000069 E5 81            [12] 1278 	mov	a,sp
      00006B 24 37            [12] 1279 	add	a,#0x37
                                   1280 ;	../../../core/loader/elfloader.c:185: for(a = symtab; a < symtab + symtabsize; a += sizeof(s)) {
      00006D F5 81            [12] 1281 	mov	sp,a
      00006F 24 C0            [12] 1282 	add	a,#0xc0
      000071 F8               [12] 1283 	mov	r0,a
      000072 86 04            [24] 1284 	mov	ar4,@r0
      000074 08               [12] 1285 	inc	r0
      000075 86 05            [24] 1286 	mov	ar5,@r0
      000077 E5 81            [12] 1287 	mov	a,sp
      000079 24 CE            [12] 1288 	add	a,#0xce
      00007B F8               [12] 1289 	mov	r0,a
      00007C E5 81            [12] 1290 	mov	a,sp
      00007E 24 E3            [12] 1291 	add	a,#0xe3
      000080 F6               [12] 1292 	mov	@r0,a
      000081 E5 81            [12] 1293 	mov	a,sp
      000083 24 D3            [12] 1294 	add	a,#0xd3
      000085 F9               [12] 1295 	mov	r1,a
      000086 E5 81            [12] 1296 	mov	a,sp
      000088 24 BC            [12] 1297 	add	a,#0xbc
      00008A F8               [12] 1298 	mov	r0,a
      00008B C0 01            [24] 1299 	push	ar1
      00008D E5 81            [12] 1300 	mov	a,sp
      00008F 24 C9            [12] 1301 	add	a,#0xc9
      000091 F9               [12] 1302 	mov	r1,a
      000092 E6               [12] 1303 	mov	a,@r0
      000093 F7               [12] 1304 	mov	@r1,a
      000094 08               [12] 1305 	inc	r0
      000095 09               [12] 1306 	inc	r1
      000096 E6               [12] 1307 	mov	a,@r0
      000097 F7               [12] 1308 	mov	@r1,a
      000098 D0 01            [24] 1309 	pop	ar1
      00009A E5 81            [12] 1310 	mov	a,sp
      00009C 24 CE            [12] 1311 	add	a,#0xce
      00009E F8               [12] 1312 	mov	r0,a
      00009F C0 01            [24] 1313 	push	ar1
      0000A1 E5 81            [12] 1314 	mov	a,sp
      0000A3 24 CE            [12] 1315 	add	a,#0xce
      0000A5 F9               [12] 1316 	mov	r1,a
      0000A6 E6               [12] 1317 	mov	a,@r0
      0000A7 F7               [12] 1318 	mov	@r1,a
      0000A8 D0 01            [24] 1319 	pop	ar1
      0000AA E5 81            [12] 1320 	mov	a,sp
      0000AC 24 D3            [12] 1321 	add	a,#0xd3
      0000AE F8               [12] 1322 	mov	r0,a
      0000AF C0 00            [24] 1323 	push	ar0
      0000B1 E5 81            [12] 1324 	mov	a,sp
      0000B3 24 BF            [12] 1325 	add	a,#0xbf
      0000B5 F8               [12] 1326 	mov	r0,a
      0000B6 C0 01            [24] 1327 	push	ar1
      0000B8 E5 81            [12] 1328 	mov	a,sp
      0000BA 24 BC            [12] 1329 	add	a,#0xbc
      0000BC F9               [12] 1330 	mov	r1,a
      0000BD E7               [12] 1331 	mov	a,@r1
      0000BE 26               [12] 1332 	add	a,@r0
      0000BF C0 E0            [24] 1333 	push	acc
      0000C1 09               [12] 1334 	inc	r1
      0000C2 E7               [12] 1335 	mov	a,@r1
      0000C3 08               [12] 1336 	inc	r0
      0000C4 36               [12] 1337 	addc	a,@r0
      0000C5 C0 E0            [24] 1338 	push	acc
      0000C7 E5 81            [12] 1339 	mov	a,sp
      0000C9 24 C9            [12] 1340 	add	a,#0xc9
      0000CB F8               [12] 1341 	mov	r0,a
      0000CC D0 E0            [24] 1342 	pop	acc
      0000CE F6               [12] 1343 	mov	@r0,a
      0000CF 18               [12] 1344 	dec	r0
      0000D0 D0 E0            [24] 1345 	pop	acc
      0000D2 F6               [12] 1346 	mov	@r0,a
      0000D3 D0 01            [24] 1347 	pop	ar1
      0000D5 D0 00            [24] 1348 	pop	ar0
      0000D7                       1349 00116$:
      0000D7 C0 00            [24] 1350 	push	ar0
      0000D9 E5 81            [12] 1351 	mov	a,sp
      0000DB 24 CB            [12] 1352 	add	a,#0xcb
      0000DD F8               [12] 1353 	mov	r0,a
      0000DE C3               [12] 1354 	clr	c
      0000DF EC               [12] 1355 	mov	a,r4
      0000E0 96               [12] 1356 	subb	a,@r0
      0000E1 ED               [12] 1357 	mov	a,r5
      0000E2 08               [12] 1358 	inc	r0
      0000E3 96               [12] 1359 	subb	a,@r0
      0000E4 D0 00            [24] 1360 	pop	ar0
      0000E6 40 03            [24] 1361 	jc	00148$
      0000E8 02r02rDB         [24] 1362 	ljmp	00114$
      0000EB                       1363 00148$:
                                   1364 ;	../../../core/loader/elfloader.c:186: seek_read(fd, a, (char *)&s, sizeof(s));
      0000EB 88 02            [24] 1365 	mov	ar2,r0
      0000ED 7E 00            [12] 1366 	mov	r6,#0x00
      0000EF 7F 40            [12] 1367 	mov	r7,#0x40
      0000F1 C0 05            [24] 1368 	push	ar5
      0000F3 C0 04            [24] 1369 	push	ar4
      0000F5 C0 01            [24] 1370 	push	ar1
      0000F7 C0 00            [24] 1371 	push	ar0
      0000F9 74 10            [12] 1372 	mov	a,#0x10
      0000FB C0 E0            [24] 1373 	push	acc
      0000FD E4               [12] 1374 	clr	a
      0000FE C0 E0            [24] 1375 	push	acc
      000100 C0 02            [24] 1376 	push	ar2
      000102 C0 06            [24] 1377 	push	ar6
      000104 C0 07            [24] 1378 	push	ar7
      000106 C0 04            [24] 1379 	push	ar4
      000108 C0 05            [24] 1380 	push	ar5
      00010A C0 00            [24] 1381 	push	ar0
      00010C E5 81            [12] 1382 	mov	a,sp
      00010E 24 BC            [12] 1383 	add	a,#0xbc
      000110 F8               [12] 1384 	mov	r0,a
      000111 86 82            [24] 1385 	mov	dpl,@r0
      000113 08               [12] 1386 	inc	r0
      000114 86 83            [24] 1387 	mov	dph,@r0
      000116 D0 00            [24] 1388 	pop	ar0
      000118 78r00            [12] 1389 	mov	r0,#_seek_read
      00011A 79s00            [12] 1390 	mov	r1,#(_seek_read >> 8)
      00011C 7As00            [12] 1391 	mov	r2,#(_seek_read >> 16)
      00011E 12r00r00         [24] 1392 	lcall	__sdcc_banked_call
      000121 E5 81            [12] 1393 	mov	a,sp
      000123 24 F9            [12] 1394 	add	a,#0xf9
      000125 F5 81            [12] 1395 	mov	sp,a
      000127 D0 00            [24] 1396 	pop	ar0
      000129 D0 01            [24] 1397 	pop	ar1
      00012B D0 04            [24] 1398 	pop	ar4
      00012D D0 05            [24] 1399 	pop	ar5
                                   1400 ;	../../../core/loader/elfloader.c:188: if(s.st_name != 0) {
      00012F 86 02            [24] 1401 	mov	ar2,@r0
      000131 08               [12] 1402 	inc	r0
      000132 86 03            [24] 1403 	mov	ar3,@r0
      000134 08               [12] 1404 	inc	r0
      000135 86 06            [24] 1405 	mov	ar6,@r0
      000137 08               [12] 1406 	inc	r0
      000138 86 07            [24] 1407 	mov	ar7,@r0
      00013A 18               [12] 1408 	dec	r0
      00013B 18               [12] 1409 	dec	r0
      00013C 18               [12] 1410 	dec	r0
      00013D EA               [12] 1411 	mov	a,r2
      00013E 4B               [12] 1412 	orl	a,r3
      00013F 4E               [12] 1413 	orl	a,r6
      000140 4F               [12] 1414 	orl	a,r7
      000141 70 03            [24] 1415 	jnz	00149$
      000143 02r02rD1         [24] 1416 	ljmp	00117$
      000146                       1417 00149$:
                                   1418 ;	../../../core/loader/elfloader.c:189: seek_read(fd, strtab + s.st_name, name, sizeof(name));
      000146 C0 00            [24] 1419 	push	ar0
      000148 C0 00            [24] 1420 	push	ar0
      00014A E5 81            [12] 1421 	mov	a,sp
      00014C 24 CC            [12] 1422 	add	a,#0xcc
      00014E F8               [12] 1423 	mov	r0,a
      00014F C0 01            [24] 1424 	push	ar1
      000151 E5 81            [12] 1425 	mov	a,sp
      000153 24 CD            [12] 1426 	add	a,#0xcd
      000155 F9               [12] 1427 	mov	r1,a
      000156 E6               [12] 1428 	mov	a,@r0
      000157 F7               [12] 1429 	mov	@r1,a
      000158 09               [12] 1430 	inc	r1
      000159 77 00            [12] 1431 	mov	@r1,#0x00
      00015B 09               [12] 1432 	inc	r1
      00015C 77 40            [12] 1433 	mov	@r1,#0x40
      00015E D0 01            [24] 1434 	pop	ar1
      000160 87 02            [24] 1435 	mov	ar2,@r1
      000162 09               [12] 1436 	inc	r1
      000163 87 07            [24] 1437 	mov	ar7,@r1
      000165 19               [12] 1438 	dec	r1
      000166 E5 81            [12] 1439 	mov	a,sp
      000168 24 C8            [12] 1440 	add	a,#0xc8
      00016A F8               [12] 1441 	mov	r0,a
      00016B EA               [12] 1442 	mov	a,r2
      00016C 26               [12] 1443 	add	a,@r0
      00016D FA               [12] 1444 	mov	r2,a
      00016E EF               [12] 1445 	mov	a,r7
      00016F 08               [12] 1446 	inc	r0
      000170 36               [12] 1447 	addc	a,@r0
      000171 FF               [12] 1448 	mov	r7,a
      000172 D0 00            [24] 1449 	pop	ar0
      000174 C0 05            [24] 1450 	push	ar5
      000176 C0 04            [24] 1451 	push	ar4
      000178 C0 01            [24] 1452 	push	ar1
      00017A C0 00            [24] 1453 	push	ar0
      00017C 74 1E            [12] 1454 	mov	a,#0x1e
      00017E C0 E0            [24] 1455 	push	acc
      000180 E4               [12] 1456 	clr	a
      000181 C0 E0            [24] 1457 	push	acc
      000183 85 00 F0         [24] 1458 	mov	b,ar0
      000186 E5 81            [12] 1459 	mov	a,sp
      000188 24 C9            [12] 1460 	add	a,#0xc9
      00018A F8               [12] 1461 	mov	r0,a
      00018B E6               [12] 1462 	mov	a,@r0
      00018C C0 E0            [24] 1463 	push	acc
      00018E 08               [12] 1464 	inc	r0
      00018F E6               [12] 1465 	mov	a,@r0
      000190 C0 E0            [24] 1466 	push	acc
      000192 08               [12] 1467 	inc	r0
      000193 E6               [12] 1468 	mov	a,@r0
      000194 C0 E0            [24] 1469 	push	acc
      000196 A8 F0            [24] 1470 	mov	r0,b
      000198 C0 02            [24] 1471 	push	ar2
      00019A C0 07            [24] 1472 	push	ar7
      00019C C0 00            [24] 1473 	push	ar0
      00019E E5 81            [12] 1474 	mov	a,sp
      0001A0 24 BB            [12] 1475 	add	a,#0xbb
      0001A2 F8               [12] 1476 	mov	r0,a
      0001A3 86 82            [24] 1477 	mov	dpl,@r0
      0001A5 08               [12] 1478 	inc	r0
      0001A6 86 83            [24] 1479 	mov	dph,@r0
      0001A8 D0 00            [24] 1480 	pop	ar0
      0001AA 78r00            [12] 1481 	mov	r0,#_seek_read
      0001AC 79s00            [12] 1482 	mov	r1,#(_seek_read >> 8)
      0001AE 7As00            [12] 1483 	mov	r2,#(_seek_read >> 16)
      0001B0 12r00r00         [24] 1484 	lcall	__sdcc_banked_call
      0001B3 E5 81            [12] 1485 	mov	a,sp
      0001B5 24 F9            [12] 1486 	add	a,#0xf9
      0001B7 F5 81            [12] 1487 	mov	sp,a
      0001B9 D0 00            [24] 1488 	pop	ar0
      0001BB D0 01            [24] 1489 	pop	ar1
      0001BD D0 04            [24] 1490 	pop	ar4
      0001BF D0 05            [24] 1491 	pop	ar5
                                   1492 ;	../../../core/loader/elfloader.c:190: if(strcmp(name, symbol) == 0) {
      0001C1 C0 00            [24] 1493 	push	ar0
      0001C3 E5 81            [12] 1494 	mov	a,sp
      0001C5 24 CD            [12] 1495 	add	a,#0xcd
      0001C7 F8               [12] 1496 	mov	r0,a
      0001C8 86 02            [24] 1497 	mov	ar2,@r0
      0001CA 7E 00            [12] 1498 	mov	r6,#0x00
      0001CC 7F 40            [12] 1499 	mov	r7,#0x40
      0001CE D0 00            [24] 1500 	pop	ar0
      0001D0 C0 05            [24] 1501 	push	ar5
      0001D2 C0 04            [24] 1502 	push	ar4
      0001D4 C0 01            [24] 1503 	push	ar1
      0001D6 C0 00            [24] 1504 	push	ar0
      0001D8 85 00 F0         [24] 1505 	mov	b,ar0
      0001DB E5 81            [12] 1506 	mov	a,sp
      0001DD 24 BD            [12] 1507 	add	a,#0xbd
      0001DF F8               [12] 1508 	mov	r0,a
      0001E0 E6               [12] 1509 	mov	a,@r0
      0001E1 C0 E0            [24] 1510 	push	acc
      0001E3 08               [12] 1511 	inc	r0
      0001E4 E6               [12] 1512 	mov	a,@r0
      0001E5 C0 E0            [24] 1513 	push	acc
      0001E7 08               [12] 1514 	inc	r0
      0001E8 E6               [12] 1515 	mov	a,@r0
      0001E9 C0 E0            [24] 1516 	push	acc
      0001EB 8A 82            [24] 1517 	mov	dpl,r2
      0001ED 8E 83            [24] 1518 	mov	dph,r6
      0001EF 8F F0            [24] 1519 	mov	b,r7
      0001F1 78r00            [12] 1520 	mov	r0,#_strcmp
      0001F3 79s00            [12] 1521 	mov	r1,#(_strcmp >> 8)
      0001F5 7As00            [12] 1522 	mov	r2,#(_strcmp >> 16)
      0001F7 12r00r00         [24] 1523 	lcall	__sdcc_banked_call
      0001FA AE 82            [24] 1524 	mov	r6,dpl
      0001FC AF 83            [24] 1525 	mov	r7,dph
      0001FE 15 81            [12] 1526 	dec	sp
      000200 15 81            [12] 1527 	dec	sp
      000202 15 81            [12] 1528 	dec	sp
      000204 D0 00            [24] 1529 	pop	ar0
      000206 D0 01            [24] 1530 	pop	ar1
      000208 D0 04            [24] 1531 	pop	ar4
      00020A D0 05            [24] 1532 	pop	ar5
      00020C D0 00            [24] 1533 	pop	ar0
      00020E EE               [12] 1534 	mov	a,r6
      00020F 4F               [12] 1535 	orl	a,r7
      000210 60 03            [24] 1536 	jz	00150$
      000212 02r02rD1         [24] 1537 	ljmp	00117$
      000215                       1538 00150$:
                                   1539 ;	../../../core/loader/elfloader.c:191: if(s.st_shndx == bss.number) {
      000215 E5 81            [12] 1540 	mov	a,sp
      000217 24 D3            [12] 1541 	add	a,#0xd3
      000219 24 0E            [12] 1542 	add	a,#0x0e
      00021B F9               [12] 1543 	mov	r1,a
      00021C 87 06            [24] 1544 	mov	ar6,@r1
      00021E 09               [12] 1545 	inc	r1
      00021F 87 07            [24] 1546 	mov	ar7,@r1
      000221 90r00r21         [24] 1547 	mov	dptr,#_bss
      000224 E0               [24] 1548 	movx	a,@dptr
      000225 FB               [12] 1549 	mov	r3,a
      000226 7A 00            [12] 1550 	mov	r2,#0x00
      000228 EE               [12] 1551 	mov	a,r6
      000229 B5 03 0C         [24] 1552 	cjne	a,ar3,00108$
      00022C EF               [12] 1553 	mov	a,r7
      00022D B5 02 08         [24] 1554 	cjne	a,ar2,00108$
                                   1555 ;	../../../core/loader/elfloader.c:192: sect = &bss;
      000230 7Br21            [12] 1556 	mov	r3,#_bss
      000232 7Es00            [12] 1557 	mov	r6,#(_bss >> 8)
      000234 7F 00            [12] 1558 	mov	r7,#0x00
      000236 80 4E            [24] 1559 	sjmp	00109$
      000238                       1560 00108$:
                                   1561 ;	../../../core/loader/elfloader.c:193: } else if(s.st_shndx == data.number) {
      000238 E5 81            [12] 1562 	mov	a,sp
      00023A 24 D3            [12] 1563 	add	a,#0xd3
      00023C 24 0E            [12] 1564 	add	a,#0x0e
      00023E F9               [12] 1565 	mov	r1,a
      00023F 87 07            [24] 1566 	mov	ar7,@r1
      000241 09               [12] 1567 	inc	r1
      000242 87 06            [24] 1568 	mov	ar6,@r1
      000244 90r00r27         [24] 1569 	mov	dptr,#_data
      000247 E0               [24] 1570 	movx	a,@dptr
      000248 FA               [12] 1571 	mov	r2,a
      000249 7D 00            [12] 1572 	mov	r5,#0x00
      00024B EF               [12] 1573 	mov	a,r7
      00024C B5 02 0C         [24] 1574 	cjne	a,ar2,00105$
      00024F EE               [12] 1575 	mov	a,r6
      000250 B5 05 08         [24] 1576 	cjne	a,ar5,00105$
                                   1577 ;	../../../core/loader/elfloader.c:194: sect = &data;
      000253 7Br27            [12] 1578 	mov	r3,#_data
      000255 7Es00            [12] 1579 	mov	r6,#(_data >> 8)
      000257 7F 00            [12] 1580 	mov	r7,#0x00
      000259 80 2B            [24] 1581 	sjmp	00109$
      00025B                       1582 00105$:
                                   1583 ;	../../../core/loader/elfloader.c:195: } else if(s.st_shndx == text.number) {
      00025B E5 81            [12] 1584 	mov	a,sp
      00025D 24 D3            [12] 1585 	add	a,#0xd3
      00025F 24 0E            [12] 1586 	add	a,#0x0e
      000261 F9               [12] 1587 	mov	r1,a
      000262 87 07            [24] 1588 	mov	ar7,@r1
      000264 09               [12] 1589 	inc	r1
      000265 87 06            [24] 1590 	mov	ar6,@r1
      000267 90r00r33         [24] 1591 	mov	dptr,#_text
      00026A E0               [24] 1592 	movx	a,@dptr
      00026B FA               [12] 1593 	mov	r2,a
      00026C 7D 00            [12] 1594 	mov	r5,#0x00
      00026E EF               [12] 1595 	mov	a,r7
      00026F B5 02 0C         [24] 1596 	cjne	a,ar2,00102$
      000272 EE               [12] 1597 	mov	a,r6
      000273 B5 05 08         [24] 1598 	cjne	a,ar5,00102$
                                   1599 ;	../../../core/loader/elfloader.c:196: sect = &text;
      000276 7Br33            [12] 1600 	mov	r3,#_text
      000278 7Es00            [12] 1601 	mov	r6,#(_text >> 8)
      00027A 7F 00            [12] 1602 	mov	r7,#0x00
      00027C 80 08            [24] 1603 	sjmp	00109$
      00027E                       1604 00102$:
                                   1605 ;	../../../core/loader/elfloader.c:198: return NULL;
      00027E 90 00 00         [24] 1606 	mov	dptr,#0x0000
      000281 75 F0 00         [24] 1607 	mov	b,#0x00
      000284 80 5B            [24] 1608 	sjmp	00118$
      000286                       1609 00109$:
                                   1610 ;	../../../core/loader/elfloader.c:200: return &(sect->address[s.st_value]);
      000286 74 03            [12] 1611 	mov	a,#0x03
      000288 2B               [12] 1612 	add	a,r3
      000289 FB               [12] 1613 	mov	r3,a
      00028A E4               [12] 1614 	clr	a
      00028B 3E               [12] 1615 	addc	a,r6
      00028C FE               [12] 1616 	mov	r6,a
      00028D 8B 82            [24] 1617 	mov	dpl,r3
      00028F 8E 83            [24] 1618 	mov	dph,r6
      000291 8F F0            [24] 1619 	mov	b,r7
      000293 E5 81            [12] 1620 	mov	a,sp
      000295 24 D0            [12] 1621 	add	a,#0xd0
      000297 F8               [12] 1622 	mov	r0,a
      000298 12r00r00         [24] 1623 	lcall	__gptrget
      00029B F6               [12] 1624 	mov	@r0,a
      00029C A3               [24] 1625 	inc	dptr
      00029D 12r00r00         [24] 1626 	lcall	__gptrget
      0002A0 08               [12] 1627 	inc	r0
      0002A1 F6               [12] 1628 	mov	@r0,a
      0002A2 A3               [24] 1629 	inc	dptr
      0002A3 12r00r00         [24] 1630 	lcall	__gptrget
      0002A6 08               [12] 1631 	inc	r0
      0002A7 F6               [12] 1632 	mov	@r0,a
      0002A8 E5 81            [12] 1633 	mov	a,sp
      0002AA 24 D3            [12] 1634 	add	a,#0xd3
      0002AC 24 04            [12] 1635 	add	a,#0x04
      0002AE F9               [12] 1636 	mov	r1,a
      0002AF 87 02            [24] 1637 	mov	ar2,@r1
      0002B1 09               [12] 1638 	inc	r1
      0002B2 87 03            [24] 1639 	mov	ar3,@r1
      0002B4 09               [12] 1640 	inc	r1
      0002B5 87 06            [24] 1641 	mov	ar6,@r1
      0002B7 09               [12] 1642 	inc	r1
      0002B8 87 07            [24] 1643 	mov	ar7,@r1
      0002BA E5 81            [12] 1644 	mov	a,sp
      0002BC 24 D0            [12] 1645 	add	a,#0xd0
      0002BE F8               [12] 1646 	mov	r0,a
      0002BF EA               [12] 1647 	mov	a,r2
      0002C0 26               [12] 1648 	add	a,@r0
      0002C1 FA               [12] 1649 	mov	r2,a
      0002C2 EB               [12] 1650 	mov	a,r3
      0002C3 08               [12] 1651 	inc	r0
      0002C4 36               [12] 1652 	addc	a,@r0
      0002C5 FB               [12] 1653 	mov	r3,a
      0002C6 08               [12] 1654 	inc	r0
      0002C7 86 06            [24] 1655 	mov	ar6,@r0
      0002C9 8A 82            [24] 1656 	mov	dpl,r2
      0002CB 8B 83            [24] 1657 	mov	dph,r3
      0002CD 8E F0            [24] 1658 	mov	b,r6
      0002CF 80 10            [24] 1659 	sjmp	00118$
      0002D1                       1660 00117$:
                                   1661 ;	../../../core/loader/elfloader.c:185: for(a = symtab; a < symtab + symtabsize; a += sizeof(s)) {
      0002D1 74 10            [12] 1662 	mov	a,#0x10
      0002D3 2C               [12] 1663 	add	a,r4
      0002D4 FC               [12] 1664 	mov	r4,a
      0002D5 E4               [12] 1665 	clr	a
      0002D6 3D               [12] 1666 	addc	a,r5
      0002D7 FD               [12] 1667 	mov	r5,a
      0002D8 02r00rD7         [24] 1668 	ljmp	00116$
      0002DB                       1669 00114$:
                                   1670 ;	../../../core/loader/elfloader.c:204: return NULL;
      0002DB 90 00 00         [24] 1671 	mov	dptr,#0x0000
      0002DE 75 F0 00         [24] 1672 	mov	b,#0x00
      0002E1                       1673 00118$:
                                   1674 ;	../../../core/loader/elfloader.c:205: }
      0002E1 E5 81            [12] 1675 	mov	a,sp
      0002E3 24 C7            [12] 1676 	add	a,#0xc7
      0002E5 F5 81            [12] 1677 	mov	sp,a
      0002E7 02r00r00         [24] 1678 	ljmp	__sdcc_banked_ret
                                   1679 ;------------------------------------------------------------
                                   1680 ;Allocation info for local variables in function 'relocate_section'
                                   1681 ;------------------------------------------------------------
                                   1682 ;section                   Allocated to stack - sp -92
                                   1683 ;size                      Allocated to stack - sp -94
                                   1684 ;sectionaddr               Allocated to stack - sp -96
                                   1685 ;sectionbase               Allocated to stack - sp -99
                                   1686 ;strs                      Allocated to stack - sp -101
                                   1687 ;strtab                    Allocated to stack - sp -103
                                   1688 ;symtab                    Allocated to stack - sp -105
                                   1689 ;symtabsize                Allocated to stack - sp -107
                                   1690 ;using_relas               Allocated to stack - sp -108
                                   1691 ;fd                        Allocated to stack - sp -87
                                   1692 ;rela                      Allocated to stack - sp -29
                                   1693 ;rel_size                  Allocated to stack - sp -1
                                   1694 ;s                         Allocated to stack - sp -17
                                   1695 ;a                         Allocated to stack - sp -34
                                   1696 ;name                      Allocated to stack - sp -64
                                   1697 ;addr                      Allocated to stack - sp -32
                                   1698 ;sect                      Allocated to registers r2 r3 r5 
                                   1699 ;sloc0                     Allocated to stack - sp -85
                                   1700 ;sloc1                     Allocated to stack - sp -83
                                   1701 ;sloc2                     Allocated to stack - sp -82
                                   1702 ;sloc3                     Allocated to stack - sp -81
                                   1703 ;sloc4                     Allocated to stack - sp -80
                                   1704 ;sloc5                     Allocated to stack - sp -11
                                   1705 ;sloc6                     Allocated to stack - sp -79
                                   1706 ;sloc7                     Allocated to stack - sp -78
                                   1707 ;sloc8                     Allocated to stack - sp -77
                                   1708 ;sloc9                     Allocated to stack - sp -76
                                   1709 ;sloc10                    Allocated to stack - sp -74
                                   1710 ;sloc11                    Allocated to stack - sp -73
                                   1711 ;sloc12                    Allocated to stack - sp -71
                                   1712 ;sloc13                    Allocated to stack - sp -70
                                   1713 ;sloc14                    Allocated to stack - sp -67
                                   1714 ;sloc15                    Allocated to stack - sp +3
                                   1715 ;sloc16                    Allocated to stack - sp -66
                                   1716 ;------------------------------------------------------------
                                   1717 ;	../../../core/loader/elfloader.c:208: relocate_section(int fd,
                                   1718 ;	-----------------------------------------
                                   1719 ;	 function relocate_section
                                   1720 ;	-----------------------------------------
      0002EA                       1721 _relocate_section:
      0002EA C0 82            [24] 1722 	push	dpl
      0002EC C0 83            [24] 1723 	push	dph
      0002EE E5 81            [12] 1724 	mov	a,sp
      0002F0 24 56            [12] 1725 	add	a,#0x56
                                   1726 ;	../../../core/loader/elfloader.c:227: if(using_relas) {
      0002F2 F5 81            [12] 1727 	mov	sp,a
      0002F4 24 94            [12] 1728 	add	a,#0x94
      0002F6 F8               [12] 1729 	mov	r0,a
      0002F7 E6               [12] 1730 	mov	a,@r0
      0002F8 60 0A            [24] 1731 	jz	00102$
                                   1732 ;	../../../core/loader/elfloader.c:228: rel_size = sizeof(struct elf32_rela);
      0002FA A8 81            [24] 1733 	mov	r0,sp
      0002FC 18               [12] 1734 	dec	r0
      0002FD 76 0C            [12] 1735 	mov	@r0,#0x0c
      0002FF 08               [12] 1736 	inc	r0
      000300 76 00            [12] 1737 	mov	@r0,#0x00
      000302 80 08            [24] 1738 	sjmp	00103$
      000304                       1739 00102$:
                                   1740 ;	../../../core/loader/elfloader.c:230: rel_size = sizeof(struct elf32_rel);
      000304 A8 81            [24] 1741 	mov	r0,sp
      000306 18               [12] 1742 	dec	r0
      000307 76 08            [12] 1743 	mov	@r0,#0x08
      000309 08               [12] 1744 	inc	r0
      00030A 76 00            [12] 1745 	mov	@r0,#0x00
      00030C                       1746 00103$:
                                   1747 ;	../../../core/loader/elfloader.c:233: for(a = section; a < section + size; a += rel_size) {
      00030C E5 81            [12] 1748 	mov	a,sp
      00030E 24 A4            [12] 1749 	add	a,#0xa4
      000310 F8               [12] 1750 	mov	r0,a
      000311 E5 81            [12] 1751 	mov	a,sp
      000313 24 DE            [12] 1752 	add	a,#0xde
      000315 F9               [12] 1753 	mov	r1,a
      000316 E6               [12] 1754 	mov	a,@r0
      000317 F7               [12] 1755 	mov	@r1,a
      000318 08               [12] 1756 	inc	r0
      000319 09               [12] 1757 	inc	r1
      00031A E6               [12] 1758 	mov	a,@r0
      00031B F7               [12] 1759 	mov	@r1,a
      00031C E5 81            [12] 1760 	mov	a,sp
      00031E 24 BD            [12] 1761 	add	a,#0xbd
      000320 F8               [12] 1762 	mov	r0,a
      000321 E5 81            [12] 1763 	mov	a,sp
      000323 24 C0            [12] 1764 	add	a,#0xc0
      000325 F6               [12] 1765 	mov	@r0,a
      000326 E5 81            [12] 1766 	mov	a,sp
      000328 24 BD            [12] 1767 	add	a,#0xbd
      00032A F8               [12] 1768 	mov	r0,a
      00032B E5 81            [12] 1769 	mov	a,sp
      00032D 24 B9            [12] 1770 	add	a,#0xb9
      00032F F9               [12] 1771 	mov	r1,a
      000330 E6               [12] 1772 	mov	a,@r0
      000331 F7               [12] 1773 	mov	@r1,a
      000332 E5 81            [12] 1774 	mov	a,sp
      000334 24 EF            [12] 1775 	add	a,#0xef
      000336 F9               [12] 1776 	mov	r1,a
      000337 E5 81            [12] 1777 	mov	a,sp
      000339 24 99            [12] 1778 	add	a,#0x99
      00033B F8               [12] 1779 	mov	r0,a
      00033C C0 01            [24] 1780 	push	ar1
      00033E E5 81            [12] 1781 	mov	a,sp
      000340 24 AA            [12] 1782 	add	a,#0xaa
      000342 F9               [12] 1783 	mov	r1,a
      000343 E6               [12] 1784 	mov	a,@r0
      000344 F7               [12] 1785 	mov	@r1,a
      000345 08               [12] 1786 	inc	r0
      000346 09               [12] 1787 	inc	r1
      000347 E6               [12] 1788 	mov	a,@r0
      000348 F7               [12] 1789 	mov	@r1,a
      000349 D0 01            [24] 1790 	pop	ar1
      00034B E5 81            [12] 1791 	mov	a,sp
      00034D 24 BD            [12] 1792 	add	a,#0xbd
      00034F F8               [12] 1793 	mov	r0,a
      000350 C0 01            [24] 1794 	push	ar1
      000352 E5 81            [12] 1795 	mov	a,sp
      000354 24 AC            [12] 1796 	add	a,#0xac
      000356 F9               [12] 1797 	mov	r1,a
      000357 E6               [12] 1798 	mov	a,@r0
      000358 F7               [12] 1799 	mov	@r1,a
      000359 D0 01            [24] 1800 	pop	ar1
      00035B E5 81            [12] 1801 	mov	a,sp
      00035D 24 EF            [12] 1802 	add	a,#0xef
      00035F FF               [12] 1803 	mov	r7,a
      000360 E5 81            [12] 1804 	mov	a,sp
      000362 24 AE            [12] 1805 	add	a,#0xae
      000364 F8               [12] 1806 	mov	r0,a
      000365 74 0E            [12] 1807 	mov	a,#0x0e
      000367 2F               [12] 1808 	add	a,r7
      000368 F6               [12] 1809 	mov	@r0,a
      000369 E5 81            [12] 1810 	mov	a,sp
      00036B 24 AF            [12] 1811 	add	a,#0xaf
      00036D F8               [12] 1812 	mov	r0,a
      00036E A6 07            [24] 1813 	mov	@r0,ar7
      000370 E5 81            [12] 1814 	mov	a,sp
      000372 24 AE            [12] 1815 	add	a,#0xae
      000374 F8               [12] 1816 	mov	r0,a
      000375 C0 01            [24] 1817 	push	ar1
      000377 E5 81            [12] 1818 	mov	a,sp
      000379 24 AF            [12] 1819 	add	a,#0xaf
      00037B F9               [12] 1820 	mov	r1,a
      00037C E6               [12] 1821 	mov	a,@r0
      00037D F7               [12] 1822 	mov	@r1,a
      00037E D0 01            [24] 1823 	pop	ar1
      000380 E5 81            [12] 1824 	mov	a,sp
      000382 24 E3            [12] 1825 	add	a,#0xe3
      000384 F8               [12] 1826 	mov	r0,a
      000385 C0 00            [24] 1827 	push	ar0
      000387 E5 81            [12] 1828 	mov	a,sp
      000389 24 B0            [12] 1829 	add	a,#0xb0
      00038B F8               [12] 1830 	mov	r0,a
      00038C A6 07            [24] 1831 	mov	@r0,ar7
      00038E D0 00            [24] 1832 	pop	ar0
      000390 C0 01            [24] 1833 	push	ar1
      000392 E5 81            [12] 1834 	mov	a,sp
      000394 24 B1            [12] 1835 	add	a,#0xb1
      000396 F9               [12] 1836 	mov	r1,a
      000397 74 04            [12] 1837 	mov	a,#0x04
      000399 28               [12] 1838 	add	a,r0
      00039A F7               [12] 1839 	mov	@r1,a
      00039B E5 81            [12] 1840 	mov	a,sp
      00039D 24 B2            [12] 1841 	add	a,#0xb2
      00039F F9               [12] 1842 	mov	r1,a
      0003A0 74 08            [12] 1843 	mov	a,#0x08
      0003A2 28               [12] 1844 	add	a,r0
      0003A3 F7               [12] 1845 	mov	@r1,a
      0003A4 D0 01            [24] 1846 	pop	ar1
      0003A6 C0 00            [24] 1847 	push	ar0
      0003A8 E5 81            [12] 1848 	mov	a,sp
      0003AA 24 9F            [12] 1849 	add	a,#0x9f
      0003AC F8               [12] 1850 	mov	r0,a
      0003AD C0 01            [24] 1851 	push	ar1
      0003AF E5 81            [12] 1852 	mov	a,sp
      0003B1 24 B2            [12] 1853 	add	a,#0xb2
      0003B3 F9               [12] 1854 	mov	r1,a
      0003B4 E6               [12] 1855 	mov	a,@r0
      0003B5 F7               [12] 1856 	mov	@r1,a
      0003B6 08               [12] 1857 	inc	r0
      0003B7 09               [12] 1858 	inc	r1
      0003B8 E6               [12] 1859 	mov	a,@r0
      0003B9 F7               [12] 1860 	mov	@r1,a
      0003BA D0 01            [24] 1861 	pop	ar1
      0003BC D0 00            [24] 1862 	pop	ar0
      0003BE C0 01            [24] 1863 	push	ar1
      0003C0 E5 81            [12] 1864 	mov	a,sp
      0003C2 24 B5            [12] 1865 	add	a,#0xb5
      0003C4 F9               [12] 1866 	mov	r1,a
      0003C5 A7 00            [24] 1867 	mov	@r1,ar0
      0003C7 D0 01            [24] 1868 	pop	ar1
      0003C9 C0 00            [24] 1869 	push	ar0
      0003CB E5 81            [12] 1870 	mov	a,sp
      0003CD 24 A3            [12] 1871 	add	a,#0xa3
      0003CF F8               [12] 1872 	mov	r0,a
      0003D0 C0 01            [24] 1873 	push	ar1
      0003D2 E5 81            [12] 1874 	mov	a,sp
      0003D4 24 A0            [12] 1875 	add	a,#0xa0
      0003D6 F9               [12] 1876 	mov	r1,a
      0003D7 E7               [12] 1877 	mov	a,@r1
      0003D8 26               [12] 1878 	add	a,@r0
      0003D9 C0 E0            [24] 1879 	push	acc
      0003DB 09               [12] 1880 	inc	r1
      0003DC E7               [12] 1881 	mov	a,@r1
      0003DD 08               [12] 1882 	inc	r0
      0003DE 36               [12] 1883 	addc	a,@r0
      0003DF C0 E0            [24] 1884 	push	acc
      0003E1 E5 81            [12] 1885 	mov	a,sp
      0003E3 24 B4            [12] 1886 	add	a,#0xb4
      0003E5 F8               [12] 1887 	mov	r0,a
      0003E6 D0 E0            [24] 1888 	pop	acc
      0003E8 F6               [12] 1889 	mov	@r0,a
      0003E9 18               [12] 1890 	dec	r0
      0003EA D0 E0            [24] 1891 	pop	acc
      0003EC F6               [12] 1892 	mov	@r0,a
      0003ED D0 01            [24] 1893 	pop	ar1
      0003EF D0 00            [24] 1894 	pop	ar0
                                   1895 ;	../../../core/loader/elfloader.c:288: return ELFLOADER_OK;
                                   1896 ;	../../../core/loader/elfloader.c:233: for(a = section; a < section + size; a += rel_size) {
      0003F1                       1897 00147$:
      0003F1 C0 00            [24] 1898 	push	ar0
      0003F3 E5 81            [12] 1899 	mov	a,sp
      0003F5 24 DD            [12] 1900 	add	a,#0xdd
      0003F7 F8               [12] 1901 	mov	r0,a
      0003F8 C0 01            [24] 1902 	push	ar1
      0003FA E5 81            [12] 1903 	mov	a,sp
      0003FC 24 B5            [12] 1904 	add	a,#0xb5
      0003FE F9               [12] 1905 	mov	r1,a
      0003FF C3               [12] 1906 	clr	c
      000400 E6               [12] 1907 	mov	a,@r0
      000401 97               [12] 1908 	subb	a,@r1
      000402 08               [12] 1909 	inc	r0
      000403 E6               [12] 1910 	mov	a,@r0
      000404 09               [12] 1911 	inc	r1
      000405 97               [12] 1912 	subb	a,@r1
      000406 D0 01            [24] 1913 	pop	ar1
      000408 D0 00            [24] 1914 	pop	ar0
      00040A 40 03            [24] 1915 	jc	00227$
      00040C 02r09r7A         [24] 1916 	ljmp	00145$
      00040F                       1917 00227$:
                                   1918 ;	../../../core/loader/elfloader.c:234: seek_read(fd, a, (char *)&rela, rel_size);
      00040F C0 01            [24] 1919 	push	ar1
      000411 88 03            [24] 1920 	mov	ar3,r0
      000413 8B 02            [24] 1921 	mov	ar2,r3
      000415 7B 00            [12] 1922 	mov	r3,#0x00
      000417 7F 40            [12] 1923 	mov	r7,#0x40
      000419 C0 01            [24] 1924 	push	ar1
      00041B C0 00            [24] 1925 	push	ar0
      00041D 85 00 F0         [24] 1926 	mov	b,ar0
      000420 E5 81            [12] 1927 	mov	a,sp
      000422 24 FC            [12] 1928 	add	a,#0xfc
      000424 F8               [12] 1929 	mov	r0,a
      000425 E6               [12] 1930 	mov	a,@r0
      000426 C0 E0            [24] 1931 	push	acc
      000428 08               [12] 1932 	inc	r0
      000429 E6               [12] 1933 	mov	a,@r0
      00042A C0 E0            [24] 1934 	push	acc
      00042C A8 F0            [24] 1935 	mov	r0,b
      00042E C0 02            [24] 1936 	push	ar2
      000430 C0 03            [24] 1937 	push	ar3
      000432 C0 07            [24] 1938 	push	ar7
      000434 85 00 F0         [24] 1939 	mov	b,ar0
      000437 E5 81            [12] 1940 	mov	a,sp
      000439 24 D6            [12] 1941 	add	a,#0xd6
      00043B F8               [12] 1942 	mov	r0,a
      00043C E6               [12] 1943 	mov	a,@r0
      00043D C0 E0            [24] 1944 	push	acc
      00043F 08               [12] 1945 	inc	r0
      000440 E6               [12] 1946 	mov	a,@r0
      000441 C0 E0            [24] 1947 	push	acc
      000443 A8 F0            [24] 1948 	mov	r0,b
      000445 C0 00            [24] 1949 	push	ar0
      000447 E5 81            [12] 1950 	mov	a,sp
      000449 24 9E            [12] 1951 	add	a,#0x9e
      00044B F8               [12] 1952 	mov	r0,a
      00044C 86 82            [24] 1953 	mov	dpl,@r0
      00044E 08               [12] 1954 	inc	r0
      00044F 86 83            [24] 1955 	mov	dph,@r0
      000451 D0 00            [24] 1956 	pop	ar0
      000453 78r00            [12] 1957 	mov	r0,#_seek_read
      000455 79s00            [12] 1958 	mov	r1,#(_seek_read >> 8)
      000457 7As00            [12] 1959 	mov	r2,#(_seek_read >> 16)
      000459 12r00r00         [24] 1960 	lcall	__sdcc_banked_call
      00045C E5 81            [12] 1961 	mov	a,sp
      00045E 24 F9            [12] 1962 	add	a,#0xf9
      000460 F5 81            [12] 1963 	mov	sp,a
      000462 D0 00            [24] 1964 	pop	ar0
      000464 D0 01            [24] 1965 	pop	ar1
                                   1966 ;	../../../core/loader/elfloader.c:237: (char *)&s, sizeof(s));
      000466 C0 00            [24] 1967 	push	ar0
      000468 E5 81            [12] 1968 	mov	a,sp
      00046A 24 AF            [12] 1969 	add	a,#0xaf
      00046C F8               [12] 1970 	mov	r0,a
      00046D 86 07            [24] 1971 	mov	ar7,@r0
      00046F E5 81            [12] 1972 	mov	a,sp
      000471 24 B8            [12] 1973 	add	a,#0xb8
      000473 F8               [12] 1974 	mov	r0,a
      000474 A6 07            [24] 1975 	mov	@r0,ar7
      000476 08               [12] 1976 	inc	r0
      000477 76 00            [12] 1977 	mov	@r0,#0x00
      000479 08               [12] 1978 	inc	r0
      00047A 76 40            [12] 1979 	mov	@r0,#0x40
                                   1980 ;	../../../core/loader/elfloader.c:236: symtab + sizeof(struct elf32_sym) * ELF32_R_SYM(rela.r_info),
      00047C E5 81            [12] 1981 	mov	a,sp
      00047E 24 B0            [12] 1982 	add	a,#0xb0
      000480 F8               [12] 1983 	mov	r0,a
      000481 86 00            [24] 1984 	mov	ar0,@r0
      000483 86 02            [24] 1985 	mov	ar2,@r0
      000485 08               [12] 1986 	inc	r0
      000486 86 04            [24] 1987 	mov	ar4,@r0
      000488 08               [12] 1988 	inc	r0
      000489 86 06            [24] 1989 	mov	ar6,@r0
      00048B 08               [12] 1990 	inc	r0
      00048C 86 07            [24] 1991 	mov	ar7,@r0
      00048E 18               [12] 1992 	dec	r0
      00048F 18               [12] 1993 	dec	r0
      000490 18               [12] 1994 	dec	r0
      000491 8C 02            [24] 1995 	mov	ar2,r4
      000493 8E 04            [24] 1996 	mov	ar4,r6
      000495 EC               [12] 1997 	mov	a,r4
      000496 C4               [12] 1998 	swap	a
      000497 54 F0            [12] 1999 	anl	a,#0xf0
      000499 CA               [12] 2000 	xch	a,r2
      00049A C4               [12] 2001 	swap	a
      00049B CA               [12] 2002 	xch	a,r2
      00049C 6A               [12] 2003 	xrl	a,r2
      00049D CA               [12] 2004 	xch	a,r2
      00049E 54 F0            [12] 2005 	anl	a,#0xf0
      0004A0 CA               [12] 2006 	xch	a,r2
      0004A1 6A               [12] 2007 	xrl	a,r2
      0004A2 FC               [12] 2008 	mov	r4,a
      0004A3 E5 81            [12] 2009 	mov	a,sp
      0004A5 24 95            [12] 2010 	add	a,#0x95
      0004A7 F8               [12] 2011 	mov	r0,a
      0004A8 EA               [12] 2012 	mov	a,r2
      0004A9 26               [12] 2013 	add	a,@r0
      0004AA FA               [12] 2014 	mov	r2,a
      0004AB EC               [12] 2015 	mov	a,r4
      0004AC 08               [12] 2016 	inc	r0
      0004AD 36               [12] 2017 	addc	a,@r0
      0004AE FC               [12] 2018 	mov	r4,a
      0004AF D0 00            [24] 2019 	pop	ar0
                                   2020 ;	../../../core/loader/elfloader.c:235: seek_read(fd,
      0004B1 C0 01            [24] 2021 	push	ar1
      0004B3 C0 00            [24] 2022 	push	ar0
      0004B5 74 10            [12] 2023 	mov	a,#0x10
      0004B7 C0 E0            [24] 2024 	push	acc
      0004B9 E4               [12] 2025 	clr	a
      0004BA C0 E0            [24] 2026 	push	acc
      0004BC 85 00 F0         [24] 2027 	mov	b,ar0
      0004BF E5 81            [12] 2028 	mov	a,sp
      0004C1 24 B5            [12] 2029 	add	a,#0xb5
      0004C3 F8               [12] 2030 	mov	r0,a
      0004C4 E6               [12] 2031 	mov	a,@r0
      0004C5 C0 E0            [24] 2032 	push	acc
      0004C7 08               [12] 2033 	inc	r0
      0004C8 E6               [12] 2034 	mov	a,@r0
      0004C9 C0 E0            [24] 2035 	push	acc
      0004CB 08               [12] 2036 	inc	r0
      0004CC E6               [12] 2037 	mov	a,@r0
      0004CD C0 E0            [24] 2038 	push	acc
      0004CF A8 F0            [24] 2039 	mov	r0,b
      0004D1 C0 02            [24] 2040 	push	ar2
      0004D3 C0 04            [24] 2041 	push	ar4
      0004D5 C0 00            [24] 2042 	push	ar0
      0004D7 E5 81            [12] 2043 	mov	a,sp
      0004D9 24 9E            [12] 2044 	add	a,#0x9e
      0004DB F8               [12] 2045 	mov	r0,a
      0004DC 86 82            [24] 2046 	mov	dpl,@r0
      0004DE 08               [12] 2047 	inc	r0
      0004DF 86 83            [24] 2048 	mov	dph,@r0
      0004E1 D0 00            [24] 2049 	pop	ar0
      0004E3 78r00            [12] 2050 	mov	r0,#_seek_read
      0004E5 79s00            [12] 2051 	mov	r1,#(_seek_read >> 8)
      0004E7 7As00            [12] 2052 	mov	r2,#(_seek_read >> 16)
      0004E9 12r00r00         [24] 2053 	lcall	__sdcc_banked_call
      0004EC E5 81            [12] 2054 	mov	a,sp
      0004EE 24 F9            [12] 2055 	add	a,#0xf9
      0004F0 F5 81            [12] 2056 	mov	sp,a
      0004F2 D0 00            [24] 2057 	pop	ar0
      0004F4 D0 01            [24] 2058 	pop	ar1
                                   2059 ;	../../../core/loader/elfloader.c:238: if(s.st_name != 0) {
      0004F6 C0 00            [24] 2060 	push	ar0
      0004F8 E5 81            [12] 2061 	mov	a,sp
      0004FA 24 AD            [12] 2062 	add	a,#0xad
      0004FC F8               [12] 2063 	mov	r0,a
      0004FD 86 00            [24] 2064 	mov	ar0,@r0
      0004FF 86 03            [24] 2065 	mov	ar3,@r0
      000501 08               [12] 2066 	inc	r0
      000502 86 04            [24] 2067 	mov	ar4,@r0
      000504 08               [12] 2068 	inc	r0
      000505 86 06            [24] 2069 	mov	ar6,@r0
      000507 08               [12] 2070 	inc	r0
      000508 86 07            [24] 2071 	mov	ar7,@r0
      00050A 18               [12] 2072 	dec	r0
      00050B 18               [12] 2073 	dec	r0
      00050C 18               [12] 2074 	dec	r0
      00050D D0 00            [24] 2075 	pop	ar0
      00050F D0 01            [24] 2076 	pop	ar1
      000511 EB               [12] 2077 	mov	a,r3
      000512 4C               [12] 2078 	orl	a,r4
      000513 4E               [12] 2079 	orl	a,r6
      000514 4F               [12] 2080 	orl	a,r7
      000515 70 03            [24] 2081 	jnz	00228$
      000517 02r07r89         [24] 2082 	ljmp	00141$
      00051A                       2083 00228$:
                                   2084 ;	../../../core/loader/elfloader.c:239: seek_read(fd, strtab + s.st_name, name, sizeof(name));
      00051A C0 00            [24] 2085 	push	ar0
      00051C E5 81            [12] 2086 	mov	a,sp
      00051E 24 B8            [12] 2087 	add	a,#0xb8
      000520 F8               [12] 2088 	mov	r0,a
      000521 86 04            [24] 2089 	mov	ar4,@r0
      000523 7E 00            [12] 2090 	mov	r6,#0x00
      000525 7F 40            [12] 2091 	mov	r7,#0x40
      000527 87 02            [24] 2092 	mov	ar2,@r1
      000529 09               [12] 2093 	inc	r1
      00052A 87 03            [24] 2094 	mov	ar3,@r1
      00052C 19               [12] 2095 	dec	r1
      00052D E5 81            [12] 2096 	mov	a,sp
      00052F 24 AA            [12] 2097 	add	a,#0xaa
      000531 F8               [12] 2098 	mov	r0,a
      000532 EA               [12] 2099 	mov	a,r2
      000533 26               [12] 2100 	add	a,@r0
      000534 FA               [12] 2101 	mov	r2,a
      000535 EB               [12] 2102 	mov	a,r3
      000536 08               [12] 2103 	inc	r0
      000537 36               [12] 2104 	addc	a,@r0
      000538 FB               [12] 2105 	mov	r3,a
      000539 D0 00            [24] 2106 	pop	ar0
      00053B C0 01            [24] 2107 	push	ar1
      00053D C0 00            [24] 2108 	push	ar0
      00053F 74 1E            [12] 2109 	mov	a,#0x1e
      000541 C0 E0            [24] 2110 	push	acc
      000543 E4               [12] 2111 	clr	a
      000544 C0 E0            [24] 2112 	push	acc
      000546 C0 04            [24] 2113 	push	ar4
      000548 C0 06            [24] 2114 	push	ar6
      00054A C0 07            [24] 2115 	push	ar7
      00054C C0 02            [24] 2116 	push	ar2
      00054E C0 03            [24] 2117 	push	ar3
      000550 C0 00            [24] 2118 	push	ar0
      000552 E5 81            [12] 2119 	mov	a,sp
      000554 24 9F            [12] 2120 	add	a,#0x9f
      000556 F8               [12] 2121 	mov	r0,a
      000557 86 82            [24] 2122 	mov	dpl,@r0
      000559 08               [12] 2123 	inc	r0
      00055A 86 83            [24] 2124 	mov	dph,@r0
      00055C D0 00            [24] 2125 	pop	ar0
      00055E 78r00            [12] 2126 	mov	r0,#_seek_read
      000560 79s00            [12] 2127 	mov	r1,#(_seek_read >> 8)
      000562 7As00            [12] 2128 	mov	r2,#(_seek_read >> 16)
      000564 12r00r00         [24] 2129 	lcall	__sdcc_banked_call
      000567 E5 81            [12] 2130 	mov	a,sp
      000569 24 F9            [12] 2131 	add	a,#0xf9
      00056B F5 81            [12] 2132 	mov	sp,a
      00056D D0 00            [24] 2133 	pop	ar0
      00056F D0 01            [24] 2134 	pop	ar1
                                   2135 ;	../../../core/loader/elfloader.c:241: addr = (char *)symtab_lookup(name);
      000571 C0 00            [24] 2136 	push	ar0
      000573 E5 81            [12] 2137 	mov	a,sp
      000575 24 AC            [12] 2138 	add	a,#0xac
      000577 F8               [12] 2139 	mov	r0,a
      000578 86 04            [24] 2140 	mov	ar4,@r0
      00057A 7E 00            [12] 2141 	mov	r6,#0x00
      00057C 7F 40            [12] 2142 	mov	r7,#0x40
      00057E D0 00            [24] 2143 	pop	ar0
      000580 8C 82            [24] 2144 	mov	dpl,r4
      000582 8E 83            [24] 2145 	mov	dph,r6
      000584 8F F0            [24] 2146 	mov	b,r7
      000586 C0 01            [24] 2147 	push	ar1
      000588 C0 00            [24] 2148 	push	ar0
      00058A 78r00            [12] 2149 	mov	r0,#_symtab_lookup
      00058C 79s00            [12] 2150 	mov	r1,#(_symtab_lookup >> 8)
      00058E 7As00            [12] 2151 	mov	r2,#(_symtab_lookup >> 16)
      000590 12r00r00         [24] 2152 	lcall	__sdcc_banked_call
      000593 AC 82            [24] 2153 	mov	r4,dpl
      000595 AE 83            [24] 2154 	mov	r6,dph
      000597 AF F0            [24] 2155 	mov	r7,b
      000599 D0 00            [24] 2156 	pop	ar0
      00059B D0 01            [24] 2157 	pop	ar1
      00059D C0 00            [24] 2158 	push	ar0
      00059F E5 81            [12] 2159 	mov	a,sp
      0005A1 24 DF            [12] 2160 	add	a,#0xdf
      0005A3 F8               [12] 2161 	mov	r0,a
      0005A4 A6 04            [24] 2162 	mov	@r0,ar4
      0005A6 08               [12] 2163 	inc	r0
      0005A7 A6 06            [24] 2164 	mov	@r0,ar6
      0005A9 08               [12] 2165 	inc	r0
      0005AA A6 07            [24] 2166 	mov	@r0,ar7
                                   2167 ;	../../../core/loader/elfloader.c:243: if(addr == NULL) {
      0005AC E5 81            [12] 2168 	mov	a,sp
      0005AE 24 DF            [12] 2169 	add	a,#0xdf
      0005B0 F8               [12] 2170 	mov	r0,a
      0005B1 E6               [12] 2171 	mov	a,@r0
      0005B2 08               [12] 2172 	inc	r0
      0005B3 46               [12] 2173 	orl	a,@r0
      0005B4 D0 00            [24] 2174 	pop	ar0
      0005B6 60 03            [24] 2175 	jz	00229$
      0005B8 02r06r43         [24] 2176 	ljmp	00111$
      0005BB                       2177 00229$:
                                   2178 ;	../../../core/loader/elfloader.c:245: addr = find_local_symbol(fd, name, symtab, symtabsize, strtab);
      0005BB C0 01            [24] 2179 	push	ar1
      0005BD C0 00            [24] 2180 	push	ar0
      0005BF E5 81            [12] 2181 	mov	a,sp
      0005C1 24 BB            [12] 2182 	add	a,#0xbb
      0005C3 F8               [12] 2183 	mov	r0,a
      0005C4 86 02            [24] 2184 	mov	ar2,@r0
      0005C6 7B 00            [12] 2185 	mov	r3,#0x00
      0005C8 7D 40            [12] 2186 	mov	r5,#0x40
      0005CA D0 00            [24] 2187 	pop	ar0
      0005CC C0 01            [24] 2188 	push	ar1
      0005CE C0 00            [24] 2189 	push	ar0
      0005D0 85 00 F0         [24] 2190 	mov	b,ar0
      0005D3 E5 81            [12] 2191 	mov	a,sp
      0005D5 24 A8            [12] 2192 	add	a,#0xa8
      0005D7 F8               [12] 2193 	mov	r0,a
      0005D8 E6               [12] 2194 	mov	a,@r0
      0005D9 C0 E0            [24] 2195 	push	acc
      0005DB 08               [12] 2196 	inc	r0
      0005DC E6               [12] 2197 	mov	a,@r0
      0005DD C0 E0            [24] 2198 	push	acc
      0005DF A8 F0            [24] 2199 	mov	r0,b
      0005E1 85 00 F0         [24] 2200 	mov	b,ar0
      0005E4 E5 81            [12] 2201 	mov	a,sp
      0005E6 24 90            [12] 2202 	add	a,#0x90
      0005E8 F8               [12] 2203 	mov	r0,a
      0005E9 E6               [12] 2204 	mov	a,@r0
      0005EA C0 E0            [24] 2205 	push	acc
      0005EC 08               [12] 2206 	inc	r0
      0005ED E6               [12] 2207 	mov	a,@r0
      0005EE C0 E0            [24] 2208 	push	acc
      0005F0 A8 F0            [24] 2209 	mov	r0,b
      0005F2 85 00 F0         [24] 2210 	mov	b,ar0
      0005F5 E5 81            [12] 2211 	mov	a,sp
      0005F7 24 90            [12] 2212 	add	a,#0x90
      0005F9 F8               [12] 2213 	mov	r0,a
      0005FA E6               [12] 2214 	mov	a,@r0
      0005FB C0 E0            [24] 2215 	push	acc
      0005FD 08               [12] 2216 	inc	r0
      0005FE E6               [12] 2217 	mov	a,@r0
      0005FF C0 E0            [24] 2218 	push	acc
      000601 A8 F0            [24] 2219 	mov	r0,b
      000603 C0 02            [24] 2220 	push	ar2
      000605 C0 03            [24] 2221 	push	ar3
      000607 C0 05            [24] 2222 	push	ar5
      000609 C0 00            [24] 2223 	push	ar0
      00060B E5 81            [12] 2224 	mov	a,sp
      00060D 24 9C            [12] 2225 	add	a,#0x9c
      00060F F8               [12] 2226 	mov	r0,a
      000610 86 82            [24] 2227 	mov	dpl,@r0
      000612 08               [12] 2228 	inc	r0
      000613 86 83            [24] 2229 	mov	dph,@r0
      000615 D0 00            [24] 2230 	pop	ar0
      000617 78r65            [12] 2231 	mov	r0,#_find_local_symbol
      000619 79s00            [12] 2232 	mov	r1,#(_find_local_symbol >> 8)
      00061B 7As00            [12] 2233 	mov	r2,#(_find_local_symbol >> 16)
      00061D 12r00r00         [24] 2234 	lcall	__sdcc_banked_call
      000620 AA 82            [24] 2235 	mov	r2,dpl
      000622 AB 83            [24] 2236 	mov	r3,dph
      000624 AD F0            [24] 2237 	mov	r5,b
      000626 E5 81            [12] 2238 	mov	a,sp
      000628 24 F7            [12] 2239 	add	a,#0xf7
      00062A F5 81            [12] 2240 	mov	sp,a
      00062C D0 00            [24] 2241 	pop	ar0
      00062E D0 01            [24] 2242 	pop	ar1
      000630 C0 00            [24] 2243 	push	ar0
      000632 E5 81            [12] 2244 	mov	a,sp
      000634 24 DE            [12] 2245 	add	a,#0xde
      000636 F8               [12] 2246 	mov	r0,a
      000637 A6 02            [24] 2247 	mov	@r0,ar2
      000639 08               [12] 2248 	inc	r0
      00063A A6 03            [24] 2249 	mov	@r0,ar3
      00063C 08               [12] 2250 	inc	r0
      00063D A6 05            [24] 2251 	mov	@r0,ar5
      00063F D0 00            [24] 2252 	pop	ar0
                                   2253 ;	../../../core/loader/elfloader.c:288: return ELFLOADER_OK;
      000641 D0 01            [24] 2254 	pop	ar1
                                   2255 ;	../../../core/loader/elfloader.c:246: PRINTF("found address %p\n", addr);
      000643                       2256 00111$:
                                   2257 ;	../../../core/loader/elfloader.c:248: if(addr == NULL) {
      000643 C0 00            [24] 2258 	push	ar0
      000645 E5 81            [12] 2259 	mov	a,sp
      000647 24 DF            [12] 2260 	add	a,#0xdf
      000649 F8               [12] 2261 	mov	r0,a
      00064A E6               [12] 2262 	mov	a,@r0
      00064B 08               [12] 2263 	inc	r0
      00064C 46               [12] 2264 	orl	a,@r0
      00064D D0 00            [24] 2265 	pop	ar0
      00064F 60 03            [24] 2266 	jz	00230$
      000651 02r08r7E         [24] 2267 	ljmp	00142$
      000654                       2268 00230$:
                                   2269 ;	../../../core/loader/elfloader.c:249: if(s.st_shndx == bss.number) {
      000654 C0 01            [24] 2270 	push	ar1
      000656 C0 00            [24] 2271 	push	ar0
      000658 E5 81            [12] 2272 	mov	a,sp
      00065A 24 AC            [12] 2273 	add	a,#0xac
      00065C F8               [12] 2274 	mov	r0,a
      00065D 86 00            [24] 2275 	mov	ar0,@r0
      00065F 86 07            [24] 2276 	mov	ar7,@r0
      000661 08               [12] 2277 	inc	r0
      000662 86 06            [24] 2278 	mov	ar6,@r0
      000664 18               [12] 2279 	dec	r0
      000665 D0 00            [24] 2280 	pop	ar0
      000667 90r00r21         [24] 2281 	mov	dptr,#_bss
      00066A E0               [24] 2282 	movx	a,@dptr
      00066B FA               [12] 2283 	mov	r2,a
      00066C 7D 00            [12] 2284 	mov	r5,#0x00
      00066E EF               [12] 2285 	mov	a,r7
      00066F B5 02 06         [24] 2286 	cjne	a,ar2,00231$
      000672 EE               [12] 2287 	mov	a,r6
      000673 B5 05 02         [24] 2288 	cjne	a,ar5,00231$
      000676 80 04            [24] 2289 	sjmp	00232$
      000678                       2290 00231$:
      000678 D0 01            [24] 2291 	pop	ar1
      00067A 80 0B            [24] 2292 	sjmp	00124$
      00067C                       2293 00232$:
      00067C D0 01            [24] 2294 	pop	ar1
                                   2295 ;	../../../core/loader/elfloader.c:250: sect = &bss;
      00067E 7Ar21            [12] 2296 	mov	r2,#_bss
      000680 7Bs00            [12] 2297 	mov	r3,#(_bss >> 8)
      000682 7D 00            [12] 2298 	mov	r5,#0x00
      000684 02r07r60         [24] 2299 	ljmp	00125$
      000687                       2300 00124$:
                                   2301 ;	../../../core/loader/elfloader.c:251: } else if(s.st_shndx == data.number) {
      000687 C0 01            [24] 2302 	push	ar1
      000689 C0 00            [24] 2303 	push	ar0
      00068B E5 81            [12] 2304 	mov	a,sp
      00068D 24 AE            [12] 2305 	add	a,#0xae
      00068F F8               [12] 2306 	mov	r0,a
      000690 86 00            [24] 2307 	mov	ar0,@r0
      000692 86 07            [24] 2308 	mov	ar7,@r0
      000694 08               [12] 2309 	inc	r0
      000695 86 06            [24] 2310 	mov	ar6,@r0
      000697 18               [12] 2311 	dec	r0
      000698 D0 00            [24] 2312 	pop	ar0
      00069A 90r00r27         [24] 2313 	mov	dptr,#_data
      00069D E0               [24] 2314 	movx	a,@dptr
      00069E FD               [12] 2315 	mov	r5,a
      00069F 7C 00            [12] 2316 	mov	r4,#0x00
      0006A1 EF               [12] 2317 	mov	a,r7
      0006A2 B5 05 06         [24] 2318 	cjne	a,ar5,00233$
      0006A5 EE               [12] 2319 	mov	a,r6
      0006A6 B5 04 02         [24] 2320 	cjne	a,ar4,00233$
      0006A9 80 04            [24] 2321 	sjmp	00234$
      0006AB                       2322 00233$:
      0006AB D0 01            [24] 2323 	pop	ar1
      0006AD 80 0B            [24] 2324 	sjmp	00121$
      0006AF                       2325 00234$:
      0006AF D0 01            [24] 2326 	pop	ar1
                                   2327 ;	../../../core/loader/elfloader.c:252: sect = &data;
      0006B1 7Ar27            [12] 2328 	mov	r2,#_data
      0006B3 7Bs00            [12] 2329 	mov	r3,#(_data >> 8)
      0006B5 7D 00            [12] 2330 	mov	r5,#0x00
      0006B7 02r07r60         [24] 2331 	ljmp	00125$
      0006BA                       2332 00121$:
                                   2333 ;	../../../core/loader/elfloader.c:253: } else if(s.st_shndx == rodata.number) {
      0006BA C0 01            [24] 2334 	push	ar1
      0006BC C0 00            [24] 2335 	push	ar0
      0006BE E5 81            [12] 2336 	mov	a,sp
      0006C0 24 AE            [12] 2337 	add	a,#0xae
      0006C2 F8               [12] 2338 	mov	r0,a
      0006C3 86 00            [24] 2339 	mov	ar0,@r0
      0006C5 86 07            [24] 2340 	mov	ar7,@r0
      0006C7 08               [12] 2341 	inc	r0
      0006C8 86 06            [24] 2342 	mov	ar6,@r0
      0006CA 18               [12] 2343 	dec	r0
      0006CB D0 00            [24] 2344 	pop	ar0
      0006CD 90r00r2D         [24] 2345 	mov	dptr,#_rodata
      0006D0 E0               [24] 2346 	movx	a,@dptr
      0006D1 FD               [12] 2347 	mov	r5,a
      0006D2 7C 00            [12] 2348 	mov	r4,#0x00
      0006D4 EF               [12] 2349 	mov	a,r7
      0006D5 B5 05 06         [24] 2350 	cjne	a,ar5,00235$
      0006D8 EE               [12] 2351 	mov	a,r6
      0006D9 B5 04 02         [24] 2352 	cjne	a,ar4,00235$
      0006DC 80 04            [24] 2353 	sjmp	00236$
      0006DE                       2354 00235$:
      0006DE D0 01            [24] 2355 	pop	ar1
      0006E0 80 0A            [24] 2356 	sjmp	00118$
      0006E2                       2357 00236$:
      0006E2 D0 01            [24] 2358 	pop	ar1
                                   2359 ;	../../../core/loader/elfloader.c:254: sect = &rodata;
      0006E4 7Ar2D            [12] 2360 	mov	r2,#_rodata
      0006E6 7Bs00            [12] 2361 	mov	r3,#(_rodata >> 8)
      0006E8 7D 00            [12] 2362 	mov	r5,#0x00
      0006EA 80 74            [24] 2363 	sjmp	00125$
      0006EC                       2364 00118$:
                                   2365 ;	../../../core/loader/elfloader.c:255: } else if(s.st_shndx == text.number) {
      0006EC C0 01            [24] 2366 	push	ar1
      0006EE C0 00            [24] 2367 	push	ar0
      0006F0 E5 81            [12] 2368 	mov	a,sp
      0006F2 24 AE            [12] 2369 	add	a,#0xae
      0006F4 F8               [12] 2370 	mov	r0,a
      0006F5 86 00            [24] 2371 	mov	ar0,@r0
      0006F7 86 07            [24] 2372 	mov	ar7,@r0
      0006F9 08               [12] 2373 	inc	r0
      0006FA 86 06            [24] 2374 	mov	ar6,@r0
      0006FC 18               [12] 2375 	dec	r0
      0006FD D0 00            [24] 2376 	pop	ar0
      0006FF 90r00r33         [24] 2377 	mov	dptr,#_text
      000702 E0               [24] 2378 	movx	a,@dptr
      000703 FD               [12] 2379 	mov	r5,a
      000704 7C 00            [12] 2380 	mov	r4,#0x00
      000706 EF               [12] 2381 	mov	a,r7
      000707 B5 05 06         [24] 2382 	cjne	a,ar5,00237$
      00070A EE               [12] 2383 	mov	a,r6
      00070B B5 04 02         [24] 2384 	cjne	a,ar4,00237$
      00070E 80 04            [24] 2385 	sjmp	00238$
      000710                       2386 00237$:
      000710 D0 01            [24] 2387 	pop	ar1
      000712 80 0A            [24] 2388 	sjmp	00112$
      000714                       2389 00238$:
      000714 D0 01            [24] 2390 	pop	ar1
                                   2391 ;	../../../core/loader/elfloader.c:256: sect = &text;
      000716 7Ar33            [12] 2392 	mov	r2,#_text
      000718 7Bs00            [12] 2393 	mov	r3,#(_text >> 8)
      00071A 7D 00            [12] 2394 	mov	r5,#0x00
                                   2395 ;	../../../core/loader/elfloader.c:258: PRINTF("elfloader unknown name: '%30s'\n", name);
      00071C 80 42            [24] 2396 	sjmp	00125$
      00071E                       2397 00112$:
                                   2398 ;	../../../core/loader/elfloader.c:259: memcpy(elfloader_unknown, name, sizeof(elfloader_unknown));
      00071E E5 81            [12] 2399 	mov	a,sp
      000720 24 BE            [12] 2400 	add	a,#0xbe
      000722 F8               [12] 2401 	mov	r0,a
      000723 E5 81            [12] 2402 	mov	a,sp
      000725 24 C0            [12] 2403 	add	a,#0xc0
      000727 F6               [12] 2404 	mov	@r0,a
      000728 E5 81            [12] 2405 	mov	a,sp
      00072A 24 BE            [12] 2406 	add	a,#0xbe
      00072C F8               [12] 2407 	mov	r0,a
      00072D 86 07            [24] 2408 	mov	ar7,@r0
      00072F 7E 00            [12] 2409 	mov	r6,#0x00
      000731 7D 40            [12] 2410 	mov	r5,#0x40
      000733 74 1E            [12] 2411 	mov	a,#0x1e
      000735 C0 E0            [24] 2412 	push	acc
      000737 E4               [12] 2413 	clr	a
      000738 C0 E0            [24] 2414 	push	acc
      00073A C0 07            [24] 2415 	push	ar7
      00073C C0 06            [24] 2416 	push	ar6
      00073E C0 05            [24] 2417 	push	ar5
      000740 90r00r00         [24] 2418 	mov	dptr,#_elfloader_unknown
      000743 75 F0 00         [24] 2419 	mov	b,#0x00
      000746 78r00            [12] 2420 	mov	r0,#___memcpy
      000748 79s00            [12] 2421 	mov	r1,#(___memcpy >> 8)
      00074A 7As00            [12] 2422 	mov	r2,#(___memcpy >> 16)
      00074C 12r00r00         [24] 2423 	lcall	__sdcc_banked_call
      00074F E5 81            [12] 2424 	mov	a,sp
      000751 24 FB            [12] 2425 	add	a,#0xfb
      000753 F5 81            [12] 2426 	mov	sp,a
                                   2427 ;	../../../core/loader/elfloader.c:260: elfloader_unknown[sizeof(elfloader_unknown) - 1] = 0;
      000755 90r00r1D         [24] 2428 	mov	dptr,#(_elfloader_unknown + 0x001d)
      000758 E4               [12] 2429 	clr	a
      000759 F0               [24] 2430 	movx	@dptr,a
                                   2431 ;	../../../core/loader/elfloader.c:261: return ELFLOADER_SYMBOL_NOT_FOUND;
      00075A 90 00 05         [24] 2432 	mov	dptr,#0x0005
      00075D 02r09r7D         [24] 2433 	ljmp	00149$
      000760                       2434 00125$:
                                   2435 ;	../../../core/loader/elfloader.c:263: addr = sect->address;
      000760 74 03            [12] 2436 	mov	a,#0x03
      000762 2A               [12] 2437 	add	a,r2
      000763 FA               [12] 2438 	mov	r2,a
      000764 E4               [12] 2439 	clr	a
      000765 3B               [12] 2440 	addc	a,r3
      000766 FB               [12] 2441 	mov	r3,a
      000767 8A 82            [24] 2442 	mov	dpl,r2
      000769 8B 83            [24] 2443 	mov	dph,r3
      00076B 8D F0            [24] 2444 	mov	b,r5
      00076D C0 00            [24] 2445 	push	ar0
      00076F E5 81            [12] 2446 	mov	a,sp
      000771 24 DF            [12] 2447 	add	a,#0xdf
      000773 F8               [12] 2448 	mov	r0,a
      000774 12r00r00         [24] 2449 	lcall	__gptrget
      000777 F6               [12] 2450 	mov	@r0,a
      000778 A3               [24] 2451 	inc	dptr
      000779 12r00r00         [24] 2452 	lcall	__gptrget
      00077C 08               [12] 2453 	inc	r0
      00077D F6               [12] 2454 	mov	@r0,a
      00077E A3               [24] 2455 	inc	dptr
      00077F 12r00r00         [24] 2456 	lcall	__gptrget
      000782 08               [12] 2457 	inc	r0
      000783 F6               [12] 2458 	mov	@r0,a
      000784 D0 00            [24] 2459 	pop	ar0
      000786 02r08r7E         [24] 2460 	ljmp	00142$
      000789                       2461 00141$:
                                   2462 ;	../../../core/loader/elfloader.c:266: if(s.st_shndx == bss.number) {
      000789 C0 01            [24] 2463 	push	ar1
      00078B C0 00            [24] 2464 	push	ar0
      00078D E5 81            [12] 2465 	mov	a,sp
      00078F 24 AE            [12] 2466 	add	a,#0xae
      000791 F8               [12] 2467 	mov	r0,a
      000792 86 00            [24] 2468 	mov	ar0,@r0
      000794 86 07            [24] 2469 	mov	ar7,@r0
      000796 08               [12] 2470 	inc	r0
      000797 86 06            [24] 2471 	mov	ar6,@r0
      000799 18               [12] 2472 	dec	r0
      00079A D0 00            [24] 2473 	pop	ar0
      00079C 90r00r21         [24] 2474 	mov	dptr,#_bss
      00079F E0               [24] 2475 	movx	a,@dptr
      0007A0 FA               [12] 2476 	mov	r2,a
      0007A1 7D 00            [12] 2477 	mov	r5,#0x00
      0007A3 EF               [12] 2478 	mov	a,r7
      0007A4 B5 02 06         [24] 2479 	cjne	a,ar2,00239$
      0007A7 EE               [12] 2480 	mov	a,r6
      0007A8 B5 05 02         [24] 2481 	cjne	a,ar5,00239$
      0007AB 80 04            [24] 2482 	sjmp	00240$
      0007AD                       2483 00239$:
      0007AD D0 01            [24] 2484 	pop	ar1
      0007AF 80 0B            [24] 2485 	sjmp	00138$
      0007B1                       2486 00240$:
      0007B1 D0 01            [24] 2487 	pop	ar1
                                   2488 ;	../../../core/loader/elfloader.c:267: sect = &bss;
      0007B3 7Ar21            [12] 2489 	mov	r2,#_bss
      0007B5 7Bs00            [12] 2490 	mov	r3,#(_bss >> 8)
      0007B7 7D 00            [12] 2491 	mov	r5,#0x00
      0007B9 02r08r58         [24] 2492 	ljmp	00139$
      0007BC                       2493 00138$:
                                   2494 ;	../../../core/loader/elfloader.c:268: } else if(s.st_shndx == data.number) {
      0007BC C0 01            [24] 2495 	push	ar1
      0007BE C0 00            [24] 2496 	push	ar0
      0007C0 E5 81            [12] 2497 	mov	a,sp
      0007C2 24 AE            [12] 2498 	add	a,#0xae
      0007C4 F8               [12] 2499 	mov	r0,a
      0007C5 86 00            [24] 2500 	mov	ar0,@r0
      0007C7 86 07            [24] 2501 	mov	ar7,@r0
      0007C9 08               [12] 2502 	inc	r0
      0007CA 86 06            [24] 2503 	mov	ar6,@r0
      0007CC 18               [12] 2504 	dec	r0
      0007CD D0 00            [24] 2505 	pop	ar0
      0007CF 90r00r27         [24] 2506 	mov	dptr,#_data
      0007D2 E0               [24] 2507 	movx	a,@dptr
      0007D3 FD               [12] 2508 	mov	r5,a
      0007D4 7C 00            [12] 2509 	mov	r4,#0x00
      0007D6 EF               [12] 2510 	mov	a,r7
      0007D7 B5 05 06         [24] 2511 	cjne	a,ar5,00241$
      0007DA EE               [12] 2512 	mov	a,r6
      0007DB B5 04 02         [24] 2513 	cjne	a,ar4,00241$
      0007DE 80 04            [24] 2514 	sjmp	00242$
      0007E0                       2515 00241$:
      0007E0 D0 01            [24] 2516 	pop	ar1
      0007E2 80 0A            [24] 2517 	sjmp	00135$
      0007E4                       2518 00242$:
      0007E4 D0 01            [24] 2519 	pop	ar1
                                   2520 ;	../../../core/loader/elfloader.c:269: sect = &data;
      0007E6 7Ar27            [12] 2521 	mov	r2,#_data
      0007E8 7Bs00            [12] 2522 	mov	r3,#(_data >> 8)
      0007EA 7D 00            [12] 2523 	mov	r5,#0x00
      0007EC 80 6A            [24] 2524 	sjmp	00139$
      0007EE                       2525 00135$:
                                   2526 ;	../../../core/loader/elfloader.c:270: } else if(s.st_shndx == rodata.number) {
      0007EE C0 01            [24] 2527 	push	ar1
      0007F0 C0 00            [24] 2528 	push	ar0
      0007F2 E5 81            [12] 2529 	mov	a,sp
      0007F4 24 AE            [12] 2530 	add	a,#0xae
      0007F6 F8               [12] 2531 	mov	r0,a
      0007F7 86 00            [24] 2532 	mov	ar0,@r0
      0007F9 86 07            [24] 2533 	mov	ar7,@r0
      0007FB 08               [12] 2534 	inc	r0
      0007FC 86 06            [24] 2535 	mov	ar6,@r0
      0007FE 18               [12] 2536 	dec	r0
      0007FF D0 00            [24] 2537 	pop	ar0
      000801 90r00r2D         [24] 2538 	mov	dptr,#_rodata
      000804 E0               [24] 2539 	movx	a,@dptr
      000805 FD               [12] 2540 	mov	r5,a
      000806 7C 00            [12] 2541 	mov	r4,#0x00
      000808 EF               [12] 2542 	mov	a,r7
      000809 B5 05 06         [24] 2543 	cjne	a,ar5,00243$
      00080C EE               [12] 2544 	mov	a,r6
      00080D B5 04 02         [24] 2545 	cjne	a,ar4,00243$
      000810 80 04            [24] 2546 	sjmp	00244$
      000812                       2547 00243$:
      000812 D0 01            [24] 2548 	pop	ar1
      000814 80 0A            [24] 2549 	sjmp	00132$
      000816                       2550 00244$:
      000816 D0 01            [24] 2551 	pop	ar1
                                   2552 ;	../../../core/loader/elfloader.c:271: sect = &rodata;
      000818 7Ar2D            [12] 2553 	mov	r2,#_rodata
      00081A 7Bs00            [12] 2554 	mov	r3,#(_rodata >> 8)
      00081C 7D 00            [12] 2555 	mov	r5,#0x00
      00081E 80 38            [24] 2556 	sjmp	00139$
      000820                       2557 00132$:
                                   2558 ;	../../../core/loader/elfloader.c:272: } else if(s.st_shndx == text.number) {
      000820 C0 01            [24] 2559 	push	ar1
      000822 C0 00            [24] 2560 	push	ar0
      000824 E5 81            [12] 2561 	mov	a,sp
      000826 24 AE            [12] 2562 	add	a,#0xae
      000828 F8               [12] 2563 	mov	r0,a
      000829 86 00            [24] 2564 	mov	ar0,@r0
      00082B 86 07            [24] 2565 	mov	ar7,@r0
      00082D 08               [12] 2566 	inc	r0
      00082E 86 06            [24] 2567 	mov	ar6,@r0
      000830 18               [12] 2568 	dec	r0
      000831 D0 00            [24] 2569 	pop	ar0
      000833 90r00r33         [24] 2570 	mov	dptr,#_text
      000836 E0               [24] 2571 	movx	a,@dptr
      000837 FD               [12] 2572 	mov	r5,a
      000838 7C 00            [12] 2573 	mov	r4,#0x00
      00083A EF               [12] 2574 	mov	a,r7
      00083B B5 05 06         [24] 2575 	cjne	a,ar5,00245$
      00083E EE               [12] 2576 	mov	a,r6
      00083F B5 04 02         [24] 2577 	cjne	a,ar4,00245$
      000842 80 04            [24] 2578 	sjmp	00246$
      000844                       2579 00245$:
      000844 D0 01            [24] 2580 	pop	ar1
      000846 80 0A            [24] 2581 	sjmp	00129$
      000848                       2582 00246$:
      000848 D0 01            [24] 2583 	pop	ar1
                                   2584 ;	../../../core/loader/elfloader.c:273: sect = &text;
      00084A 7Ar33            [12] 2585 	mov	r2,#_text
      00084C 7Bs00            [12] 2586 	mov	r3,#(_text >> 8)
      00084E 7D 00            [12] 2587 	mov	r5,#0x00
      000850 80 06            [24] 2588 	sjmp	00139$
      000852                       2589 00129$:
                                   2590 ;	../../../core/loader/elfloader.c:275: return ELFLOADER_SEGMENT_NOT_FOUND;
      000852 90 00 06         [24] 2591 	mov	dptr,#0x0006
      000855 02r09r7D         [24] 2592 	ljmp	00149$
      000858                       2593 00139$:
                                   2594 ;	../../../core/loader/elfloader.c:278: addr = sect->address;
      000858 74 03            [12] 2595 	mov	a,#0x03
      00085A 2A               [12] 2596 	add	a,r2
      00085B FA               [12] 2597 	mov	r2,a
      00085C E4               [12] 2598 	clr	a
      00085D 3B               [12] 2599 	addc	a,r3
      00085E FB               [12] 2600 	mov	r3,a
      00085F 8A 82            [24] 2601 	mov	dpl,r2
      000861 8B 83            [24] 2602 	mov	dph,r3
      000863 8D F0            [24] 2603 	mov	b,r5
      000865 C0 00            [24] 2604 	push	ar0
      000867 E5 81            [12] 2605 	mov	a,sp
      000869 24 DF            [12] 2606 	add	a,#0xdf
      00086B F8               [12] 2607 	mov	r0,a
      00086C 12r00r00         [24] 2608 	lcall	__gptrget
      00086F F6               [12] 2609 	mov	@r0,a
      000870 A3               [24] 2610 	inc	dptr
      000871 12r00r00         [24] 2611 	lcall	__gptrget
      000874 08               [12] 2612 	inc	r0
      000875 F6               [12] 2613 	mov	@r0,a
      000876 A3               [24] 2614 	inc	dptr
      000877 12r00r00         [24] 2615 	lcall	__gptrget
      00087A 08               [12] 2616 	inc	r0
      00087B F6               [12] 2617 	mov	@r0,a
      00087C D0 00            [24] 2618 	pop	ar0
      00087E                       2619 00142$:
                                   2620 ;	../../../core/loader/elfloader.c:281: if(!using_relas) {
      00087E C0 00            [24] 2621 	push	ar0
      000880 E5 81            [12] 2622 	mov	a,sp
      000882 24 93            [12] 2623 	add	a,#0x93
      000884 F8               [12] 2624 	mov	r0,a
      000885 E6               [12] 2625 	mov	a,@r0
      000886 D0 00            [24] 2626 	pop	ar0
      000888 70 5F            [24] 2627 	jnz	00144$
                                   2628 ;	../../../core/loader/elfloader.c:283: seek_read(fd, sectionaddr + rela.r_offset, (char *)&rela.r_addend, 4);
      00088A C0 01            [24] 2629 	push	ar1
      00088C C0 00            [24] 2630 	push	ar0
      00088E E5 81            [12] 2631 	mov	a,sp
      000890 24 B1            [12] 2632 	add	a,#0xb1
      000892 F8               [12] 2633 	mov	r0,a
      000893 86 05            [24] 2634 	mov	ar5,@r0
      000895 D0 00            [24] 2635 	pop	ar0
      000897 7B 00            [12] 2636 	mov	r3,#0x00
      000899 7A 40            [12] 2637 	mov	r2,#0x40
      00089B 86 06            [24] 2638 	mov	ar6,@r0
      00089D 08               [12] 2639 	inc	r0
      00089E 86 07            [24] 2640 	mov	ar7,@r0
      0008A0 18               [12] 2641 	dec	r0
      0008A1 C0 00            [24] 2642 	push	ar0
      0008A3 E5 81            [12] 2643 	mov	a,sp
      0008A5 24 B2            [12] 2644 	add	a,#0xb2
      0008A7 F8               [12] 2645 	mov	r0,a
      0008A8 EE               [12] 2646 	mov	a,r6
      0008A9 26               [12] 2647 	add	a,@r0
      0008AA FE               [12] 2648 	mov	r6,a
      0008AB EF               [12] 2649 	mov	a,r7
      0008AC 08               [12] 2650 	inc	r0
      0008AD 36               [12] 2651 	addc	a,@r0
      0008AE FF               [12] 2652 	mov	r7,a
      0008AF D0 00            [24] 2653 	pop	ar0
      0008B1 C0 01            [24] 2654 	push	ar1
      0008B3 C0 00            [24] 2655 	push	ar0
      0008B5 74 04            [12] 2656 	mov	a,#0x04
      0008B7 C0 E0            [24] 2657 	push	acc
      0008B9 E4               [12] 2658 	clr	a
      0008BA C0 E0            [24] 2659 	push	acc
      0008BC C0 05            [24] 2660 	push	ar5
      0008BE C0 03            [24] 2661 	push	ar3
      0008C0 C0 02            [24] 2662 	push	ar2
      0008C2 C0 06            [24] 2663 	push	ar6
      0008C4 C0 07            [24] 2664 	push	ar7
      0008C6 C0 00            [24] 2665 	push	ar0
      0008C8 E5 81            [12] 2666 	mov	a,sp
      0008CA 24 9E            [12] 2667 	add	a,#0x9e
      0008CC F8               [12] 2668 	mov	r0,a
      0008CD 86 82            [24] 2669 	mov	dpl,@r0
      0008CF 08               [12] 2670 	inc	r0
      0008D0 86 83            [24] 2671 	mov	dph,@r0
      0008D2 D0 00            [24] 2672 	pop	ar0
      0008D4 78r00            [12] 2673 	mov	r0,#_seek_read
      0008D6 79s00            [12] 2674 	mov	r1,#(_seek_read >> 8)
      0008D8 7As00            [12] 2675 	mov	r2,#(_seek_read >> 16)
      0008DA 12r00r00         [24] 2676 	lcall	__sdcc_banked_call
      0008DD E5 81            [12] 2677 	mov	a,sp
      0008DF 24 F9            [12] 2678 	add	a,#0xf9
      0008E1 F5 81            [12] 2679 	mov	sp,a
      0008E3 D0 00            [24] 2680 	pop	ar0
      0008E5 D0 01            [24] 2681 	pop	ar1
                                   2682 ;	../../../core/loader/elfloader.c:288: return ELFLOADER_OK;
      0008E7 D0 01            [24] 2683 	pop	ar1
                                   2684 ;	../../../core/loader/elfloader.c:283: seek_read(fd, sectionaddr + rela.r_offset, (char *)&rela.r_addend, 4);
      0008E9                       2685 00144$:
                                   2686 ;	../../../core/loader/elfloader.c:286: elfloader_arch_relocate(fd, sectionaddr, sectionbase, &rela, addr);
      0008E9 C0 00            [24] 2687 	push	ar0
      0008EB E5 81            [12] 2688 	mov	a,sp
      0008ED 24 B5            [12] 2689 	add	a,#0xb5
      0008EF F8               [12] 2690 	mov	r0,a
      0008F0 86 05            [24] 2691 	mov	ar5,@r0
      0008F2 7E 00            [12] 2692 	mov	r6,#0x00
      0008F4 7F 40            [12] 2693 	mov	r7,#0x40
      0008F6 D0 00            [24] 2694 	pop	ar0
      0008F8 C0 01            [24] 2695 	push	ar1
      0008FA C0 00            [24] 2696 	push	ar0
      0008FC 85 00 F0         [24] 2697 	mov	b,ar0
      0008FF E5 81            [12] 2698 	mov	a,sp
      000901 24 DE            [12] 2699 	add	a,#0xde
      000903 F8               [12] 2700 	mov	r0,a
      000904 E6               [12] 2701 	mov	a,@r0
      000905 C0 E0            [24] 2702 	push	acc
      000907 08               [12] 2703 	inc	r0
      000908 E6               [12] 2704 	mov	a,@r0
      000909 C0 E0            [24] 2705 	push	acc
      00090B 08               [12] 2706 	inc	r0
      00090C E6               [12] 2707 	mov	a,@r0
      00090D C0 E0            [24] 2708 	push	acc
      00090F A8 F0            [24] 2709 	mov	r0,b
      000911 C0 05            [24] 2710 	push	ar5
      000913 C0 06            [24] 2711 	push	ar6
      000915 C0 07            [24] 2712 	push	ar7
      000917 85 00 F0         [24] 2713 	mov	b,ar0
      00091A E5 81            [12] 2714 	mov	a,sp
      00091C 24 95            [12] 2715 	add	a,#0x95
      00091E F8               [12] 2716 	mov	r0,a
      00091F E6               [12] 2717 	mov	a,@r0
      000920 C0 E0            [24] 2718 	push	acc
      000922 08               [12] 2719 	inc	r0
      000923 E6               [12] 2720 	mov	a,@r0
      000924 C0 E0            [24] 2721 	push	acc
      000926 08               [12] 2722 	inc	r0
      000927 E6               [12] 2723 	mov	a,@r0
      000928 C0 E0            [24] 2724 	push	acc
      00092A A8 F0            [24] 2725 	mov	r0,b
      00092C 85 00 F0         [24] 2726 	mov	b,ar0
      00092F E5 81            [12] 2727 	mov	a,sp
      000931 24 A9            [12] 2728 	add	a,#0xa9
      000933 F8               [12] 2729 	mov	r0,a
      000934 E6               [12] 2730 	mov	a,@r0
      000935 C0 E0            [24] 2731 	push	acc
      000937 08               [12] 2732 	inc	r0
      000938 E6               [12] 2733 	mov	a,@r0
      000939 C0 E0            [24] 2734 	push	acc
      00093B A8 F0            [24] 2735 	mov	r0,b
      00093D C0 00            [24] 2736 	push	ar0
      00093F E5 81            [12] 2737 	mov	a,sp
      000941 24 9B            [12] 2738 	add	a,#0x9b
      000943 F8               [12] 2739 	mov	r0,a
      000944 86 82            [24] 2740 	mov	dpl,@r0
      000946 08               [12] 2741 	inc	r0
      000947 86 83            [24] 2742 	mov	dph,@r0
      000949 D0 00            [24] 2743 	pop	ar0
      00094B 78r00            [12] 2744 	mov	r0,#_elfloader_arch_relocate
      00094D 79s00            [12] 2745 	mov	r1,#(_elfloader_arch_relocate >> 8)
      00094F 7As00            [12] 2746 	mov	r2,#(_elfloader_arch_relocate >> 16)
      000951 12r00r00         [24] 2747 	lcall	__sdcc_banked_call
      000954 E5 81            [12] 2748 	mov	a,sp
      000956 24 F5            [12] 2749 	add	a,#0xf5
      000958 F5 81            [12] 2750 	mov	sp,a
      00095A D0 00            [24] 2751 	pop	ar0
      00095C D0 01            [24] 2752 	pop	ar1
                                   2753 ;	../../../core/loader/elfloader.c:233: for(a = section; a < section + size; a += rel_size) {
      00095E C0 00            [24] 2754 	push	ar0
      000960 A8 81            [24] 2755 	mov	r0,sp
      000962 18               [12] 2756 	dec	r0
      000963 18               [12] 2757 	dec	r0
      000964 86 04            [24] 2758 	mov	ar4,@r0
      000966 08               [12] 2759 	inc	r0
      000967 86 05            [24] 2760 	mov	ar5,@r0
      000969 E5 81            [12] 2761 	mov	a,sp
      00096B 24 DD            [12] 2762 	add	a,#0xdd
      00096D F8               [12] 2763 	mov	r0,a
      00096E EC               [12] 2764 	mov	a,r4
      00096F 26               [12] 2765 	add	a,@r0
      000970 F6               [12] 2766 	mov	@r0,a
      000971 ED               [12] 2767 	mov	a,r5
      000972 08               [12] 2768 	inc	r0
      000973 36               [12] 2769 	addc	a,@r0
      000974 F6               [12] 2770 	mov	@r0,a
      000975 D0 00            [24] 2771 	pop	ar0
      000977 02r03rF1         [24] 2772 	ljmp	00147$
      00097A                       2773 00145$:
                                   2774 ;	../../../core/loader/elfloader.c:288: return ELFLOADER_OK;
      00097A 90 00 00         [24] 2775 	mov	dptr,#0x0000
      00097D                       2776 00149$:
                                   2777 ;	../../../core/loader/elfloader.c:289: }
      00097D E5 81            [12] 2778 	mov	a,sp
      00097F 24 A8            [12] 2779 	add	a,#0xa8
      000981 F5 81            [12] 2780 	mov	sp,a
      000983 02r00r00         [24] 2781 	ljmp	__sdcc_banked_ret
                                   2782 ;------------------------------------------------------------
                                   2783 ;Allocation info for local variables in function 'find_program_processes'
                                   2784 ;------------------------------------------------------------
                                   2785 ;symtab                    Allocated to stack - sp -61
                                   2786 ;size                      Allocated to stack - sp -63
                                   2787 ;strtab                    Allocated to stack - sp -65
                                   2788 ;fd                        Allocated to stack - sp -56
                                   2789 ;s                         Allocated to stack - sp -45
                                   2790 ;a                         Allocated to registers 
                                   2791 ;name                      Allocated to stack - sp -29
                                   2792 ;sloc0                     Allocated to stack - sp -54
                                   2793 ;sloc1                     Allocated to stack - sp -52
                                   2794 ;sloc2                     Allocated to stack - sp -2
                                   2795 ;sloc3                     Allocated to stack - sp -50
                                   2796 ;sloc4                     Allocated to stack - sp -49
                                   2797 ;sloc5                     Allocated to stack - sp -48
                                   2798 ;------------------------------------------------------------
                                   2799 ;	../../../core/loader/elfloader.c:292: find_program_processes(int fd,
                                   2800 ;	-----------------------------------------
                                   2801 ;	 function find_program_processes
                                   2802 ;	-----------------------------------------
      000986                       2803 _find_program_processes:
      000986 C0 82            [24] 2804 	push	dpl
      000988 C0 83            [24] 2805 	push	dph
      00098A E5 81            [12] 2806 	mov	a,sp
      00098C 24 37            [12] 2807 	add	a,#0x37
                                   2808 ;	../../../core/loader/elfloader.c:300: for(a = symtab; a < symtab + size; a += sizeof(s)) {
      00098E F5 81            [12] 2809 	mov	sp,a
      000990 24 C3            [12] 2810 	add	a,#0xc3
      000992 F8               [12] 2811 	mov	r0,a
      000993 86 04            [24] 2812 	mov	ar4,@r0
      000995 08               [12] 2813 	inc	r0
      000996 86 05            [24] 2814 	mov	ar5,@r0
      000998 E5 81            [12] 2815 	mov	a,sp
      00099A 24 CE            [12] 2816 	add	a,#0xce
      00099C F8               [12] 2817 	mov	r0,a
      00099D E5 81            [12] 2818 	mov	a,sp
      00099F 24 E3            [12] 2819 	add	a,#0xe3
      0009A1 F6               [12] 2820 	mov	@r0,a
      0009A2 E5 81            [12] 2821 	mov	a,sp
      0009A4 24 D3            [12] 2822 	add	a,#0xd3
      0009A6 F9               [12] 2823 	mov	r1,a
      0009A7 E5 81            [12] 2824 	mov	a,sp
      0009A9 24 BF            [12] 2825 	add	a,#0xbf
      0009AB F8               [12] 2826 	mov	r0,a
      0009AC C0 01            [24] 2827 	push	ar1
      0009AE E5 81            [12] 2828 	mov	a,sp
      0009B0 24 C9            [12] 2829 	add	a,#0xc9
      0009B2 F9               [12] 2830 	mov	r1,a
      0009B3 E6               [12] 2831 	mov	a,@r0
      0009B4 F7               [12] 2832 	mov	@r1,a
      0009B5 08               [12] 2833 	inc	r0
      0009B6 09               [12] 2834 	inc	r1
      0009B7 E6               [12] 2835 	mov	a,@r0
      0009B8 F7               [12] 2836 	mov	@r1,a
      0009B9 D0 01            [24] 2837 	pop	ar1
      0009BB E5 81            [12] 2838 	mov	a,sp
      0009BD 24 CE            [12] 2839 	add	a,#0xce
      0009BF F8               [12] 2840 	mov	r0,a
      0009C0 C0 01            [24] 2841 	push	ar1
      0009C2 E5 81            [12] 2842 	mov	a,sp
      0009C4 24 CE            [12] 2843 	add	a,#0xce
      0009C6 F9               [12] 2844 	mov	r1,a
      0009C7 E6               [12] 2845 	mov	a,@r0
      0009C8 F7               [12] 2846 	mov	@r1,a
      0009C9 D0 01            [24] 2847 	pop	ar1
      0009CB E5 81            [12] 2848 	mov	a,sp
      0009CD 24 D3            [12] 2849 	add	a,#0xd3
      0009CF F8               [12] 2850 	mov	r0,a
      0009D0 C0 00            [24] 2851 	push	ar0
      0009D2 E5 81            [12] 2852 	mov	a,sp
      0009D4 24 C2            [12] 2853 	add	a,#0xc2
      0009D6 F8               [12] 2854 	mov	r0,a
      0009D7 C0 01            [24] 2855 	push	ar1
      0009D9 E5 81            [12] 2856 	mov	a,sp
      0009DB 24 BF            [12] 2857 	add	a,#0xbf
      0009DD F9               [12] 2858 	mov	r1,a
      0009DE E7               [12] 2859 	mov	a,@r1
      0009DF 26               [12] 2860 	add	a,@r0
      0009E0 C0 E0            [24] 2861 	push	acc
      0009E2 09               [12] 2862 	inc	r1
      0009E3 E7               [12] 2863 	mov	a,@r1
      0009E4 08               [12] 2864 	inc	r0
      0009E5 36               [12] 2865 	addc	a,@r0
      0009E6 C0 E0            [24] 2866 	push	acc
      0009E8 E5 81            [12] 2867 	mov	a,sp
      0009EA 24 C9            [12] 2868 	add	a,#0xc9
      0009EC F8               [12] 2869 	mov	r0,a
      0009ED D0 E0            [24] 2870 	pop	acc
      0009EF F6               [12] 2871 	mov	@r0,a
      0009F0 18               [12] 2872 	dec	r0
      0009F1 D0 E0            [24] 2873 	pop	acc
      0009F3 F6               [12] 2874 	mov	@r0,a
      0009F4 D0 01            [24] 2875 	pop	ar1
      0009F6 D0 00            [24] 2876 	pop	ar0
      0009F8                       2877 00107$:
      0009F8 C0 00            [24] 2878 	push	ar0
      0009FA E5 81            [12] 2879 	mov	a,sp
      0009FC 24 CB            [12] 2880 	add	a,#0xcb
      0009FE F8               [12] 2881 	mov	r0,a
      0009FF C3               [12] 2882 	clr	c
      000A00 EC               [12] 2883 	mov	a,r4
      000A01 96               [12] 2884 	subb	a,@r0
      000A02 ED               [12] 2885 	mov	a,r5
      000A03 08               [12] 2886 	inc	r0
      000A04 96               [12] 2887 	subb	a,@r0
      000A05 D0 00            [24] 2888 	pop	ar0
      000A07 40 03            [24] 2889 	jc	00127$
      000A09 02r0Br71         [24] 2890 	ljmp	00105$
      000A0C                       2891 00127$:
                                   2892 ;	../../../core/loader/elfloader.c:301: seek_read(fd, a, (char *)&s, sizeof(s));
      000A0C 88 02            [24] 2893 	mov	ar2,r0
      000A0E 7E 00            [12] 2894 	mov	r6,#0x00
      000A10 7F 40            [12] 2895 	mov	r7,#0x40
      000A12 C0 05            [24] 2896 	push	ar5
      000A14 C0 04            [24] 2897 	push	ar4
      000A16 C0 01            [24] 2898 	push	ar1
      000A18 C0 00            [24] 2899 	push	ar0
      000A1A 74 10            [12] 2900 	mov	a,#0x10
      000A1C C0 E0            [24] 2901 	push	acc
      000A1E E4               [12] 2902 	clr	a
      000A1F C0 E0            [24] 2903 	push	acc
      000A21 C0 02            [24] 2904 	push	ar2
      000A23 C0 06            [24] 2905 	push	ar6
      000A25 C0 07            [24] 2906 	push	ar7
      000A27 C0 04            [24] 2907 	push	ar4
      000A29 C0 05            [24] 2908 	push	ar5
      000A2B C0 00            [24] 2909 	push	ar0
      000A2D E5 81            [12] 2910 	mov	a,sp
      000A2F 24 BC            [12] 2911 	add	a,#0xbc
      000A31 F8               [12] 2912 	mov	r0,a
      000A32 86 82            [24] 2913 	mov	dpl,@r0
      000A34 08               [12] 2914 	inc	r0
      000A35 86 83            [24] 2915 	mov	dph,@r0
      000A37 D0 00            [24] 2916 	pop	ar0
      000A39 78r00            [12] 2917 	mov	r0,#_seek_read
      000A3B 79s00            [12] 2918 	mov	r1,#(_seek_read >> 8)
      000A3D 7As00            [12] 2919 	mov	r2,#(_seek_read >> 16)
      000A3F 12r00r00         [24] 2920 	lcall	__sdcc_banked_call
      000A42 E5 81            [12] 2921 	mov	a,sp
      000A44 24 F9            [12] 2922 	add	a,#0xf9
      000A46 F5 81            [12] 2923 	mov	sp,a
      000A48 D0 00            [24] 2924 	pop	ar0
      000A4A D0 01            [24] 2925 	pop	ar1
      000A4C D0 04            [24] 2926 	pop	ar4
      000A4E D0 05            [24] 2927 	pop	ar5
                                   2928 ;	../../../core/loader/elfloader.c:303: if(s.st_name != 0) {
      000A50 86 02            [24] 2929 	mov	ar2,@r0
      000A52 08               [12] 2930 	inc	r0
      000A53 86 03            [24] 2931 	mov	ar3,@r0
      000A55 08               [12] 2932 	inc	r0
      000A56 86 06            [24] 2933 	mov	ar6,@r0
      000A58 08               [12] 2934 	inc	r0
      000A59 86 07            [24] 2935 	mov	ar7,@r0
      000A5B 18               [12] 2936 	dec	r0
      000A5C 18               [12] 2937 	dec	r0
      000A5D 18               [12] 2938 	dec	r0
      000A5E EA               [12] 2939 	mov	a,r2
      000A5F 4B               [12] 2940 	orl	a,r3
      000A60 4E               [12] 2941 	orl	a,r6
      000A61 4F               [12] 2942 	orl	a,r7
      000A62 70 03            [24] 2943 	jnz	00128$
      000A64 02r0Br67         [24] 2944 	ljmp	00108$
      000A67                       2945 00128$:
                                   2946 ;	../../../core/loader/elfloader.c:304: seek_read(fd, strtab + s.st_name, name, sizeof(name));
      000A67 C0 00            [24] 2947 	push	ar0
      000A69 C0 00            [24] 2948 	push	ar0
      000A6B E5 81            [12] 2949 	mov	a,sp
      000A6D 24 CC            [12] 2950 	add	a,#0xcc
      000A6F F8               [12] 2951 	mov	r0,a
      000A70 C0 01            [24] 2952 	push	ar1
      000A72 E5 81            [12] 2953 	mov	a,sp
      000A74 24 CD            [12] 2954 	add	a,#0xcd
      000A76 F9               [12] 2955 	mov	r1,a
      000A77 E6               [12] 2956 	mov	a,@r0
      000A78 F7               [12] 2957 	mov	@r1,a
      000A79 09               [12] 2958 	inc	r1
      000A7A 77 00            [12] 2959 	mov	@r1,#0x00
      000A7C 09               [12] 2960 	inc	r1
      000A7D 77 40            [12] 2961 	mov	@r1,#0x40
      000A7F D0 01            [24] 2962 	pop	ar1
      000A81 87 02            [24] 2963 	mov	ar2,@r1
      000A83 09               [12] 2964 	inc	r1
      000A84 87 07            [24] 2965 	mov	ar7,@r1
      000A86 19               [12] 2966 	dec	r1
      000A87 E5 81            [12] 2967 	mov	a,sp
      000A89 24 C8            [12] 2968 	add	a,#0xc8
      000A8B F8               [12] 2969 	mov	r0,a
      000A8C EA               [12] 2970 	mov	a,r2
      000A8D 26               [12] 2971 	add	a,@r0
      000A8E FA               [12] 2972 	mov	r2,a
      000A8F EF               [12] 2973 	mov	a,r7
      000A90 08               [12] 2974 	inc	r0
      000A91 36               [12] 2975 	addc	a,@r0
      000A92 FF               [12] 2976 	mov	r7,a
      000A93 D0 00            [24] 2977 	pop	ar0
      000A95 C0 05            [24] 2978 	push	ar5
      000A97 C0 04            [24] 2979 	push	ar4
      000A99 C0 01            [24] 2980 	push	ar1
      000A9B C0 00            [24] 2981 	push	ar0
      000A9D 74 1E            [12] 2982 	mov	a,#0x1e
      000A9F C0 E0            [24] 2983 	push	acc
      000AA1 E4               [12] 2984 	clr	a
      000AA2 C0 E0            [24] 2985 	push	acc
      000AA4 85 00 F0         [24] 2986 	mov	b,ar0
      000AA7 E5 81            [12] 2987 	mov	a,sp
      000AA9 24 C9            [12] 2988 	add	a,#0xc9
      000AAB F8               [12] 2989 	mov	r0,a
      000AAC E6               [12] 2990 	mov	a,@r0
      000AAD C0 E0            [24] 2991 	push	acc
      000AAF 08               [12] 2992 	inc	r0
      000AB0 E6               [12] 2993 	mov	a,@r0
      000AB1 C0 E0            [24] 2994 	push	acc
      000AB3 08               [12] 2995 	inc	r0
      000AB4 E6               [12] 2996 	mov	a,@r0
      000AB5 C0 E0            [24] 2997 	push	acc
      000AB7 A8 F0            [24] 2998 	mov	r0,b
      000AB9 C0 02            [24] 2999 	push	ar2
      000ABB C0 07            [24] 3000 	push	ar7
      000ABD C0 00            [24] 3001 	push	ar0
      000ABF E5 81            [12] 3002 	mov	a,sp
      000AC1 24 BB            [12] 3003 	add	a,#0xbb
      000AC3 F8               [12] 3004 	mov	r0,a
      000AC4 86 82            [24] 3005 	mov	dpl,@r0
      000AC6 08               [12] 3006 	inc	r0
      000AC7 86 83            [24] 3007 	mov	dph,@r0
      000AC9 D0 00            [24] 3008 	pop	ar0
      000ACB 78r00            [12] 3009 	mov	r0,#_seek_read
      000ACD 79s00            [12] 3010 	mov	r1,#(_seek_read >> 8)
      000ACF 7As00            [12] 3011 	mov	r2,#(_seek_read >> 16)
      000AD1 12r00r00         [24] 3012 	lcall	__sdcc_banked_call
      000AD4 E5 81            [12] 3013 	mov	a,sp
      000AD6 24 F9            [12] 3014 	add	a,#0xf9
      000AD8 F5 81            [12] 3015 	mov	sp,a
      000ADA D0 00            [24] 3016 	pop	ar0
      000ADC D0 01            [24] 3017 	pop	ar1
      000ADE D0 04            [24] 3018 	pop	ar4
      000AE0 D0 05            [24] 3019 	pop	ar5
                                   3020 ;	../../../core/loader/elfloader.c:305: if(strcmp(name, "autostart_processes") == 0) {
      000AE2 C0 00            [24] 3021 	push	ar0
      000AE4 E5 81            [12] 3022 	mov	a,sp
      000AE6 24 CD            [12] 3023 	add	a,#0xcd
      000AE8 F8               [12] 3024 	mov	r0,a
      000AE9 86 02            [24] 3025 	mov	ar2,@r0
      000AEB 7E 00            [12] 3026 	mov	r6,#0x00
      000AED 7F 40            [12] 3027 	mov	r7,#0x40
      000AEF D0 00            [24] 3028 	pop	ar0
      000AF1 C0 05            [24] 3029 	push	ar5
      000AF3 C0 04            [24] 3030 	push	ar4
      000AF5 C0 01            [24] 3031 	push	ar1
      000AF7 C0 00            [24] 3032 	push	ar0
      000AF9 74r07            [12] 3033 	mov	a,#___str_0
      000AFB C0 E0            [24] 3034 	push	acc
      000AFD 74s00            [12] 3035 	mov	a,#(___str_0 >> 8)
      000AFF C0 E0            [24] 3036 	push	acc
      000B01 74 80            [12] 3037 	mov	a,#0x80
      000B03 C0 E0            [24] 3038 	push	acc
      000B05 8A 82            [24] 3039 	mov	dpl,r2
      000B07 8E 83            [24] 3040 	mov	dph,r6
      000B09 8F F0            [24] 3041 	mov	b,r7
      000B0B 78r00            [12] 3042 	mov	r0,#_strcmp
      000B0D 79s00            [12] 3043 	mov	r1,#(_strcmp >> 8)
      000B0F 7As00            [12] 3044 	mov	r2,#(_strcmp >> 16)
      000B11 12r00r00         [24] 3045 	lcall	__sdcc_banked_call
      000B14 AE 82            [24] 3046 	mov	r6,dpl
      000B16 AF 83            [24] 3047 	mov	r7,dph
      000B18 15 81            [12] 3048 	dec	sp
      000B1A 15 81            [12] 3049 	dec	sp
      000B1C 15 81            [12] 3050 	dec	sp
      000B1E D0 00            [24] 3051 	pop	ar0
      000B20 D0 01            [24] 3052 	pop	ar1
      000B22 D0 04            [24] 3053 	pop	ar4
      000B24 D0 05            [24] 3054 	pop	ar5
      000B26 D0 00            [24] 3055 	pop	ar0
      000B28 EE               [12] 3056 	mov	a,r6
      000B29 4F               [12] 3057 	orl	a,r7
      000B2A 70 3B            [24] 3058 	jnz	00108$
                                   3059 ;	../../../core/loader/elfloader.c:306: return &data.address[s.st_value];
      000B2C 90r00r2A         [24] 3060 	mov	dptr,#(_data + 0x0003)
      000B2F E5 81            [12] 3061 	mov	a,sp
      000B31 24 D0            [12] 3062 	add	a,#0xd0
      000B33 F8               [12] 3063 	mov	r0,a
      000B34 E0               [24] 3064 	movx	a,@dptr
      000B35 F6               [12] 3065 	mov	@r0,a
      000B36 A3               [24] 3066 	inc	dptr
      000B37 E0               [24] 3067 	movx	a,@dptr
      000B38 08               [12] 3068 	inc	r0
      000B39 F6               [12] 3069 	mov	@r0,a
      000B3A A3               [24] 3070 	inc	dptr
      000B3B E0               [24] 3071 	movx	a,@dptr
      000B3C 08               [12] 3072 	inc	r0
      000B3D F6               [12] 3073 	mov	@r0,a
      000B3E E5 81            [12] 3074 	mov	a,sp
      000B40 24 D3            [12] 3075 	add	a,#0xd3
      000B42 24 04            [12] 3076 	add	a,#0x04
      000B44 F9               [12] 3077 	mov	r1,a
      000B45 87 02            [24] 3078 	mov	ar2,@r1
      000B47 09               [12] 3079 	inc	r1
      000B48 87 03            [24] 3080 	mov	ar3,@r1
      000B4A 09               [12] 3081 	inc	r1
      000B4B 87 06            [24] 3082 	mov	ar6,@r1
      000B4D 09               [12] 3083 	inc	r1
      000B4E 87 07            [24] 3084 	mov	ar7,@r1
      000B50 E5 81            [12] 3085 	mov	a,sp
      000B52 24 D0            [12] 3086 	add	a,#0xd0
      000B54 F8               [12] 3087 	mov	r0,a
      000B55 EA               [12] 3088 	mov	a,r2
      000B56 26               [12] 3089 	add	a,@r0
      000B57 FA               [12] 3090 	mov	r2,a
      000B58 EB               [12] 3091 	mov	a,r3
      000B59 08               [12] 3092 	inc	r0
      000B5A 36               [12] 3093 	addc	a,@r0
      000B5B FB               [12] 3094 	mov	r3,a
      000B5C 08               [12] 3095 	inc	r0
      000B5D 86 06            [24] 3096 	mov	ar6,@r0
      000B5F 8A 82            [24] 3097 	mov	dpl,r2
      000B61 8B 83            [24] 3098 	mov	dph,r3
      000B63 8E F0            [24] 3099 	mov	b,r6
      000B65 80 10            [24] 3100 	sjmp	00109$
      000B67                       3101 00108$:
                                   3102 ;	../../../core/loader/elfloader.c:300: for(a = symtab; a < symtab + size; a += sizeof(s)) {
      000B67 74 10            [12] 3103 	mov	a,#0x10
      000B69 2C               [12] 3104 	add	a,r4
      000B6A FC               [12] 3105 	mov	r4,a
      000B6B E4               [12] 3106 	clr	a
      000B6C 3D               [12] 3107 	addc	a,r5
      000B6D FD               [12] 3108 	mov	r5,a
      000B6E 02r09rF8         [24] 3109 	ljmp	00107$
      000B71                       3110 00105$:
                                   3111 ;	../../../core/loader/elfloader.c:310: return NULL;
      000B71 90 00 00         [24] 3112 	mov	dptr,#0x0000
      000B74 75 F0 00         [24] 3113 	mov	b,#0x00
      000B77                       3114 00109$:
                                   3115 ;	../../../core/loader/elfloader.c:312: }
      000B77 E5 81            [12] 3116 	mov	a,sp
      000B79 24 C7            [12] 3117 	add	a,#0xc7
      000B7B F5 81            [12] 3118 	mov	sp,a
      000B7D 02r00r00         [24] 3119 	ljmp	__sdcc_banked_ret
                                   3120 ;------------------------------------------------------------
                                   3121 ;Allocation info for local variables in function 'elfloader_init'
                                   3122 ;------------------------------------------------------------
                                   3123 ;	../../../core/loader/elfloader.c:315: elfloader_init(void)
                                   3124 ;	-----------------------------------------
                                   3125 ;	 function elfloader_init
                                   3126 ;	-----------------------------------------
      000B80                       3127 _elfloader_init:
                                   3128 ;	../../../core/loader/elfloader.c:317: elfloader_autostart_processes = NULL;
      000B80 90r00r1E         [24] 3129 	mov	dptr,#_elfloader_autostart_processes
      000B83 E4               [12] 3130 	clr	a
      000B84 F0               [24] 3131 	movx	@dptr,a
      000B85 A3               [24] 3132 	inc	dptr
      000B86 F0               [24] 3133 	movx	@dptr,a
      000B87 A3               [24] 3134 	inc	dptr
      000B88 F0               [24] 3135 	movx	@dptr,a
                                   3136 ;	../../../core/loader/elfloader.c:318: }
      000B89 02r00r00         [24] 3137 	ljmp	__sdcc_banked_ret
                                   3138 ;------------------------------------------------------------
                                   3139 ;Allocation info for local variables in function 'elfloader_load'
                                   3140 ;------------------------------------------------------------
                                   3141 ;fd                        Allocated to stack - sp -202
                                   3142 ;ehdr                      Allocated to stack - sp -166
                                   3143 ;shdr                      Allocated to stack - sp -114
                                   3144 ;strtable                  Allocated to stack - sp -74
                                   3145 ;strs                      Allocated to stack - sp -34
                                   3146 ;shdrptr                   Allocated to stack - sp -32
                                   3147 ;nameptr                   Allocated to registers 
                                   3148 ;name                      Allocated to stack - sp -30
                                   3149 ;i                         Allocated to registers 
                                   3150 ;shdrnum                   Allocated to stack - sp -18
                                   3151 ;shdrsize                  Allocated to stack - sp -16
                                   3152 ;using_relas               Allocated to stack - sp -14
                                   3153 ;textoff                   Allocated to stack - sp -13
                                   3154 ;textsize                  Allocated to stack - sp -11
                                   3155 ;textrelaoff               Allocated to registers r2 r5 
                                   3156 ;textrelasize              Allocated to stack - sp -183
                                   3157 ;dataoff                   Allocated to stack - sp -9
                                   3158 ;datasize                  Allocated to stack - sp -185
                                   3159 ;datarelaoff               Allocated to stack - sp -200
                                   3160 ;datarelasize              Allocated to stack - sp -187
                                   3161 ;rodataoff                 Allocated to stack - sp -7
                                   3162 ;rodatasize                Allocated to stack - sp -189
                                   3163 ;rodatarelaoff             Allocated to stack - sp -198
                                   3164 ;rodatarelasize            Allocated to stack - sp -191
                                   3165 ;symtaboff                 Allocated to stack - sp -5
                                   3166 ;symtabsize                Allocated to stack - sp -3
                                   3167 ;strtaboff                 Allocated to stack - sp -1
                                   3168 ;strtabsize                Allocated to stack - sp -194
                                   3169 ;bsssize                   Allocated to stack - sp -196
                                   3170 ;process                   Allocated to registers r2 r3 r4 
                                   3171 ;ret                       Allocated to registers r6 r7 
                                   3172 ;sloc0                     Allocated to stack - sp -200
                                   3173 ;sloc1                     Allocated to stack - sp -198
                                   3174 ;sloc2                     Allocated to stack - sp -196
                                   3175 ;sloc3                     Allocated to stack - sp -194
                                   3176 ;sloc4                     Allocated to stack - sp -191
                                   3177 ;sloc5                     Allocated to stack - sp -189
                                   3178 ;sloc6                     Allocated to stack - sp -187
                                   3179 ;sloc7                     Allocated to stack - sp -185
                                   3180 ;sloc8                     Allocated to stack - sp -183
                                   3181 ;sloc9                     Allocated to stack - sp -181
                                   3182 ;sloc10                    Allocated to stack - sp +17
                                   3183 ;sloc11                    Allocated to stack - sp -179
                                   3184 ;sloc12                    Allocated to stack - sp +19
                                   3185 ;sloc13                    Allocated to stack - sp -178
                                   3186 ;sloc14                    Allocated to stack - sp -177
                                   3187 ;sloc15                    Allocated to stack - sp -176
                                   3188 ;sloc16                    Allocated to stack - sp -175
                                   3189 ;sloc17                    Allocated to stack - sp -174
                                   3190 ;sloc18                    Allocated to stack - sp -173
                                   3191 ;sloc19                    Allocated to stack - sp -172
                                   3192 ;sloc20                    Allocated to stack - sp -171
                                   3193 ;sloc21                    Allocated to stack - sp -170
                                   3194 ;sloc22                    Allocated to stack - sp -169
                                   3195 ;sloc23                    Allocated to stack - sp -168
                                   3196 ;sloc24                    Allocated to stack - sp -167
                                   3197 ;------------------------------------------------------------
                                   3198 ;	../../../core/loader/elfloader.c:337: elfloader_load(int fd)
                                   3199 ;	-----------------------------------------
                                   3200 ;	 function elfloader_load
                                   3201 ;	-----------------------------------------
      000B8C                       3202 _elfloader_load:
      000B8C C0 82            [24] 3203 	push	dpl
      000B8E C0 83            [24] 3204 	push	dph
      000B90 E5 81            [12] 3205 	mov	a,sp
      000B92 24 C9            [12] 3206 	add	a,#0xc9
                                   3207 ;	../../../core/loader/elfloader.c:350: unsigned char using_relas = -1;
      000B94 F5 81            [12] 3208 	mov	sp,a
      000B96 24 F2            [12] 3209 	add	a,#0xf2
      000B98 F8               [12] 3210 	mov	r0,a
      000B99 76 FF            [12] 3211 	mov	@r0,#0xff
                                   3212 ;	../../../core/loader/elfloader.c:351: unsigned short textoff = 0, textsize, textrelaoff = 0, textrelasize;
      000B9B E5 81            [12] 3213 	mov	a,sp
      000B9D 24 F3            [12] 3214 	add	a,#0xf3
      000B9F F8               [12] 3215 	mov	r0,a
      000BA0 E4               [12] 3216 	clr	a
      000BA1 F6               [12] 3217 	mov	@r0,a
      000BA2 08               [12] 3218 	inc	r0
      000BA3 F6               [12] 3219 	mov	@r0,a
                                   3220 ;	../../../core/loader/elfloader.c:352: unsigned short dataoff = 0, datasize, datarelaoff = 0, datarelasize;
      000BA4 E4               [12] 3221 	clr	a
      000BA5 FA               [12] 3222 	mov	r2,a
      000BA6 FD               [12] 3223 	mov	r5,a
      000BA7 E5 81            [12] 3224 	mov	a,sp
      000BA9 24 F7            [12] 3225 	add	a,#0xf7
      000BAB F8               [12] 3226 	mov	r0,a
      000BAC E4               [12] 3227 	clr	a
      000BAD F6               [12] 3228 	mov	@r0,a
      000BAE 08               [12] 3229 	inc	r0
      000BAF F6               [12] 3230 	mov	@r0,a
      000BB0 E5 81            [12] 3231 	mov	a,sp
      000BB2 24 38            [12] 3232 	add	a,#0x38
      000BB4 F8               [12] 3233 	mov	r0,a
      000BB5 E4               [12] 3234 	clr	a
      000BB6 F6               [12] 3235 	mov	@r0,a
      000BB7 08               [12] 3236 	inc	r0
      000BB8 F6               [12] 3237 	mov	@r0,a
                                   3238 ;	../../../core/loader/elfloader.c:353: unsigned short rodataoff = 0, rodatasize, rodatarelaoff = 0, rodatarelasize;
      000BB9 E5 81            [12] 3239 	mov	a,sp
      000BBB 24 F9            [12] 3240 	add	a,#0xf9
      000BBD F8               [12] 3241 	mov	r0,a
      000BBE E4               [12] 3242 	clr	a
      000BBF F6               [12] 3243 	mov	@r0,a
      000BC0 08               [12] 3244 	inc	r0
      000BC1 F6               [12] 3245 	mov	@r0,a
      000BC2 E5 81            [12] 3246 	mov	a,sp
      000BC4 24 3A            [12] 3247 	add	a,#0x3a
      000BC6 F8               [12] 3248 	mov	r0,a
      000BC7 E4               [12] 3249 	clr	a
      000BC8 F6               [12] 3250 	mov	@r0,a
      000BC9 08               [12] 3251 	inc	r0
      000BCA F6               [12] 3252 	mov	@r0,a
                                   3253 ;	../../../core/loader/elfloader.c:354: unsigned short symtaboff = 0, symtabsize;
      000BCB E5 81            [12] 3254 	mov	a,sp
      000BCD 24 FB            [12] 3255 	add	a,#0xfb
      000BCF F8               [12] 3256 	mov	r0,a
      000BD0 E4               [12] 3257 	clr	a
      000BD1 F6               [12] 3258 	mov	@r0,a
      000BD2 08               [12] 3259 	inc	r0
      000BD3 F6               [12] 3260 	mov	@r0,a
                                   3261 ;	../../../core/loader/elfloader.c:355: unsigned short strtaboff = 0, strtabsize;
      000BD4 A8 81            [24] 3262 	mov	r0,sp
      000BD6 18               [12] 3263 	dec	r0
      000BD7 F6               [12] 3264 	mov	@r0,a
      000BD8 08               [12] 3265 	inc	r0
      000BD9 F6               [12] 3266 	mov	@r0,a
                                   3267 ;	../../../core/loader/elfloader.c:356: unsigned short bsssize = 0;
      000BDA E5 81            [12] 3268 	mov	a,sp
      000BDC 24 3C            [12] 3269 	add	a,#0x3c
      000BDE F8               [12] 3270 	mov	r0,a
      000BDF E4               [12] 3271 	clr	a
      000BE0 F6               [12] 3272 	mov	@r0,a
      000BE1 08               [12] 3273 	inc	r0
      000BE2 F6               [12] 3274 	mov	@r0,a
                                   3275 ;	../../../core/loader/elfloader.c:361: elfloader_unknown[0] = 0;
      000BE3 90r00r00         [24] 3276 	mov	dptr,#_elfloader_unknown
      000BE6 F0               [24] 3277 	movx	@dptr,a
                                   3278 ;	../../../core/loader/elfloader.c:364: seek_read(fd, 0, (char *)&ehdr, sizeof(ehdr));
      000BE7 E5 81            [12] 3279 	mov	a,sp
      000BE9 24 5A            [12] 3280 	add	a,#0x5a
      000BEB FC               [12] 3281 	mov	r4,a
      000BEC FB               [12] 3282 	mov	r3,a
      000BED 7E 00            [12] 3283 	mov	r6,#0x00
      000BEF 7F 40            [12] 3284 	mov	r7,#0x40
      000BF1 C0 05            [24] 3285 	push	ar5
      000BF3 C0 04            [24] 3286 	push	ar4
      000BF5 C0 02            [24] 3287 	push	ar2
      000BF7 74 34            [12] 3288 	mov	a,#0x34
      000BF9 C0 E0            [24] 3289 	push	acc
      000BFB E4               [12] 3290 	clr	a
      000BFC C0 E0            [24] 3291 	push	acc
      000BFE C0 03            [24] 3292 	push	ar3
      000C00 C0 06            [24] 3293 	push	ar6
      000C02 C0 07            [24] 3294 	push	ar7
      000C04 C0 E0            [24] 3295 	push	acc
      000C06 C0 E0            [24] 3296 	push	acc
      000C08 E5 81            [12] 3297 	mov	a,sp
      000C0A 24 2C            [12] 3298 	add	a,#0x2c
      000C0C F8               [12] 3299 	mov	r0,a
      000C0D 86 82            [24] 3300 	mov	dpl,@r0
      000C0F 08               [12] 3301 	inc	r0
      000C10 86 83            [24] 3302 	mov	dph,@r0
      000C12 78r00            [12] 3303 	mov	r0,#_seek_read
      000C14 79s00            [12] 3304 	mov	r1,#(_seek_read >> 8)
      000C16 7As00            [12] 3305 	mov	r2,#(_seek_read >> 16)
      000C18 12r00r00         [24] 3306 	lcall	__sdcc_banked_call
      000C1B E5 81            [12] 3307 	mov	a,sp
      000C1D 24 F9            [12] 3308 	add	a,#0xf9
      000C1F F5 81            [12] 3309 	mov	sp,a
      000C21 D0 02            [24] 3310 	pop	ar2
      000C23 D0 04            [24] 3311 	pop	ar4
                                   3312 ;	../../../core/loader/elfloader.c:369: if(memcmp(ehdr.e_ident, elf_magic_header, sizeof(elf_magic_header)) != 0) {
      000C25 7F 00            [12] 3313 	mov	r7,#0x00
      000C27 7E 40            [12] 3314 	mov	r6,#0x40
      000C29 C0 02            [24] 3315 	push	ar2
      000C2B 74 07            [12] 3316 	mov	a,#0x07
      000C2D C0 E0            [24] 3317 	push	acc
      000C2F E4               [12] 3318 	clr	a
      000C30 C0 E0            [24] 3319 	push	acc
      000C32 74r00            [12] 3320 	mov	a,#_elf_magic_header
      000C34 C0 E0            [24] 3321 	push	acc
      000C36 74s00            [12] 3322 	mov	a,#(_elf_magic_header >> 8)
      000C38 C0 E0            [24] 3323 	push	acc
      000C3A 74 80            [12] 3324 	mov	a,#0x80
      000C3C C0 E0            [24] 3325 	push	acc
      000C3E 8C 82            [24] 3326 	mov	dpl,r4
      000C40 8F 83            [24] 3327 	mov	dph,r7
      000C42 8E F0            [24] 3328 	mov	b,r6
      000C44 78r00            [12] 3329 	mov	r0,#_memcmp
      000C46 79s00            [12] 3330 	mov	r1,#(_memcmp >> 8)
      000C48 7As00            [12] 3331 	mov	r2,#(_memcmp >> 16)
      000C4A 12r00r00         [24] 3332 	lcall	__sdcc_banked_call
      000C4D AE 82            [24] 3333 	mov	r6,dpl
      000C4F AF 83            [24] 3334 	mov	r7,dph
      000C51 E5 81            [12] 3335 	mov	a,sp
      000C53 24 FB            [12] 3336 	add	a,#0xfb
      000C55 F5 81            [12] 3337 	mov	sp,a
      000C57 D0 02            [24] 3338 	pop	ar2
      000C59 D0 05            [24] 3339 	pop	ar5
      000C5B EE               [12] 3340 	mov	a,r6
      000C5C 4F               [12] 3341 	orl	a,r7
      000C5D 60 06            [24] 3342 	jz	00104$
                                   3343 ;	../../../core/loader/elfloader.c:371: return ELFLOADER_BAD_ELF_HEADER;
      000C5F 90 00 01         [24] 3344 	mov	dptr,#0x0001
      000C62 02r1Ar29         [24] 3345 	ljmp	00207$
      000C65                       3346 00104$:
                                   3347 ;	../../../core/loader/elfloader.c:375: shdrptr = ehdr.e_shoff;
      000C65 C0 02            [24] 3348 	push	ar2
      000C67 C0 05            [24] 3349 	push	ar5
      000C69 E5 81            [12] 3350 	mov	a,sp
      000C6B 24 58            [12] 3351 	add	a,#0x58
      000C6D FF               [12] 3352 	mov	r7,a
      000C6E 24 20            [12] 3353 	add	a,#0x20
      000C70 F9               [12] 3354 	mov	r1,a
      000C71 87 04            [24] 3355 	mov	ar4,@r1
      000C73 09               [12] 3356 	inc	r1
      000C74 87 06            [24] 3357 	mov	ar6,@r1
      000C76 19               [12] 3358 	dec	r1
                                   3359 ;	../../../core/loader/elfloader.c:376: seek_read(fd, shdrptr, (char *)&shdr, sizeof(shdr));
      000C77 E5 81            [12] 3360 	mov	a,sp
      000C79 24 8C            [12] 3361 	add	a,#0x8c
      000C7B FA               [12] 3362 	mov	r2,a
      000C7C 7B 00            [12] 3363 	mov	r3,#0x00
      000C7E 7D 40            [12] 3364 	mov	r5,#0x40
      000C80 C0 07            [24] 3365 	push	ar7
      000C82 C0 05            [24] 3366 	push	ar5
      000C84 C0 02            [24] 3367 	push	ar2
      000C86 C0 01            [24] 3368 	push	ar1
      000C88 74 28            [12] 3369 	mov	a,#0x28
      000C8A C0 E0            [24] 3370 	push	acc
      000C8C E4               [12] 3371 	clr	a
      000C8D C0 E0            [24] 3372 	push	acc
      000C8F C0 02            [24] 3373 	push	ar2
      000C91 C0 03            [24] 3374 	push	ar3
      000C93 C0 05            [24] 3375 	push	ar5
      000C95 C0 04            [24] 3376 	push	ar4
      000C97 C0 06            [24] 3377 	push	ar6
      000C99 E5 81            [12] 3378 	mov	a,sp
      000C9B 24 29            [12] 3379 	add	a,#0x29
      000C9D F8               [12] 3380 	mov	r0,a
      000C9E 86 82            [24] 3381 	mov	dpl,@r0
      000CA0 08               [12] 3382 	inc	r0
      000CA1 86 83            [24] 3383 	mov	dph,@r0
      000CA3 78r00            [12] 3384 	mov	r0,#_seek_read
      000CA5 79s00            [12] 3385 	mov	r1,#(_seek_read >> 8)
      000CA7 7As00            [12] 3386 	mov	r2,#(_seek_read >> 16)
      000CA9 12r00r00         [24] 3387 	lcall	__sdcc_banked_call
      000CAC E5 81            [12] 3388 	mov	a,sp
      000CAE 24 F9            [12] 3389 	add	a,#0xf9
      000CB0 F5 81            [12] 3390 	mov	sp,a
      000CB2 D0 01            [24] 3391 	pop	ar1
      000CB4 D0 02            [24] 3392 	pop	ar2
      000CB6 D0 05            [24] 3393 	pop	ar5
      000CB8 D0 07            [24] 3394 	pop	ar7
                                   3395 ;	../../../core/loader/elfloader.c:379: shdrsize = ehdr.e_shentsize;
      000CBA 74 2E            [12] 3396 	mov	a,#0x2e
      000CBC 2F               [12] 3397 	add	a,r7
      000CBD F8               [12] 3398 	mov	r0,a
      000CBE C0 01            [24] 3399 	push	ar1
      000CC0 E5 81            [12] 3400 	mov	a,sp
      000CC2 24 ED            [12] 3401 	add	a,#0xed
      000CC4 F9               [12] 3402 	mov	r1,a
      000CC5 E6               [12] 3403 	mov	a,@r0
      000CC6 F7               [12] 3404 	mov	@r1,a
      000CC7 08               [12] 3405 	inc	r0
      000CC8 E6               [12] 3406 	mov	a,@r0
      000CC9 09               [12] 3407 	inc	r1
      000CCA F7               [12] 3408 	mov	@r1,a
                                   3409 ;	../../../core/loader/elfloader.c:380: shdrnum = ehdr.e_shnum;
      000CCB 74 30            [12] 3410 	mov	a,#0x30
      000CCD 2F               [12] 3411 	add	a,r7
      000CCE F8               [12] 3412 	mov	r0,a
      000CCF E5 81            [12] 3413 	mov	a,sp
      000CD1 24 EB            [12] 3414 	add	a,#0xeb
      000CD3 F9               [12] 3415 	mov	r1,a
      000CD4 E6               [12] 3416 	mov	a,@r0
      000CD5 F7               [12] 3417 	mov	@r1,a
      000CD6 08               [12] 3418 	inc	r0
      000CD7 E6               [12] 3419 	mov	a,@r0
      000CD8 09               [12] 3420 	inc	r1
      000CD9 F7               [12] 3421 	mov	@r1,a
      000CDA D0 01            [24] 3422 	pop	ar1
                                   3423 ;	../../../core/loader/elfloader.c:386: (char *)&strtable, sizeof(strtable));
      000CDC E5 81            [12] 3424 	mov	a,sp
      000CDE 24 B4            [12] 3425 	add	a,#0xb4
      000CE0 FE               [12] 3426 	mov	r6,a
      000CE1 FD               [12] 3427 	mov	r5,a
      000CE2 E5 81            [12] 3428 	mov	a,sp
      000CE4 24 3C            [12] 3429 	add	a,#0x3c
      000CE6 F8               [12] 3430 	mov	r0,a
      000CE7 A6 05            [24] 3431 	mov	@r0,ar5
      000CE9 08               [12] 3432 	inc	r0
      000CEA 76 00            [12] 3433 	mov	@r0,#0x00
      000CEC 08               [12] 3434 	inc	r0
      000CED 76 40            [12] 3435 	mov	@r0,#0x40
                                   3436 ;	../../../core/loader/elfloader.c:385: seek_read(fd, ehdr.e_shoff + shdrsize * ehdr.e_shstrndx,
      000CEF 87 02            [24] 3437 	mov	ar2,@r1
      000CF1 09               [12] 3438 	inc	r1
      000CF2 87 05            [24] 3439 	mov	ar5,@r1
      000CF4 19               [12] 3440 	dec	r1
      000CF5 74 32            [12] 3441 	mov	a,#0x32
      000CF7 2F               [12] 3442 	add	a,r7
      000CF8 F8               [12] 3443 	mov	r0,a
      000CF9 86 04            [24] 3444 	mov	ar4,@r0
      000CFB 08               [12] 3445 	inc	r0
      000CFC 86 07            [24] 3446 	mov	ar7,@r0
      000CFE C0 06            [24] 3447 	push	ar6
      000D00 C0 05            [24] 3448 	push	ar5
      000D02 C0 02            [24] 3449 	push	ar2
      000D04 C0 01            [24] 3450 	push	ar1
      000D06 C0 04            [24] 3451 	push	ar4
      000D08 C0 07            [24] 3452 	push	ar7
      000D0A E5 81            [12] 3453 	mov	a,sp
      000D0C 24 E8            [12] 3454 	add	a,#0xe8
      000D0E F8               [12] 3455 	mov	r0,a
      000D0F 86 82            [24] 3456 	mov	dpl,@r0
      000D11 08               [12] 3457 	inc	r0
      000D12 86 83            [24] 3458 	mov	dph,@r0
      000D14 12r00r00         [24] 3459 	lcall	__mulint
      000D17 AC 82            [24] 3460 	mov	r4,dpl
      000D19 AF 83            [24] 3461 	mov	r7,dph
      000D1B 15 81            [12] 3462 	dec	sp
      000D1D 15 81            [12] 3463 	dec	sp
      000D1F D0 01            [24] 3464 	pop	ar1
      000D21 D0 02            [24] 3465 	pop	ar2
      000D23 D0 05            [24] 3466 	pop	ar5
      000D25 EC               [12] 3467 	mov	a,r4
      000D26 2A               [12] 3468 	add	a,r2
      000D27 FA               [12] 3469 	mov	r2,a
      000D28 EF               [12] 3470 	mov	a,r7
      000D29 3D               [12] 3471 	addc	a,r5
      000D2A FD               [12] 3472 	mov	r5,a
      000D2B C0 05            [24] 3473 	push	ar5
      000D2D C0 02            [24] 3474 	push	ar2
      000D2F C0 01            [24] 3475 	push	ar1
      000D31 74 28            [12] 3476 	mov	a,#0x28
      000D33 C0 E0            [24] 3477 	push	acc
      000D35 E4               [12] 3478 	clr	a
      000D36 C0 E0            [24] 3479 	push	acc
      000D38 E5 81            [12] 3480 	mov	a,sp
      000D3A 24 36            [12] 3481 	add	a,#0x36
      000D3C F8               [12] 3482 	mov	r0,a
      000D3D E6               [12] 3483 	mov	a,@r0
      000D3E C0 E0            [24] 3484 	push	acc
      000D40 08               [12] 3485 	inc	r0
      000D41 E6               [12] 3486 	mov	a,@r0
      000D42 C0 E0            [24] 3487 	push	acc
      000D44 08               [12] 3488 	inc	r0
      000D45 E6               [12] 3489 	mov	a,@r0
      000D46 C0 E0            [24] 3490 	push	acc
      000D48 C0 02            [24] 3491 	push	ar2
      000D4A C0 05            [24] 3492 	push	ar5
      000D4C E5 81            [12] 3493 	mov	a,sp
      000D4E 24 29            [12] 3494 	add	a,#0x29
      000D50 F8               [12] 3495 	mov	r0,a
      000D51 86 82            [24] 3496 	mov	dpl,@r0
      000D53 08               [12] 3497 	inc	r0
      000D54 86 83            [24] 3498 	mov	dph,@r0
      000D56 78r00            [12] 3499 	mov	r0,#_seek_read
      000D58 79s00            [12] 3500 	mov	r1,#(_seek_read >> 8)
      000D5A 7As00            [12] 3501 	mov	r2,#(_seek_read >> 16)
      000D5C 12r00r00         [24] 3502 	lcall	__sdcc_banked_call
      000D5F E5 81            [12] 3503 	mov	a,sp
      000D61 24 F9            [12] 3504 	add	a,#0xf9
      000D63 F5 81            [12] 3505 	mov	sp,a
      000D65 D0 01            [24] 3506 	pop	ar1
      000D67 D0 02            [24] 3507 	pop	ar2
      000D69 D0 05            [24] 3508 	pop	ar5
      000D6B D0 06            [24] 3509 	pop	ar6
                                   3510 ;	../../../core/loader/elfloader.c:391: strs = strtable.sh_offset;
      000D6D 74 10            [12] 3511 	mov	a,#0x10
      000D6F 2E               [12] 3512 	add	a,r6
      000D70 F8               [12] 3513 	mov	r0,a
      000D71 C0 01            [24] 3514 	push	ar1
      000D73 E5 81            [12] 3515 	mov	a,sp
      000D75 24 DB            [12] 3516 	add	a,#0xdb
      000D77 F9               [12] 3517 	mov	r1,a
      000D78 E6               [12] 3518 	mov	a,@r0
      000D79 F7               [12] 3519 	mov	@r1,a
      000D7A 08               [12] 3520 	inc	r0
      000D7B E6               [12] 3521 	mov	a,@r0
      000D7C 09               [12] 3522 	inc	r1
      000D7D F7               [12] 3523 	mov	@r1,a
      000D7E D0 01            [24] 3524 	pop	ar1
                                   3525 ;	../../../core/loader/elfloader.c:414: rodatasize = rodatarelasize = symtabsize = strtabsize = 0;
      000D80 E5 81            [12] 3526 	mov	a,sp
      000D82 24 3C            [12] 3527 	add	a,#0x3c
      000D84 F8               [12] 3528 	mov	r0,a
      000D85 E4               [12] 3529 	clr	a
      000D86 F6               [12] 3530 	mov	@r0,a
      000D87 08               [12] 3531 	inc	r0
      000D88 F6               [12] 3532 	mov	@r0,a
      000D89 E5 81            [12] 3533 	mov	a,sp
      000D8B 24 FB            [12] 3534 	add	a,#0xfb
      000D8D F8               [12] 3535 	mov	r0,a
      000D8E E4               [12] 3536 	clr	a
      000D8F F6               [12] 3537 	mov	@r0,a
      000D90 08               [12] 3538 	inc	r0
      000D91 F6               [12] 3539 	mov	@r0,a
      000D92 E5 81            [12] 3540 	mov	a,sp
      000D94 24 3F            [12] 3541 	add	a,#0x3f
      000D96 F8               [12] 3542 	mov	r0,a
      000D97 E4               [12] 3543 	clr	a
      000D98 F6               [12] 3544 	mov	@r0,a
      000D99 08               [12] 3545 	inc	r0
      000D9A F6               [12] 3546 	mov	@r0,a
      000D9B E5 81            [12] 3547 	mov	a,sp
      000D9D 24 41            [12] 3548 	add	a,#0x41
      000D9F F8               [12] 3549 	mov	r0,a
      000DA0 E4               [12] 3550 	clr	a
      000DA1 F6               [12] 3551 	mov	@r0,a
      000DA2 08               [12] 3552 	inc	r0
      000DA3 F6               [12] 3553 	mov	@r0,a
      000DA4 E5 81            [12] 3554 	mov	a,sp
      000DA6 24 43            [12] 3555 	add	a,#0x43
      000DA8 F8               [12] 3556 	mov	r0,a
      000DA9 E4               [12] 3557 	clr	a
      000DAA F6               [12] 3558 	mov	@r0,a
      000DAB 08               [12] 3559 	inc	r0
      000DAC F6               [12] 3560 	mov	@r0,a
      000DAD E5 81            [12] 3561 	mov	a,sp
      000DAF 24 45            [12] 3562 	add	a,#0x45
      000DB1 F8               [12] 3563 	mov	r0,a
      000DB2 E4               [12] 3564 	clr	a
      000DB3 F6               [12] 3565 	mov	@r0,a
      000DB4 08               [12] 3566 	inc	r0
      000DB5 F6               [12] 3567 	mov	@r0,a
      000DB6 E5 81            [12] 3568 	mov	a,sp
      000DB8 24 47            [12] 3569 	add	a,#0x47
      000DBA F8               [12] 3570 	mov	r0,a
      000DBB E4               [12] 3571 	clr	a
      000DBC F6               [12] 3572 	mov	@r0,a
      000DBD 08               [12] 3573 	inc	r0
      000DBE F6               [12] 3574 	mov	@r0,a
      000DBF E5 81            [12] 3575 	mov	a,sp
      000DC1 24 F3            [12] 3576 	add	a,#0xf3
      000DC3 F8               [12] 3577 	mov	r0,a
      000DC4 E4               [12] 3578 	clr	a
      000DC5 F6               [12] 3579 	mov	@r0,a
      000DC6 08               [12] 3580 	inc	r0
      000DC7 F6               [12] 3581 	mov	@r0,a
                                   3582 ;	../../../core/loader/elfloader.c:416: bss.number = data.number = rodata.number = text.number = -1;
      000DC8 90r00r33         [24] 3583 	mov	dptr,#_text
      000DCB 14               [12] 3584 	dec	a
      000DCC F0               [24] 3585 	movx	@dptr,a
      000DCD 90r00r2D         [24] 3586 	mov	dptr,#_rodata
      000DD0 F0               [24] 3587 	movx	@dptr,a
      000DD1 90r00r27         [24] 3588 	mov	dptr,#_data
      000DD4 F0               [24] 3589 	movx	@dptr,a
      000DD5 90r00r21         [24] 3590 	mov	dptr,#_bss
      000DD8 F0               [24] 3591 	movx	@dptr,a
                                   3592 ;	../../../core/loader/elfloader.c:418: shdrptr = ehdr.e_shoff;
      000DD9 E5 81            [12] 3593 	mov	a,sp
      000DDB 24 DE            [12] 3594 	add	a,#0xde
      000DDD F8               [12] 3595 	mov	r0,a
      000DDE E7               [12] 3596 	mov	a,@r1
      000DDF F6               [12] 3597 	mov	@r0,a
      000DE0 09               [12] 3598 	inc	r1
      000DE1 E7               [12] 3599 	mov	a,@r1
      000DE2 08               [12] 3600 	inc	r0
      000DE3 F6               [12] 3601 	mov	@r0,a
                                   3602 ;	../../../core/loader/elfloader.c:419: for(i = 0; i < shdrnum; ++i) {
      000DE4 E5 81            [12] 3603 	mov	a,sp
      000DE6 24 49            [12] 3604 	add	a,#0x49
      000DE8 F8               [12] 3605 	mov	r0,a
      000DE9 E4               [12] 3606 	clr	a
      000DEA F6               [12] 3607 	mov	@r0,a
      000DEB 08               [12] 3608 	inc	r0
      000DEC F6               [12] 3609 	mov	@r0,a
      000DED E5 81            [12] 3610 	mov	a,sp
      000DEF 24 8C            [12] 3611 	add	a,#0x8c
      000DF1 F9               [12] 3612 	mov	r1,a
      000DF2 E5 81            [12] 3613 	mov	a,sp
      000DF4 24 4B            [12] 3614 	add	a,#0x4b
      000DF6 F8               [12] 3615 	mov	r0,a
      000DF7 E5 81            [12] 3616 	mov	a,sp
      000DF9 24 E0            [12] 3617 	add	a,#0xe0
      000DFB F6               [12] 3618 	mov	@r0,a
      000DFC 74 04            [12] 3619 	mov	a,#0x04
      000DFE 29               [12] 3620 	add	a,r1
      000DFF F8               [12] 3621 	mov	r0,a
      000E00 C0 00            [24] 3622 	push	ar0
      000E02 E5 81            [12] 3623 	mov	a,sp
      000E04 24 4A            [12] 3624 	add	a,#0x4a
      000E06 F8               [12] 3625 	mov	r0,a
      000E07 C0 01            [24] 3626 	push	ar1
      000E09 E5 81            [12] 3627 	mov	a,sp
      000E0B 24 4A            [12] 3628 	add	a,#0x4a
      000E0D F9               [12] 3629 	mov	r1,a
      000E0E E6               [12] 3630 	mov	a,@r0
      000E0F F7               [12] 3631 	mov	@r1,a
      000E10 D0 01            [24] 3632 	pop	ar1
      000E12 E5 81            [12] 3633 	mov	a,sp
      000E14 24 4A            [12] 3634 	add	a,#0x4a
      000E16 F8               [12] 3635 	mov	r0,a
      000E17 C0 01            [24] 3636 	push	ar1
      000E19 E5 81            [12] 3637 	mov	a,sp
      000E1B 24 4B            [12] 3638 	add	a,#0x4b
      000E1D F9               [12] 3639 	mov	r1,a
      000E1E E6               [12] 3640 	mov	a,@r0
      000E1F F7               [12] 3641 	mov	@r1,a
      000E20 D0 01            [24] 3642 	pop	ar1
      000E22 E5 81            [12] 3643 	mov	a,sp
      000E24 24 4A            [12] 3644 	add	a,#0x4a
      000E26 F8               [12] 3645 	mov	r0,a
      000E27 C0 01            [24] 3646 	push	ar1
      000E29 E5 81            [12] 3647 	mov	a,sp
      000E2B 24 4C            [12] 3648 	add	a,#0x4c
      000E2D F9               [12] 3649 	mov	r1,a
      000E2E E6               [12] 3650 	mov	a,@r0
      000E2F F7               [12] 3651 	mov	@r1,a
      000E30 D0 01            [24] 3652 	pop	ar1
      000E32 E5 81            [12] 3653 	mov	a,sp
      000E34 24 4A            [12] 3654 	add	a,#0x4a
      000E36 F8               [12] 3655 	mov	r0,a
      000E37 C0 01            [24] 3656 	push	ar1
      000E39 E5 81            [12] 3657 	mov	a,sp
      000E3B 24 4D            [12] 3658 	add	a,#0x4d
      000E3D F9               [12] 3659 	mov	r1,a
      000E3E E6               [12] 3660 	mov	a,@r0
      000E3F F7               [12] 3661 	mov	@r1,a
      000E40 D0 01            [24] 3662 	pop	ar1
      000E42 E5 81            [12] 3663 	mov	a,sp
      000E44 24 4A            [12] 3664 	add	a,#0x4a
      000E46 F8               [12] 3665 	mov	r0,a
      000E47 C0 01            [24] 3666 	push	ar1
      000E49 E5 81            [12] 3667 	mov	a,sp
      000E4B 24 4E            [12] 3668 	add	a,#0x4e
      000E4D F9               [12] 3669 	mov	r1,a
      000E4E E6               [12] 3670 	mov	a,@r0
      000E4F F7               [12] 3671 	mov	@r1,a
      000E50 D0 01            [24] 3672 	pop	ar1
      000E52 E5 81            [12] 3673 	mov	a,sp
      000E54 24 4A            [12] 3674 	add	a,#0x4a
      000E56 F8               [12] 3675 	mov	r0,a
      000E57 C0 01            [24] 3676 	push	ar1
      000E59 E5 81            [12] 3677 	mov	a,sp
      000E5B 24 4F            [12] 3678 	add	a,#0x4f
      000E5D F9               [12] 3679 	mov	r1,a
      000E5E E6               [12] 3680 	mov	a,@r0
      000E5F F7               [12] 3681 	mov	@r1,a
      000E60 D0 01            [24] 3682 	pop	ar1
      000E62 E5 81            [12] 3683 	mov	a,sp
      000E64 24 4A            [12] 3684 	add	a,#0x4a
      000E66 F8               [12] 3685 	mov	r0,a
      000E67 C0 01            [24] 3686 	push	ar1
      000E69 E5 81            [12] 3687 	mov	a,sp
      000E6B 24 50            [12] 3688 	add	a,#0x50
      000E6D F9               [12] 3689 	mov	r1,a
      000E6E E6               [12] 3690 	mov	a,@r0
      000E6F F7               [12] 3691 	mov	@r1,a
      000E70 D0 01            [24] 3692 	pop	ar1
      000E72 E5 81            [12] 3693 	mov	a,sp
      000E74 24 4A            [12] 3694 	add	a,#0x4a
      000E76 F8               [12] 3695 	mov	r0,a
      000E77 C0 01            [24] 3696 	push	ar1
      000E79 E5 81            [12] 3697 	mov	a,sp
      000E7B 24 51            [12] 3698 	add	a,#0x51
      000E7D F9               [12] 3699 	mov	r1,a
      000E7E E6               [12] 3700 	mov	a,@r0
      000E7F F7               [12] 3701 	mov	@r1,a
      000E80 D0 01            [24] 3702 	pop	ar1
      000E82 E5 81            [12] 3703 	mov	a,sp
      000E84 24 4A            [12] 3704 	add	a,#0x4a
      000E86 F8               [12] 3705 	mov	r0,a
      000E87 C0 01            [24] 3706 	push	ar1
      000E89 E5 81            [12] 3707 	mov	a,sp
      000E8B 24 52            [12] 3708 	add	a,#0x52
      000E8D F9               [12] 3709 	mov	r1,a
      000E8E E6               [12] 3710 	mov	a,@r0
      000E8F F7               [12] 3711 	mov	@r1,a
      000E90 D0 01            [24] 3712 	pop	ar1
      000E92 E5 81            [12] 3713 	mov	a,sp
      000E94 24 54            [12] 3714 	add	a,#0x54
      000E96 F8               [12] 3715 	mov	r0,a
      000E97 74 14            [12] 3716 	mov	a,#0x14
      000E99 29               [12] 3717 	add	a,r1
      000E9A F6               [12] 3718 	mov	@r0,a
      000E9B E5 81            [12] 3719 	mov	a,sp
      000E9D 24 4A            [12] 3720 	add	a,#0x4a
      000E9F F8               [12] 3721 	mov	r0,a
      000EA0 C0 01            [24] 3722 	push	ar1
      000EA2 E5 81            [12] 3723 	mov	a,sp
      000EA4 24 54            [12] 3724 	add	a,#0x54
      000EA6 F9               [12] 3725 	mov	r1,a
      000EA7 E6               [12] 3726 	mov	a,@r0
      000EA8 F7               [12] 3727 	mov	@r1,a
      000EA9 D0 01            [24] 3728 	pop	ar1
      000EAB E5 81            [12] 3729 	mov	a,sp
      000EAD 24 56            [12] 3730 	add	a,#0x56
      000EAF F8               [12] 3731 	mov	r0,a
      000EB0 74 10            [12] 3732 	mov	a,#0x10
      000EB2 29               [12] 3733 	add	a,r1
      000EB3 F6               [12] 3734 	mov	@r0,a
      000EB4 D0 00            [24] 3735 	pop	ar0
                                   3736 ;	../../../core/loader/elfloader.c:585: return ELFLOADER_NO_STARTPOINT;
      000EB6 D0 05            [24] 3737 	pop	ar5
      000EB8 D0 02            [24] 3738 	pop	ar2
                                   3739 ;	../../../core/loader/elfloader.c:419: for(i = 0; i < shdrnum; ++i) {
      000EBA                       3740 00205$:
      000EBA C0 00            [24] 3741 	push	ar0
      000EBC E5 81            [12] 3742 	mov	a,sp
      000EBE 24 4A            [12] 3743 	add	a,#0x4a
      000EC0 F8               [12] 3744 	mov	r0,a
      000EC1 86 06            [24] 3745 	mov	ar6,@r0
      000EC3 08               [12] 3746 	inc	r0
      000EC4 86 07            [24] 3747 	mov	ar7,@r0
      000EC6 E5 81            [12] 3748 	mov	a,sp
      000EC8 24 ED            [12] 3749 	add	a,#0xed
      000ECA F8               [12] 3750 	mov	r0,a
      000ECB C3               [12] 3751 	clr	c
      000ECC EE               [12] 3752 	mov	a,r6
      000ECD 96               [12] 3753 	subb	a,@r0
      000ECE EF               [12] 3754 	mov	a,r7
      000ECF 08               [12] 3755 	inc	r0
      000ED0 96               [12] 3756 	subb	a,@r0
      000ED1 D0 00            [24] 3757 	pop	ar0
      000ED3 40 03            [24] 3758 	jc	00336$
      000ED5 02r15rE3         [24] 3759 	ljmp	00150$
      000ED8                       3760 00336$:
                                   3761 ;	../../../core/loader/elfloader.c:421: seek_read(fd, shdrptr, (char *)&shdr, sizeof(shdr));
      000ED8 C0 02            [24] 3762 	push	ar2
      000EDA C0 05            [24] 3763 	push	ar5
      000EDC 89 07            [24] 3764 	mov	ar7,r1
      000EDE 7E 00            [12] 3765 	mov	r6,#0x00
      000EE0 7C 40            [12] 3766 	mov	r4,#0x40
      000EE2 C0 05            [24] 3767 	push	ar5
      000EE4 C0 02            [24] 3768 	push	ar2
      000EE6 C0 01            [24] 3769 	push	ar1
      000EE8 C0 00            [24] 3770 	push	ar0
      000EEA 74 28            [12] 3771 	mov	a,#0x28
      000EEC C0 E0            [24] 3772 	push	acc
      000EEE E4               [12] 3773 	clr	a
      000EEF C0 E0            [24] 3774 	push	acc
      000EF1 C0 07            [24] 3775 	push	ar7
      000EF3 C0 06            [24] 3776 	push	ar6
      000EF5 C0 04            [24] 3777 	push	ar4
      000EF7 85 00 F0         [24] 3778 	mov	b,ar0
      000EFA E5 81            [12] 3779 	mov	a,sp
      000EFC 24 D5            [12] 3780 	add	a,#0xd5
      000EFE F8               [12] 3781 	mov	r0,a
      000EFF E6               [12] 3782 	mov	a,@r0
      000F00 C0 E0            [24] 3783 	push	acc
      000F02 08               [12] 3784 	inc	r0
      000F03 E6               [12] 3785 	mov	a,@r0
      000F04 C0 E0            [24] 3786 	push	acc
      000F06 A8 F0            [24] 3787 	mov	r0,b
      000F08 C0 00            [24] 3788 	push	ar0
      000F0A E5 81            [12] 3789 	mov	a,sp
      000F0C 24 28            [12] 3790 	add	a,#0x28
      000F0E F8               [12] 3791 	mov	r0,a
      000F0F 86 82            [24] 3792 	mov	dpl,@r0
      000F11 08               [12] 3793 	inc	r0
      000F12 86 83            [24] 3794 	mov	dph,@r0
      000F14 D0 00            [24] 3795 	pop	ar0
      000F16 78r00            [12] 3796 	mov	r0,#_seek_read
      000F18 79s00            [12] 3797 	mov	r1,#(_seek_read >> 8)
      000F1A 7As00            [12] 3798 	mov	r2,#(_seek_read >> 16)
      000F1C 12r00r00         [24] 3799 	lcall	__sdcc_banked_call
      000F1F E5 81            [12] 3800 	mov	a,sp
      000F21 24 F9            [12] 3801 	add	a,#0xf9
      000F23 F5 81            [12] 3802 	mov	sp,a
      000F25 D0 00            [24] 3803 	pop	ar0
      000F27 D0 01            [24] 3804 	pop	ar1
      000F29 D0 02            [24] 3805 	pop	ar2
      000F2B D0 05            [24] 3806 	pop	ar5
                                   3807 ;	../../../core/loader/elfloader.c:424: nameptr = strs + shdr.sh_name;
      000F2D 87 06            [24] 3808 	mov	ar6,@r1
      000F2F 09               [12] 3809 	inc	r1
      000F30 87 07            [24] 3810 	mov	ar7,@r1
      000F32 19               [12] 3811 	dec	r1
      000F33 C0 00            [24] 3812 	push	ar0
      000F35 E5 81            [12] 3813 	mov	a,sp
      000F37 24 DB            [12] 3814 	add	a,#0xdb
      000F39 F8               [12] 3815 	mov	r0,a
      000F3A EE               [12] 3816 	mov	a,r6
      000F3B 26               [12] 3817 	add	a,@r0
      000F3C FE               [12] 3818 	mov	r6,a
      000F3D EF               [12] 3819 	mov	a,r7
      000F3E 08               [12] 3820 	inc	r0
      000F3F 36               [12] 3821 	addc	a,@r0
      000F40 FF               [12] 3822 	mov	r7,a
                                   3823 ;	../../../core/loader/elfloader.c:425: seek_read(fd, nameptr, name, sizeof(name));
      000F41 E5 81            [12] 3824 	mov	a,sp
      000F43 24 4A            [12] 3825 	add	a,#0x4a
      000F45 F8               [12] 3826 	mov	r0,a
      000F46 86 03            [24] 3827 	mov	ar3,@r0
      000F48 7C 00            [12] 3828 	mov	r4,#0x00
      000F4A 7D 40            [12] 3829 	mov	r5,#0x40
      000F4C D0 00            [24] 3830 	pop	ar0
      000F4E C0 05            [24] 3831 	push	ar5
      000F50 C0 02            [24] 3832 	push	ar2
      000F52 C0 01            [24] 3833 	push	ar1
      000F54 C0 00            [24] 3834 	push	ar0
      000F56 74 0C            [12] 3835 	mov	a,#0x0c
      000F58 C0 E0            [24] 3836 	push	acc
      000F5A E4               [12] 3837 	clr	a
      000F5B C0 E0            [24] 3838 	push	acc
      000F5D C0 03            [24] 3839 	push	ar3
      000F5F C0 04            [24] 3840 	push	ar4
      000F61 C0 05            [24] 3841 	push	ar5
      000F63 C0 06            [24] 3842 	push	ar6
      000F65 C0 07            [24] 3843 	push	ar7
      000F67 C0 00            [24] 3844 	push	ar0
      000F69 E5 81            [12] 3845 	mov	a,sp
      000F6B 24 28            [12] 3846 	add	a,#0x28
      000F6D F8               [12] 3847 	mov	r0,a
      000F6E 86 82            [24] 3848 	mov	dpl,@r0
      000F70 08               [12] 3849 	inc	r0
      000F71 86 83            [24] 3850 	mov	dph,@r0
      000F73 D0 00            [24] 3851 	pop	ar0
      000F75 78r00            [12] 3852 	mov	r0,#_seek_read
      000F77 79s00            [12] 3853 	mov	r1,#(_seek_read >> 8)
      000F79 7As00            [12] 3854 	mov	r2,#(_seek_read >> 16)
      000F7B 12r00r00         [24] 3855 	lcall	__sdcc_banked_call
      000F7E E5 81            [12] 3856 	mov	a,sp
      000F80 24 F9            [12] 3857 	add	a,#0xf9
      000F82 F5 81            [12] 3858 	mov	sp,a
      000F84 D0 00            [24] 3859 	pop	ar0
      000F86 D0 01            [24] 3860 	pop	ar1
      000F88 D0 02            [24] 3861 	pop	ar2
      000F8A D0 05            [24] 3862 	pop	ar5
                                   3863 ;	../../../core/loader/elfloader.c:435: if(shdr.sh_type == SHT_SYMTAB/*strncmp(name, ".symtab", 7) == 0*/) {
      000F8C 86 04            [24] 3864 	mov	ar4,@r0
      000F8E 08               [12] 3865 	inc	r0
      000F8F 86 05            [24] 3866 	mov	ar5,@r0
      000F91 08               [12] 3867 	inc	r0
      000F92 86 06            [24] 3868 	mov	ar6,@r0
      000F94 08               [12] 3869 	inc	r0
      000F95 86 07            [24] 3870 	mov	ar7,@r0
      000F97 18               [12] 3871 	dec	r0
      000F98 18               [12] 3872 	dec	r0
      000F99 18               [12] 3873 	dec	r0
      000F9A BC 02 0B         [24] 3874 	cjne	r4,#0x02,00337$
      000F9D BD 00 08         [24] 3875 	cjne	r5,#0x00,00337$
      000FA0 BE 00 05         [24] 3876 	cjne	r6,#0x00,00337$
      000FA3 BF 00 02         [24] 3877 	cjne	r7,#0x00,00337$
      000FA6 80 06            [24] 3878 	sjmp	00338$
      000FA8                       3879 00337$:
      000FA8 D0 05            [24] 3880 	pop	ar5
      000FAA D0 02            [24] 3881 	pop	ar2
      000FAC 80 39            [24] 3882 	sjmp	00148$
      000FAE                       3883 00338$:
      000FAE D0 05            [24] 3884 	pop	ar5
      000FB0 D0 02            [24] 3885 	pop	ar2
                                   3886 ;	../../../core/loader/elfloader.c:437: symtaboff = shdr.sh_offset;
      000FB2 C0 00            [24] 3887 	push	ar0
      000FB4 E5 81            [12] 3888 	mov	a,sp
      000FB6 24 58            [12] 3889 	add	a,#0x58
      000FB8 F8               [12] 3890 	mov	r0,a
      000FB9 C0 01            [24] 3891 	push	ar1
      000FBB E5 81            [12] 3892 	mov	a,sp
      000FBD 24 F9            [12] 3893 	add	a,#0xf9
      000FBF F9               [12] 3894 	mov	r1,a
      000FC0 86 00            [24] 3895 	mov	ar0,@r0
      000FC2 E6               [12] 3896 	mov	a,@r0
      000FC3 F7               [12] 3897 	mov	@r1,a
      000FC4 08               [12] 3898 	inc	r0
      000FC5 E6               [12] 3899 	mov	a,@r0
      000FC6 09               [12] 3900 	inc	r1
      000FC7 F7               [12] 3901 	mov	@r1,a
      000FC8 18               [12] 3902 	dec	r0
      000FC9 D0 01            [24] 3903 	pop	ar1
                                   3904 ;	../../../core/loader/elfloader.c:438: symtabsize = shdr.sh_size;
      000FCB E5 81            [12] 3905 	mov	a,sp
      000FCD 24 56            [12] 3906 	add	a,#0x56
      000FCF F8               [12] 3907 	mov	r0,a
      000FD0 C0 01            [24] 3908 	push	ar1
      000FD2 E5 81            [12] 3909 	mov	a,sp
      000FD4 24 FB            [12] 3910 	add	a,#0xfb
      000FD6 F9               [12] 3911 	mov	r1,a
      000FD7 86 00            [24] 3912 	mov	ar0,@r0
      000FD9 E6               [12] 3913 	mov	a,@r0
      000FDA F7               [12] 3914 	mov	@r1,a
      000FDB 08               [12] 3915 	inc	r0
      000FDC E6               [12] 3916 	mov	a,@r0
      000FDD 09               [12] 3917 	inc	r1
      000FDE F7               [12] 3918 	mov	@r1,a
      000FDF 18               [12] 3919 	dec	r0
      000FE0 D0 01            [24] 3920 	pop	ar1
      000FE2 D0 00            [24] 3921 	pop	ar0
      000FE4 02r15rBB         [24] 3922 	ljmp	00149$
      000FE7                       3923 00148$:
                                   3924 ;	../../../core/loader/elfloader.c:439: } else if(shdr.sh_type == SHT_STRTAB/*strncmp(name, ".strtab", 7) == 0*/) {
      000FE7 86 03            [24] 3925 	mov	ar3,@r0
      000FE9 08               [12] 3926 	inc	r0
      000FEA 86 04            [24] 3927 	mov	ar4,@r0
      000FEC 08               [12] 3928 	inc	r0
      000FED 86 06            [24] 3929 	mov	ar6,@r0
      000FEF 08               [12] 3930 	inc	r0
      000FF0 86 07            [24] 3931 	mov	ar7,@r0
      000FF2 18               [12] 3932 	dec	r0
      000FF3 18               [12] 3933 	dec	r0
      000FF4 18               [12] 3934 	dec	r0
      000FF5 BB 03 3E         [24] 3935 	cjne	r3,#0x03,00145$
      000FF8 BC 00 3B         [24] 3936 	cjne	r4,#0x00,00145$
      000FFB BE 00 38         [24] 3937 	cjne	r6,#0x00,00145$
      000FFE BF 00 35         [24] 3938 	cjne	r7,#0x00,00145$
                                   3939 ;	../../../core/loader/elfloader.c:441: strtaboff = shdr.sh_offset;
      001001 C0 00            [24] 3940 	push	ar0
      001003 E5 81            [12] 3941 	mov	a,sp
      001005 24 58            [12] 3942 	add	a,#0x58
      001007 F8               [12] 3943 	mov	r0,a
      001008 C0 01            [24] 3944 	push	ar1
      00100A E5 81            [12] 3945 	mov	a,sp
      00100C 24 FD            [12] 3946 	add	a,#0xfd
      00100E F9               [12] 3947 	mov	r1,a
      00100F 86 00            [24] 3948 	mov	ar0,@r0
      001011 E6               [12] 3949 	mov	a,@r0
      001012 F7               [12] 3950 	mov	@r1,a
      001013 08               [12] 3951 	inc	r0
      001014 E6               [12] 3952 	mov	a,@r0
      001015 09               [12] 3953 	inc	r1
      001016 F7               [12] 3954 	mov	@r1,a
      001017 18               [12] 3955 	dec	r0
      001018 D0 01            [24] 3956 	pop	ar1
                                   3957 ;	../../../core/loader/elfloader.c:442: strtabsize = shdr.sh_size;
      00101A E5 81            [12] 3958 	mov	a,sp
      00101C 24 56            [12] 3959 	add	a,#0x56
      00101E F8               [12] 3960 	mov	r0,a
      00101F C0 01            [24] 3961 	push	ar1
      001021 E5 81            [12] 3962 	mov	a,sp
      001023 24 3C            [12] 3963 	add	a,#0x3c
      001025 F9               [12] 3964 	mov	r1,a
      001026 86 00            [24] 3965 	mov	ar0,@r0
      001028 E6               [12] 3966 	mov	a,@r0
      001029 F7               [12] 3967 	mov	@r1,a
      00102A 08               [12] 3968 	inc	r0
      00102B E6               [12] 3969 	mov	a,@r0
      00102C 09               [12] 3970 	inc	r1
      00102D F7               [12] 3971 	mov	@r1,a
      00102E 18               [12] 3972 	dec	r0
      00102F D0 01            [24] 3973 	pop	ar1
      001031 D0 00            [24] 3974 	pop	ar0
      001033 02r15rBB         [24] 3975 	ljmp	00149$
      001036                       3976 00145$:
                                   3977 ;	../../../core/loader/elfloader.c:443: } else if(strncmp(name, ".text", 5) == 0) {
      001036 C0 00            [24] 3978 	push	ar0
      001038 E5 81            [12] 3979 	mov	a,sp
      00103A 24 4D            [12] 3980 	add	a,#0x4d
      00103C F8               [12] 3981 	mov	r0,a
      00103D 86 04            [24] 3982 	mov	ar4,@r0
      00103F 7E 00            [12] 3983 	mov	r6,#0x00
      001041 7F 40            [12] 3984 	mov	r7,#0x40
      001043 D0 00            [24] 3985 	pop	ar0
      001045 C0 05            [24] 3986 	push	ar5
      001047 C0 02            [24] 3987 	push	ar2
      001049 C0 01            [24] 3988 	push	ar1
      00104B C0 00            [24] 3989 	push	ar0
      00104D 74 05            [12] 3990 	mov	a,#0x05
      00104F C0 E0            [24] 3991 	push	acc
      001051 E4               [12] 3992 	clr	a
      001052 C0 E0            [24] 3993 	push	acc
      001054 74r1B            [12] 3994 	mov	a,#___str_1
      001056 C0 E0            [24] 3995 	push	acc
      001058 74s00            [12] 3996 	mov	a,#(___str_1 >> 8)
      00105A C0 E0            [24] 3997 	push	acc
      00105C 74 80            [12] 3998 	mov	a,#0x80
      00105E C0 E0            [24] 3999 	push	acc
      001060 8C 82            [24] 4000 	mov	dpl,r4
      001062 8E 83            [24] 4001 	mov	dph,r6
      001064 8F F0            [24] 4002 	mov	b,r7
      001066 78r00            [12] 4003 	mov	r0,#_strncmp
      001068 79s00            [12] 4004 	mov	r1,#(_strncmp >> 8)
      00106A 7As00            [12] 4005 	mov	r2,#(_strncmp >> 16)
      00106C 12r00r00         [24] 4006 	lcall	__sdcc_banked_call
      00106F AE 82            [24] 4007 	mov	r6,dpl
      001071 AF 83            [24] 4008 	mov	r7,dph
      001073 E5 81            [12] 4009 	mov	a,sp
      001075 24 FB            [12] 4010 	add	a,#0xfb
      001077 F5 81            [12] 4011 	mov	sp,a
      001079 D0 00            [24] 4012 	pop	ar0
      00107B D0 01            [24] 4013 	pop	ar1
      00107D D0 02            [24] 4014 	pop	ar2
      00107F D0 05            [24] 4015 	pop	ar5
      001081 EE               [12] 4016 	mov	a,r6
      001082 4F               [12] 4017 	orl	a,r7
      001083 70 4F            [24] 4018 	jnz	00142$
                                   4019 ;	../../../core/loader/elfloader.c:444: textoff = shdr.sh_offset;
      001085 C0 00            [24] 4020 	push	ar0
      001087 E5 81            [12] 4021 	mov	a,sp
      001089 24 58            [12] 4022 	add	a,#0x58
      00108B F8               [12] 4023 	mov	r0,a
      00108C C0 01            [24] 4024 	push	ar1
      00108E E5 81            [12] 4025 	mov	a,sp
      001090 24 F1            [12] 4026 	add	a,#0xf1
      001092 F9               [12] 4027 	mov	r1,a
      001093 86 00            [24] 4028 	mov	ar0,@r0
      001095 E6               [12] 4029 	mov	a,@r0
      001096 F7               [12] 4030 	mov	@r1,a
      001097 08               [12] 4031 	inc	r0
      001098 E6               [12] 4032 	mov	a,@r0
      001099 09               [12] 4033 	inc	r1
      00109A F7               [12] 4034 	mov	@r1,a
      00109B 18               [12] 4035 	dec	r0
      00109C D0 01            [24] 4036 	pop	ar1
                                   4037 ;	../../../core/loader/elfloader.c:445: textsize = shdr.sh_size;
      00109E E5 81            [12] 4038 	mov	a,sp
      0010A0 24 56            [12] 4039 	add	a,#0x56
      0010A2 F8               [12] 4040 	mov	r0,a
      0010A3 C0 01            [24] 4041 	push	ar1
      0010A5 E5 81            [12] 4042 	mov	a,sp
      0010A7 24 F3            [12] 4043 	add	a,#0xf3
      0010A9 F9               [12] 4044 	mov	r1,a
      0010AA 86 00            [24] 4045 	mov	ar0,@r0
      0010AC E6               [12] 4046 	mov	a,@r0
      0010AD F7               [12] 4047 	mov	@r1,a
      0010AE 08               [12] 4048 	inc	r0
      0010AF E6               [12] 4049 	mov	a,@r0
      0010B0 09               [12] 4050 	inc	r1
      0010B1 F7               [12] 4051 	mov	@r1,a
      0010B2 18               [12] 4052 	dec	r0
      0010B3 D0 01            [24] 4053 	pop	ar1
                                   4054 ;	../../../core/loader/elfloader.c:446: text.number = i;
      0010B5 E5 81            [12] 4055 	mov	a,sp
      0010B7 24 4A            [12] 4056 	add	a,#0x4a
      0010B9 F8               [12] 4057 	mov	r0,a
      0010BA 86 07            [24] 4058 	mov	ar7,@r0
      0010BC 90r00r33         [24] 4059 	mov	dptr,#_text
      0010BF EF               [12] 4060 	mov	a,r7
      0010C0 F0               [24] 4061 	movx	@dptr,a
                                   4062 ;	../../../core/loader/elfloader.c:447: text.offset = textoff;
      0010C1 90r00r34         [24] 4063 	mov	dptr,#(_text + 0x0001)
      0010C4 E5 81            [12] 4064 	mov	a,sp
      0010C6 24 F2            [12] 4065 	add	a,#0xf2
      0010C8 F8               [12] 4066 	mov	r0,a
      0010C9 E6               [12] 4067 	mov	a,@r0
      0010CA F0               [24] 4068 	movx	@dptr,a
      0010CB 08               [12] 4069 	inc	r0
      0010CC E6               [12] 4070 	mov	a,@r0
      0010CD A3               [24] 4071 	inc	dptr
      0010CE F0               [24] 4072 	movx	@dptr,a
      0010CF D0 00            [24] 4073 	pop	ar0
      0010D1 02r15rBB         [24] 4074 	ljmp	00149$
      0010D4                       4075 00142$:
                                   4076 ;	../../../core/loader/elfloader.c:448: } else if(strncmp(name, ".rel.text", 9) == 0) {
      0010D4 C0 00            [24] 4077 	push	ar0
      0010D6 E5 81            [12] 4078 	mov	a,sp
      0010D8 24 4E            [12] 4079 	add	a,#0x4e
      0010DA F8               [12] 4080 	mov	r0,a
      0010DB 86 04            [24] 4081 	mov	ar4,@r0
      0010DD 7E 00            [12] 4082 	mov	r6,#0x00
      0010DF 7F 40            [12] 4083 	mov	r7,#0x40
      0010E1 D0 00            [24] 4084 	pop	ar0
      0010E3 C0 05            [24] 4085 	push	ar5
      0010E5 C0 02            [24] 4086 	push	ar2
      0010E7 C0 01            [24] 4087 	push	ar1
      0010E9 C0 00            [24] 4088 	push	ar0
      0010EB 74 09            [12] 4089 	mov	a,#0x09
      0010ED C0 E0            [24] 4090 	push	acc
      0010EF E4               [12] 4091 	clr	a
      0010F0 C0 E0            [24] 4092 	push	acc
      0010F2 74r21            [12] 4093 	mov	a,#___str_2
      0010F4 C0 E0            [24] 4094 	push	acc
      0010F6 74s00            [12] 4095 	mov	a,#(___str_2 >> 8)
      0010F8 C0 E0            [24] 4096 	push	acc
      0010FA 74 80            [12] 4097 	mov	a,#0x80
      0010FC C0 E0            [24] 4098 	push	acc
      0010FE 8C 82            [24] 4099 	mov	dpl,r4
      001100 8E 83            [24] 4100 	mov	dph,r6
      001102 8F F0            [24] 4101 	mov	b,r7
      001104 78r00            [12] 4102 	mov	r0,#_strncmp
      001106 79s00            [12] 4103 	mov	r1,#(_strncmp >> 8)
      001108 7As00            [12] 4104 	mov	r2,#(_strncmp >> 16)
      00110A 12r00r00         [24] 4105 	lcall	__sdcc_banked_call
      00110D AE 82            [24] 4106 	mov	r6,dpl
      00110F AF 83            [24] 4107 	mov	r7,dph
      001111 E5 81            [12] 4108 	mov	a,sp
      001113 24 FB            [12] 4109 	add	a,#0xfb
      001115 F5 81            [12] 4110 	mov	sp,a
      001117 D0 00            [24] 4111 	pop	ar0
      001119 D0 01            [24] 4112 	pop	ar1
      00111B D0 02            [24] 4113 	pop	ar2
      00111D D0 05            [24] 4114 	pop	ar5
      00111F EE               [12] 4115 	mov	a,r6
      001120 4F               [12] 4116 	orl	a,r7
      001121 70 32            [24] 4117 	jnz	00139$
                                   4118 ;	../../../core/loader/elfloader.c:449: using_relas = 0;
      001123 C0 00            [24] 4119 	push	ar0
      001125 E5 81            [12] 4120 	mov	a,sp
      001127 24 F1            [12] 4121 	add	a,#0xf1
      001129 F8               [12] 4122 	mov	r0,a
      00112A 76 00            [12] 4123 	mov	@r0,#0x00
                                   4124 ;	../../../core/loader/elfloader.c:450: textrelaoff = shdr.sh_offset;
      00112C E5 81            [12] 4125 	mov	a,sp
      00112E 24 58            [12] 4126 	add	a,#0x58
      001130 F8               [12] 4127 	mov	r0,a
      001131 86 00            [24] 4128 	mov	ar0,@r0
      001133 86 02            [24] 4129 	mov	ar2,@r0
      001135 08               [12] 4130 	inc	r0
      001136 86 05            [24] 4131 	mov	ar5,@r0
      001138 18               [12] 4132 	dec	r0
                                   4133 ;	../../../core/loader/elfloader.c:451: textrelasize = shdr.sh_size;
      001139 E5 81            [12] 4134 	mov	a,sp
      00113B 24 56            [12] 4135 	add	a,#0x56
      00113D F8               [12] 4136 	mov	r0,a
      00113E C0 01            [24] 4137 	push	ar1
      001140 E5 81            [12] 4138 	mov	a,sp
      001142 24 47            [12] 4139 	add	a,#0x47
      001144 F9               [12] 4140 	mov	r1,a
      001145 86 00            [24] 4141 	mov	ar0,@r0
      001147 E6               [12] 4142 	mov	a,@r0
      001148 F7               [12] 4143 	mov	@r1,a
      001149 08               [12] 4144 	inc	r0
      00114A E6               [12] 4145 	mov	a,@r0
      00114B 09               [12] 4146 	inc	r1
      00114C F7               [12] 4147 	mov	@r1,a
      00114D 18               [12] 4148 	dec	r0
      00114E D0 01            [24] 4149 	pop	ar1
      001150 D0 00            [24] 4150 	pop	ar0
      001152 02r15rBB         [24] 4151 	ljmp	00149$
      001155                       4152 00139$:
                                   4153 ;	../../../core/loader/elfloader.c:452: } else if(strncmp(name, ".rela.text", 10) == 0) {
      001155 C0 00            [24] 4154 	push	ar0
      001157 E5 81            [12] 4155 	mov	a,sp
      001159 24 4F            [12] 4156 	add	a,#0x4f
      00115B F8               [12] 4157 	mov	r0,a
      00115C 86 04            [24] 4158 	mov	ar4,@r0
      00115E 7E 00            [12] 4159 	mov	r6,#0x00
      001160 7F 40            [12] 4160 	mov	r7,#0x40
      001162 D0 00            [24] 4161 	pop	ar0
      001164 C0 05            [24] 4162 	push	ar5
      001166 C0 02            [24] 4163 	push	ar2
      001168 C0 01            [24] 4164 	push	ar1
      00116A C0 00            [24] 4165 	push	ar0
      00116C 74 0A            [12] 4166 	mov	a,#0x0a
      00116E C0 E0            [24] 4167 	push	acc
      001170 E4               [12] 4168 	clr	a
      001171 C0 E0            [24] 4169 	push	acc
      001173 74r2B            [12] 4170 	mov	a,#___str_3
      001175 C0 E0            [24] 4171 	push	acc
      001177 74s00            [12] 4172 	mov	a,#(___str_3 >> 8)
      001179 C0 E0            [24] 4173 	push	acc
      00117B 74 80            [12] 4174 	mov	a,#0x80
      00117D C0 E0            [24] 4175 	push	acc
      00117F 8C 82            [24] 4176 	mov	dpl,r4
      001181 8E 83            [24] 4177 	mov	dph,r6
      001183 8F F0            [24] 4178 	mov	b,r7
      001185 78r00            [12] 4179 	mov	r0,#_strncmp
      001187 79s00            [12] 4180 	mov	r1,#(_strncmp >> 8)
      001189 7As00            [12] 4181 	mov	r2,#(_strncmp >> 16)
      00118B 12r00r00         [24] 4182 	lcall	__sdcc_banked_call
      00118E AE 82            [24] 4183 	mov	r6,dpl
      001190 AF 83            [24] 4184 	mov	r7,dph
      001192 E5 81            [12] 4185 	mov	a,sp
      001194 24 FB            [12] 4186 	add	a,#0xfb
      001196 F5 81            [12] 4187 	mov	sp,a
      001198 D0 00            [24] 4188 	pop	ar0
      00119A D0 01            [24] 4189 	pop	ar1
      00119C D0 02            [24] 4190 	pop	ar2
      00119E D0 05            [24] 4191 	pop	ar5
      0011A0 EE               [12] 4192 	mov	a,r6
      0011A1 4F               [12] 4193 	orl	a,r7
      0011A2 70 32            [24] 4194 	jnz	00136$
                                   4195 ;	../../../core/loader/elfloader.c:453: using_relas = 1;
      0011A4 C0 00            [24] 4196 	push	ar0
      0011A6 E5 81            [12] 4197 	mov	a,sp
      0011A8 24 F1            [12] 4198 	add	a,#0xf1
      0011AA F8               [12] 4199 	mov	r0,a
      0011AB 76 01            [12] 4200 	mov	@r0,#0x01
                                   4201 ;	../../../core/loader/elfloader.c:454: textrelaoff = shdr.sh_offset;
      0011AD E5 81            [12] 4202 	mov	a,sp
      0011AF 24 58            [12] 4203 	add	a,#0x58
      0011B1 F8               [12] 4204 	mov	r0,a
      0011B2 86 00            [24] 4205 	mov	ar0,@r0
      0011B4 86 02            [24] 4206 	mov	ar2,@r0
      0011B6 08               [12] 4207 	inc	r0
      0011B7 86 05            [24] 4208 	mov	ar5,@r0
      0011B9 18               [12] 4209 	dec	r0
                                   4210 ;	../../../core/loader/elfloader.c:455: textrelasize = shdr.sh_size;
      0011BA E5 81            [12] 4211 	mov	a,sp
      0011BC 24 56            [12] 4212 	add	a,#0x56
      0011BE F8               [12] 4213 	mov	r0,a
      0011BF C0 01            [24] 4214 	push	ar1
      0011C1 E5 81            [12] 4215 	mov	a,sp
      0011C3 24 47            [12] 4216 	add	a,#0x47
      0011C5 F9               [12] 4217 	mov	r1,a
      0011C6 86 00            [24] 4218 	mov	ar0,@r0
      0011C8 E6               [12] 4219 	mov	a,@r0
      0011C9 F7               [12] 4220 	mov	@r1,a
      0011CA 08               [12] 4221 	inc	r0
      0011CB E6               [12] 4222 	mov	a,@r0
      0011CC 09               [12] 4223 	inc	r1
      0011CD F7               [12] 4224 	mov	@r1,a
      0011CE 18               [12] 4225 	dec	r0
      0011CF D0 01            [24] 4226 	pop	ar1
      0011D1 D0 00            [24] 4227 	pop	ar0
      0011D3 02r15rBB         [24] 4228 	ljmp	00149$
      0011D6                       4229 00136$:
                                   4230 ;	../../../core/loader/elfloader.c:456: } else if(strncmp(name, ".data", 5) == 0) {
      0011D6 C0 00            [24] 4231 	push	ar0
      0011D8 E5 81            [12] 4232 	mov	a,sp
      0011DA 24 50            [12] 4233 	add	a,#0x50
      0011DC F8               [12] 4234 	mov	r0,a
      0011DD 86 04            [24] 4235 	mov	ar4,@r0
      0011DF 7E 00            [12] 4236 	mov	r6,#0x00
      0011E1 7F 40            [12] 4237 	mov	r7,#0x40
      0011E3 D0 00            [24] 4238 	pop	ar0
      0011E5 C0 05            [24] 4239 	push	ar5
      0011E7 C0 02            [24] 4240 	push	ar2
      0011E9 C0 01            [24] 4241 	push	ar1
      0011EB C0 00            [24] 4242 	push	ar0
      0011ED 74 05            [12] 4243 	mov	a,#0x05
      0011EF C0 E0            [24] 4244 	push	acc
      0011F1 E4               [12] 4245 	clr	a
      0011F2 C0 E0            [24] 4246 	push	acc
      0011F4 74r36            [12] 4247 	mov	a,#___str_4
      0011F6 C0 E0            [24] 4248 	push	acc
      0011F8 74s00            [12] 4249 	mov	a,#(___str_4 >> 8)
      0011FA C0 E0            [24] 4250 	push	acc
      0011FC 74 80            [12] 4251 	mov	a,#0x80
      0011FE C0 E0            [24] 4252 	push	acc
      001200 8C 82            [24] 4253 	mov	dpl,r4
      001202 8E 83            [24] 4254 	mov	dph,r6
      001204 8F F0            [24] 4255 	mov	b,r7
      001206 78r00            [12] 4256 	mov	r0,#_strncmp
      001208 79s00            [12] 4257 	mov	r1,#(_strncmp >> 8)
      00120A 7As00            [12] 4258 	mov	r2,#(_strncmp >> 16)
      00120C 12r00r00         [24] 4259 	lcall	__sdcc_banked_call
      00120F AE 82            [24] 4260 	mov	r6,dpl
      001211 AF 83            [24] 4261 	mov	r7,dph
      001213 E5 81            [12] 4262 	mov	a,sp
      001215 24 FB            [12] 4263 	add	a,#0xfb
      001217 F5 81            [12] 4264 	mov	sp,a
      001219 D0 00            [24] 4265 	pop	ar0
      00121B D0 01            [24] 4266 	pop	ar1
      00121D D0 02            [24] 4267 	pop	ar2
      00121F D0 05            [24] 4268 	pop	ar5
      001221 EE               [12] 4269 	mov	a,r6
      001222 4F               [12] 4270 	orl	a,r7
      001223 70 4F            [24] 4271 	jnz	00133$
                                   4272 ;	../../../core/loader/elfloader.c:457: dataoff = shdr.sh_offset;
      001225 C0 00            [24] 4273 	push	ar0
      001227 E5 81            [12] 4274 	mov	a,sp
      001229 24 58            [12] 4275 	add	a,#0x58
      00122B F8               [12] 4276 	mov	r0,a
      00122C C0 01            [24] 4277 	push	ar1
      00122E E5 81            [12] 4278 	mov	a,sp
      001230 24 F5            [12] 4279 	add	a,#0xf5
      001232 F9               [12] 4280 	mov	r1,a
      001233 86 00            [24] 4281 	mov	ar0,@r0
      001235 E6               [12] 4282 	mov	a,@r0
      001236 F7               [12] 4283 	mov	@r1,a
      001237 08               [12] 4284 	inc	r0
      001238 E6               [12] 4285 	mov	a,@r0
      001239 09               [12] 4286 	inc	r1
      00123A F7               [12] 4287 	mov	@r1,a
      00123B 18               [12] 4288 	dec	r0
      00123C D0 01            [24] 4289 	pop	ar1
                                   4290 ;	../../../core/loader/elfloader.c:458: datasize = shdr.sh_size;
      00123E E5 81            [12] 4291 	mov	a,sp
      001240 24 56            [12] 4292 	add	a,#0x56
      001242 F8               [12] 4293 	mov	r0,a
      001243 C0 01            [24] 4294 	push	ar1
      001245 E5 81            [12] 4295 	mov	a,sp
      001247 24 45            [12] 4296 	add	a,#0x45
      001249 F9               [12] 4297 	mov	r1,a
      00124A 86 00            [24] 4298 	mov	ar0,@r0
      00124C E6               [12] 4299 	mov	a,@r0
      00124D F7               [12] 4300 	mov	@r1,a
      00124E 08               [12] 4301 	inc	r0
      00124F E6               [12] 4302 	mov	a,@r0
      001250 09               [12] 4303 	inc	r1
      001251 F7               [12] 4304 	mov	@r1,a
      001252 18               [12] 4305 	dec	r0
      001253 D0 01            [24] 4306 	pop	ar1
                                   4307 ;	../../../core/loader/elfloader.c:459: data.number = i;
      001255 E5 81            [12] 4308 	mov	a,sp
      001257 24 4A            [12] 4309 	add	a,#0x4a
      001259 F8               [12] 4310 	mov	r0,a
      00125A 86 07            [24] 4311 	mov	ar7,@r0
      00125C 90r00r27         [24] 4312 	mov	dptr,#_data
      00125F EF               [12] 4313 	mov	a,r7
      001260 F0               [24] 4314 	movx	@dptr,a
                                   4315 ;	../../../core/loader/elfloader.c:460: data.offset = dataoff;
      001261 90r00r28         [24] 4316 	mov	dptr,#(_data + 0x0001)
      001264 E5 81            [12] 4317 	mov	a,sp
      001266 24 F6            [12] 4318 	add	a,#0xf6
      001268 F8               [12] 4319 	mov	r0,a
      001269 E6               [12] 4320 	mov	a,@r0
      00126A F0               [24] 4321 	movx	@dptr,a
      00126B 08               [12] 4322 	inc	r0
      00126C E6               [12] 4323 	mov	a,@r0
      00126D A3               [24] 4324 	inc	dptr
      00126E F0               [24] 4325 	movx	@dptr,a
      00126F D0 00            [24] 4326 	pop	ar0
      001271 02r15rBB         [24] 4327 	ljmp	00149$
      001274                       4328 00133$:
                                   4329 ;	../../../core/loader/elfloader.c:461: } else if(strncmp(name, ".rodata", 7) == 0) {
      001274 C0 00            [24] 4330 	push	ar0
      001276 E5 81            [12] 4331 	mov	a,sp
      001278 24 51            [12] 4332 	add	a,#0x51
      00127A F8               [12] 4333 	mov	r0,a
      00127B 86 04            [24] 4334 	mov	ar4,@r0
      00127D 7E 00            [12] 4335 	mov	r6,#0x00
      00127F 7F 40            [12] 4336 	mov	r7,#0x40
      001281 D0 00            [24] 4337 	pop	ar0
      001283 C0 05            [24] 4338 	push	ar5
      001285 C0 02            [24] 4339 	push	ar2
      001287 C0 01            [24] 4340 	push	ar1
      001289 C0 00            [24] 4341 	push	ar0
      00128B 74 07            [12] 4342 	mov	a,#0x07
      00128D C0 E0            [24] 4343 	push	acc
      00128F E4               [12] 4344 	clr	a
      001290 C0 E0            [24] 4345 	push	acc
      001292 74r3C            [12] 4346 	mov	a,#___str_5
      001294 C0 E0            [24] 4347 	push	acc
      001296 74s00            [12] 4348 	mov	a,#(___str_5 >> 8)
      001298 C0 E0            [24] 4349 	push	acc
      00129A 74 80            [12] 4350 	mov	a,#0x80
      00129C C0 E0            [24] 4351 	push	acc
      00129E 8C 82            [24] 4352 	mov	dpl,r4
      0012A0 8E 83            [24] 4353 	mov	dph,r6
      0012A2 8F F0            [24] 4354 	mov	b,r7
      0012A4 78r00            [12] 4355 	mov	r0,#_strncmp
      0012A6 79s00            [12] 4356 	mov	r1,#(_strncmp >> 8)
      0012A8 7As00            [12] 4357 	mov	r2,#(_strncmp >> 16)
      0012AA 12r00r00         [24] 4358 	lcall	__sdcc_banked_call
      0012AD AE 82            [24] 4359 	mov	r6,dpl
      0012AF AF 83            [24] 4360 	mov	r7,dph
      0012B1 E5 81            [12] 4361 	mov	a,sp
      0012B3 24 FB            [12] 4362 	add	a,#0xfb
      0012B5 F5 81            [12] 4363 	mov	sp,a
      0012B7 D0 00            [24] 4364 	pop	ar0
      0012B9 D0 01            [24] 4365 	pop	ar1
      0012BB D0 02            [24] 4366 	pop	ar2
      0012BD D0 05            [24] 4367 	pop	ar5
      0012BF EE               [12] 4368 	mov	a,r6
      0012C0 4F               [12] 4369 	orl	a,r7
      0012C1 70 4F            [24] 4370 	jnz	00130$
                                   4371 ;	../../../core/loader/elfloader.c:463: rodataoff = shdr.sh_offset;
      0012C3 C0 00            [24] 4372 	push	ar0
      0012C5 E5 81            [12] 4373 	mov	a,sp
      0012C7 24 58            [12] 4374 	add	a,#0x58
      0012C9 F8               [12] 4375 	mov	r0,a
      0012CA C0 01            [24] 4376 	push	ar1
      0012CC E5 81            [12] 4377 	mov	a,sp
      0012CE 24 F7            [12] 4378 	add	a,#0xf7
      0012D0 F9               [12] 4379 	mov	r1,a
      0012D1 86 00            [24] 4380 	mov	ar0,@r0
      0012D3 E6               [12] 4381 	mov	a,@r0
      0012D4 F7               [12] 4382 	mov	@r1,a
      0012D5 08               [12] 4383 	inc	r0
      0012D6 E6               [12] 4384 	mov	a,@r0
      0012D7 09               [12] 4385 	inc	r1
      0012D8 F7               [12] 4386 	mov	@r1,a
      0012D9 18               [12] 4387 	dec	r0
      0012DA D0 01            [24] 4388 	pop	ar1
                                   4389 ;	../../../core/loader/elfloader.c:464: rodatasize = shdr.sh_size;
      0012DC E5 81            [12] 4390 	mov	a,sp
      0012DE 24 56            [12] 4391 	add	a,#0x56
      0012E0 F8               [12] 4392 	mov	r0,a
      0012E1 C0 01            [24] 4393 	push	ar1
      0012E3 E5 81            [12] 4394 	mov	a,sp
      0012E5 24 41            [12] 4395 	add	a,#0x41
      0012E7 F9               [12] 4396 	mov	r1,a
      0012E8 86 00            [24] 4397 	mov	ar0,@r0
      0012EA E6               [12] 4398 	mov	a,@r0
      0012EB F7               [12] 4399 	mov	@r1,a
      0012EC 08               [12] 4400 	inc	r0
      0012ED E6               [12] 4401 	mov	a,@r0
      0012EE 09               [12] 4402 	inc	r1
      0012EF F7               [12] 4403 	mov	@r1,a
      0012F0 18               [12] 4404 	dec	r0
      0012F1 D0 01            [24] 4405 	pop	ar1
                                   4406 ;	../../../core/loader/elfloader.c:465: rodata.number = i;
      0012F3 E5 81            [12] 4407 	mov	a,sp
      0012F5 24 4A            [12] 4408 	add	a,#0x4a
      0012F7 F8               [12] 4409 	mov	r0,a
      0012F8 86 07            [24] 4410 	mov	ar7,@r0
      0012FA 90r00r2D         [24] 4411 	mov	dptr,#_rodata
      0012FD EF               [12] 4412 	mov	a,r7
      0012FE F0               [24] 4413 	movx	@dptr,a
                                   4414 ;	../../../core/loader/elfloader.c:466: rodata.offset = rodataoff;
      0012FF 90r00r2E         [24] 4415 	mov	dptr,#(_rodata + 0x0001)
      001302 E5 81            [12] 4416 	mov	a,sp
      001304 24 F8            [12] 4417 	add	a,#0xf8
      001306 F8               [12] 4418 	mov	r0,a
      001307 E6               [12] 4419 	mov	a,@r0
      001308 F0               [24] 4420 	movx	@dptr,a
      001309 08               [12] 4421 	inc	r0
      00130A E6               [12] 4422 	mov	a,@r0
      00130B A3               [24] 4423 	inc	dptr
      00130C F0               [24] 4424 	movx	@dptr,a
      00130D D0 00            [24] 4425 	pop	ar0
      00130F 02r15rBB         [24] 4426 	ljmp	00149$
      001312                       4427 00130$:
                                   4428 ;	../../../core/loader/elfloader.c:467: } else if(strncmp(name, ".rel.rodata", 11) == 0) {
      001312 C0 00            [24] 4429 	push	ar0
      001314 E5 81            [12] 4430 	mov	a,sp
      001316 24 52            [12] 4431 	add	a,#0x52
      001318 F8               [12] 4432 	mov	r0,a
      001319 86 04            [24] 4433 	mov	ar4,@r0
      00131B 7E 00            [12] 4434 	mov	r6,#0x00
      00131D 7F 40            [12] 4435 	mov	r7,#0x40
      00131F D0 00            [24] 4436 	pop	ar0
      001321 C0 05            [24] 4437 	push	ar5
      001323 C0 02            [24] 4438 	push	ar2
      001325 C0 01            [24] 4439 	push	ar1
      001327 C0 00            [24] 4440 	push	ar0
      001329 74 0B            [12] 4441 	mov	a,#0x0b
      00132B C0 E0            [24] 4442 	push	acc
      00132D E4               [12] 4443 	clr	a
      00132E C0 E0            [24] 4444 	push	acc
      001330 74r44            [12] 4445 	mov	a,#___str_6
      001332 C0 E0            [24] 4446 	push	acc
      001334 74s00            [12] 4447 	mov	a,#(___str_6 >> 8)
      001336 C0 E0            [24] 4448 	push	acc
      001338 74 80            [12] 4449 	mov	a,#0x80
      00133A C0 E0            [24] 4450 	push	acc
      00133C 8C 82            [24] 4451 	mov	dpl,r4
      00133E 8E 83            [24] 4452 	mov	dph,r6
      001340 8F F0            [24] 4453 	mov	b,r7
      001342 78r00            [12] 4454 	mov	r0,#_strncmp
      001344 79s00            [12] 4455 	mov	r1,#(_strncmp >> 8)
      001346 7As00            [12] 4456 	mov	r2,#(_strncmp >> 16)
      001348 12r00r00         [24] 4457 	lcall	__sdcc_banked_call
      00134B AE 82            [24] 4458 	mov	r6,dpl
      00134D AF 83            [24] 4459 	mov	r7,dph
      00134F E5 81            [12] 4460 	mov	a,sp
      001351 24 FB            [12] 4461 	add	a,#0xfb
      001353 F5 81            [12] 4462 	mov	sp,a
      001355 D0 00            [24] 4463 	pop	ar0
      001357 D0 01            [24] 4464 	pop	ar1
      001359 D0 02            [24] 4465 	pop	ar2
      00135B D0 05            [24] 4466 	pop	ar5
      00135D EE               [12] 4467 	mov	a,r6
      00135E 4F               [12] 4468 	orl	a,r7
      00135F 70 3C            [24] 4469 	jnz	00127$
                                   4470 ;	../../../core/loader/elfloader.c:469: using_relas = 0;
      001361 C0 00            [24] 4471 	push	ar0
      001363 E5 81            [12] 4472 	mov	a,sp
      001365 24 F1            [12] 4473 	add	a,#0xf1
      001367 F8               [12] 4474 	mov	r0,a
      001368 76 00            [12] 4475 	mov	@r0,#0x00
                                   4476 ;	../../../core/loader/elfloader.c:470: rodatarelaoff = shdr.sh_offset;
      00136A E5 81            [12] 4477 	mov	a,sp
      00136C 24 58            [12] 4478 	add	a,#0x58
      00136E F8               [12] 4479 	mov	r0,a
      00136F C0 01            [24] 4480 	push	ar1
      001371 E5 81            [12] 4481 	mov	a,sp
      001373 24 38            [12] 4482 	add	a,#0x38
      001375 F9               [12] 4483 	mov	r1,a
      001376 86 00            [24] 4484 	mov	ar0,@r0
      001378 E6               [12] 4485 	mov	a,@r0
      001379 F7               [12] 4486 	mov	@r1,a
      00137A 08               [12] 4487 	inc	r0
      00137B E6               [12] 4488 	mov	a,@r0
      00137C 09               [12] 4489 	inc	r1
      00137D F7               [12] 4490 	mov	@r1,a
      00137E 18               [12] 4491 	dec	r0
      00137F D0 01            [24] 4492 	pop	ar1
                                   4493 ;	../../../core/loader/elfloader.c:471: rodatarelasize = shdr.sh_size;
      001381 E5 81            [12] 4494 	mov	a,sp
      001383 24 56            [12] 4495 	add	a,#0x56
      001385 F8               [12] 4496 	mov	r0,a
      001386 C0 01            [24] 4497 	push	ar1
      001388 E5 81            [12] 4498 	mov	a,sp
      00138A 24 3F            [12] 4499 	add	a,#0x3f
      00138C F9               [12] 4500 	mov	r1,a
      00138D 86 00            [24] 4501 	mov	ar0,@r0
      00138F E6               [12] 4502 	mov	a,@r0
      001390 F7               [12] 4503 	mov	@r1,a
      001391 08               [12] 4504 	inc	r0
      001392 E6               [12] 4505 	mov	a,@r0
      001393 09               [12] 4506 	inc	r1
      001394 F7               [12] 4507 	mov	@r1,a
      001395 18               [12] 4508 	dec	r0
      001396 D0 01            [24] 4509 	pop	ar1
      001398 D0 00            [24] 4510 	pop	ar0
      00139A 02r15rBB         [24] 4511 	ljmp	00149$
      00139D                       4512 00127$:
                                   4513 ;	../../../core/loader/elfloader.c:472: } else if(strncmp(name, ".rela.rodata", 12) == 0) {
      00139D C0 00            [24] 4514 	push	ar0
      00139F E5 81            [12] 4515 	mov	a,sp
      0013A1 24 53            [12] 4516 	add	a,#0x53
      0013A3 F8               [12] 4517 	mov	r0,a
      0013A4 86 04            [24] 4518 	mov	ar4,@r0
      0013A6 7E 00            [12] 4519 	mov	r6,#0x00
      0013A8 7F 40            [12] 4520 	mov	r7,#0x40
      0013AA D0 00            [24] 4521 	pop	ar0
      0013AC C0 05            [24] 4522 	push	ar5
      0013AE C0 02            [24] 4523 	push	ar2
      0013B0 C0 01            [24] 4524 	push	ar1
      0013B2 C0 00            [24] 4525 	push	ar0
      0013B4 74 0C            [12] 4526 	mov	a,#0x0c
      0013B6 C0 E0            [24] 4527 	push	acc
      0013B8 E4               [12] 4528 	clr	a
      0013B9 C0 E0            [24] 4529 	push	acc
      0013BB 74r50            [12] 4530 	mov	a,#___str_7
      0013BD C0 E0            [24] 4531 	push	acc
      0013BF 74s00            [12] 4532 	mov	a,#(___str_7 >> 8)
      0013C1 C0 E0            [24] 4533 	push	acc
      0013C3 74 80            [12] 4534 	mov	a,#0x80
      0013C5 C0 E0            [24] 4535 	push	acc
      0013C7 8C 82            [24] 4536 	mov	dpl,r4
      0013C9 8E 83            [24] 4537 	mov	dph,r6
      0013CB 8F F0            [24] 4538 	mov	b,r7
      0013CD 78r00            [12] 4539 	mov	r0,#_strncmp
      0013CF 79s00            [12] 4540 	mov	r1,#(_strncmp >> 8)
      0013D1 7As00            [12] 4541 	mov	r2,#(_strncmp >> 16)
      0013D3 12r00r00         [24] 4542 	lcall	__sdcc_banked_call
      0013D6 AE 82            [24] 4543 	mov	r6,dpl
      0013D8 AF 83            [24] 4544 	mov	r7,dph
      0013DA E5 81            [12] 4545 	mov	a,sp
      0013DC 24 FB            [12] 4546 	add	a,#0xfb
      0013DE F5 81            [12] 4547 	mov	sp,a
      0013E0 D0 00            [24] 4548 	pop	ar0
      0013E2 D0 01            [24] 4549 	pop	ar1
      0013E4 D0 02            [24] 4550 	pop	ar2
      0013E6 D0 05            [24] 4551 	pop	ar5
      0013E8 EE               [12] 4552 	mov	a,r6
      0013E9 4F               [12] 4553 	orl	a,r7
      0013EA 70 3C            [24] 4554 	jnz	00124$
                                   4555 ;	../../../core/loader/elfloader.c:473: using_relas = 1;
      0013EC C0 00            [24] 4556 	push	ar0
      0013EE E5 81            [12] 4557 	mov	a,sp
      0013F0 24 F1            [12] 4558 	add	a,#0xf1
      0013F2 F8               [12] 4559 	mov	r0,a
      0013F3 76 01            [12] 4560 	mov	@r0,#0x01
                                   4561 ;	../../../core/loader/elfloader.c:474: rodatarelaoff = shdr.sh_offset;
      0013F5 E5 81            [12] 4562 	mov	a,sp
      0013F7 24 58            [12] 4563 	add	a,#0x58
      0013F9 F8               [12] 4564 	mov	r0,a
      0013FA C0 01            [24] 4565 	push	ar1
      0013FC E5 81            [12] 4566 	mov	a,sp
      0013FE 24 38            [12] 4567 	add	a,#0x38
      001400 F9               [12] 4568 	mov	r1,a
      001401 86 00            [24] 4569 	mov	ar0,@r0
      001403 E6               [12] 4570 	mov	a,@r0
      001404 F7               [12] 4571 	mov	@r1,a
      001405 08               [12] 4572 	inc	r0
      001406 E6               [12] 4573 	mov	a,@r0
      001407 09               [12] 4574 	inc	r1
      001408 F7               [12] 4575 	mov	@r1,a
      001409 18               [12] 4576 	dec	r0
      00140A D0 01            [24] 4577 	pop	ar1
                                   4578 ;	../../../core/loader/elfloader.c:475: rodatarelasize = shdr.sh_size;
      00140C E5 81            [12] 4579 	mov	a,sp
      00140E 24 56            [12] 4580 	add	a,#0x56
      001410 F8               [12] 4581 	mov	r0,a
      001411 C0 01            [24] 4582 	push	ar1
      001413 E5 81            [12] 4583 	mov	a,sp
      001415 24 3F            [12] 4584 	add	a,#0x3f
      001417 F9               [12] 4585 	mov	r1,a
      001418 86 00            [24] 4586 	mov	ar0,@r0
      00141A E6               [12] 4587 	mov	a,@r0
      00141B F7               [12] 4588 	mov	@r1,a
      00141C 08               [12] 4589 	inc	r0
      00141D E6               [12] 4590 	mov	a,@r0
      00141E 09               [12] 4591 	inc	r1
      00141F F7               [12] 4592 	mov	@r1,a
      001420 18               [12] 4593 	dec	r0
      001421 D0 01            [24] 4594 	pop	ar1
      001423 D0 00            [24] 4595 	pop	ar0
      001425 02r15rBB         [24] 4596 	ljmp	00149$
      001428                       4597 00124$:
                                   4598 ;	../../../core/loader/elfloader.c:476: } else if(strncmp(name, ".rel.data", 9) == 0) {
      001428 C0 00            [24] 4599 	push	ar0
      00142A E5 81            [12] 4600 	mov	a,sp
      00142C 24 54            [12] 4601 	add	a,#0x54
      00142E F8               [12] 4602 	mov	r0,a
      00142F 86 04            [24] 4603 	mov	ar4,@r0
      001431 7E 00            [12] 4604 	mov	r6,#0x00
      001433 7F 40            [12] 4605 	mov	r7,#0x40
      001435 D0 00            [24] 4606 	pop	ar0
      001437 C0 05            [24] 4607 	push	ar5
      001439 C0 02            [24] 4608 	push	ar2
      00143B C0 01            [24] 4609 	push	ar1
      00143D C0 00            [24] 4610 	push	ar0
      00143F 74 09            [12] 4611 	mov	a,#0x09
      001441 C0 E0            [24] 4612 	push	acc
      001443 E4               [12] 4613 	clr	a
      001444 C0 E0            [24] 4614 	push	acc
      001446 74r5D            [12] 4615 	mov	a,#___str_8
      001448 C0 E0            [24] 4616 	push	acc
      00144A 74s00            [12] 4617 	mov	a,#(___str_8 >> 8)
      00144C C0 E0            [24] 4618 	push	acc
      00144E 74 80            [12] 4619 	mov	a,#0x80
      001450 C0 E0            [24] 4620 	push	acc
      001452 8C 82            [24] 4621 	mov	dpl,r4
      001454 8E 83            [24] 4622 	mov	dph,r6
      001456 8F F0            [24] 4623 	mov	b,r7
      001458 78r00            [12] 4624 	mov	r0,#_strncmp
      00145A 79s00            [12] 4625 	mov	r1,#(_strncmp >> 8)
      00145C 7As00            [12] 4626 	mov	r2,#(_strncmp >> 16)
      00145E 12r00r00         [24] 4627 	lcall	__sdcc_banked_call
      001461 AE 82            [24] 4628 	mov	r6,dpl
      001463 AF 83            [24] 4629 	mov	r7,dph
      001465 E5 81            [12] 4630 	mov	a,sp
      001467 24 FB            [12] 4631 	add	a,#0xfb
      001469 F5 81            [12] 4632 	mov	sp,a
      00146B D0 00            [24] 4633 	pop	ar0
      00146D D0 01            [24] 4634 	pop	ar1
      00146F D0 02            [24] 4635 	pop	ar2
      001471 D0 05            [24] 4636 	pop	ar5
      001473 EE               [12] 4637 	mov	a,r6
      001474 4F               [12] 4638 	orl	a,r7
      001475 70 3C            [24] 4639 	jnz	00121$
                                   4640 ;	../../../core/loader/elfloader.c:478: using_relas = 0;
      001477 C0 00            [24] 4641 	push	ar0
      001479 E5 81            [12] 4642 	mov	a,sp
      00147B 24 F1            [12] 4643 	add	a,#0xf1
      00147D F8               [12] 4644 	mov	r0,a
      00147E 76 00            [12] 4645 	mov	@r0,#0x00
                                   4646 ;	../../../core/loader/elfloader.c:479: datarelaoff = shdr.sh_offset;
      001480 E5 81            [12] 4647 	mov	a,sp
      001482 24 58            [12] 4648 	add	a,#0x58
      001484 F8               [12] 4649 	mov	r0,a
      001485 C0 01            [24] 4650 	push	ar1
      001487 E5 81            [12] 4651 	mov	a,sp
      001489 24 36            [12] 4652 	add	a,#0x36
      00148B F9               [12] 4653 	mov	r1,a
      00148C 86 00            [24] 4654 	mov	ar0,@r0
      00148E E6               [12] 4655 	mov	a,@r0
      00148F F7               [12] 4656 	mov	@r1,a
      001490 08               [12] 4657 	inc	r0
      001491 E6               [12] 4658 	mov	a,@r0
      001492 09               [12] 4659 	inc	r1
      001493 F7               [12] 4660 	mov	@r1,a
      001494 18               [12] 4661 	dec	r0
      001495 D0 01            [24] 4662 	pop	ar1
                                   4663 ;	../../../core/loader/elfloader.c:480: datarelasize = shdr.sh_size;
      001497 E5 81            [12] 4664 	mov	a,sp
      001499 24 56            [12] 4665 	add	a,#0x56
      00149B F8               [12] 4666 	mov	r0,a
      00149C C0 01            [24] 4667 	push	ar1
      00149E E5 81            [12] 4668 	mov	a,sp
      0014A0 24 43            [12] 4669 	add	a,#0x43
      0014A2 F9               [12] 4670 	mov	r1,a
      0014A3 86 00            [24] 4671 	mov	ar0,@r0
      0014A5 E6               [12] 4672 	mov	a,@r0
      0014A6 F7               [12] 4673 	mov	@r1,a
      0014A7 08               [12] 4674 	inc	r0
      0014A8 E6               [12] 4675 	mov	a,@r0
      0014A9 09               [12] 4676 	inc	r1
      0014AA F7               [12] 4677 	mov	@r1,a
      0014AB 18               [12] 4678 	dec	r0
      0014AC D0 01            [24] 4679 	pop	ar1
      0014AE D0 00            [24] 4680 	pop	ar0
      0014B0 02r15rBB         [24] 4681 	ljmp	00149$
      0014B3                       4682 00121$:
                                   4683 ;	../../../core/loader/elfloader.c:481: } else if(strncmp(name, ".rela.data", 10) == 0) {
      0014B3 C0 00            [24] 4684 	push	ar0
      0014B5 E5 81            [12] 4685 	mov	a,sp
      0014B7 24 55            [12] 4686 	add	a,#0x55
      0014B9 F8               [12] 4687 	mov	r0,a
      0014BA 86 04            [24] 4688 	mov	ar4,@r0
      0014BC 7E 00            [12] 4689 	mov	r6,#0x00
      0014BE 7F 40            [12] 4690 	mov	r7,#0x40
      0014C0 D0 00            [24] 4691 	pop	ar0
      0014C2 C0 05            [24] 4692 	push	ar5
      0014C4 C0 02            [24] 4693 	push	ar2
      0014C6 C0 01            [24] 4694 	push	ar1
      0014C8 C0 00            [24] 4695 	push	ar0
      0014CA 74 0A            [12] 4696 	mov	a,#0x0a
      0014CC C0 E0            [24] 4697 	push	acc
      0014CE E4               [12] 4698 	clr	a
      0014CF C0 E0            [24] 4699 	push	acc
      0014D1 74r67            [12] 4700 	mov	a,#___str_9
      0014D3 C0 E0            [24] 4701 	push	acc
      0014D5 74s00            [12] 4702 	mov	a,#(___str_9 >> 8)
      0014D7 C0 E0            [24] 4703 	push	acc
      0014D9 74 80            [12] 4704 	mov	a,#0x80
      0014DB C0 E0            [24] 4705 	push	acc
      0014DD 8C 82            [24] 4706 	mov	dpl,r4
      0014DF 8E 83            [24] 4707 	mov	dph,r6
      0014E1 8F F0            [24] 4708 	mov	b,r7
      0014E3 78r00            [12] 4709 	mov	r0,#_strncmp
      0014E5 79s00            [12] 4710 	mov	r1,#(_strncmp >> 8)
      0014E7 7As00            [12] 4711 	mov	r2,#(_strncmp >> 16)
      0014E9 12r00r00         [24] 4712 	lcall	__sdcc_banked_call
      0014EC AE 82            [24] 4713 	mov	r6,dpl
      0014EE AF 83            [24] 4714 	mov	r7,dph
      0014F0 E5 81            [12] 4715 	mov	a,sp
      0014F2 24 FB            [12] 4716 	add	a,#0xfb
      0014F4 F5 81            [12] 4717 	mov	sp,a
      0014F6 D0 00            [24] 4718 	pop	ar0
      0014F8 D0 01            [24] 4719 	pop	ar1
      0014FA D0 02            [24] 4720 	pop	ar2
      0014FC D0 05            [24] 4721 	pop	ar5
      0014FE EE               [12] 4722 	mov	a,r6
      0014FF 4F               [12] 4723 	orl	a,r7
      001500 70 3C            [24] 4724 	jnz	00118$
                                   4725 ;	../../../core/loader/elfloader.c:482: using_relas = 1;
      001502 C0 00            [24] 4726 	push	ar0
      001504 E5 81            [12] 4727 	mov	a,sp
      001506 24 F1            [12] 4728 	add	a,#0xf1
      001508 F8               [12] 4729 	mov	r0,a
      001509 76 01            [12] 4730 	mov	@r0,#0x01
                                   4731 ;	../../../core/loader/elfloader.c:483: datarelaoff = shdr.sh_offset;
      00150B E5 81            [12] 4732 	mov	a,sp
      00150D 24 58            [12] 4733 	add	a,#0x58
      00150F F8               [12] 4734 	mov	r0,a
      001510 C0 01            [24] 4735 	push	ar1
      001512 E5 81            [12] 4736 	mov	a,sp
      001514 24 36            [12] 4737 	add	a,#0x36
      001516 F9               [12] 4738 	mov	r1,a
      001517 86 00            [24] 4739 	mov	ar0,@r0
      001519 E6               [12] 4740 	mov	a,@r0
      00151A F7               [12] 4741 	mov	@r1,a
      00151B 08               [12] 4742 	inc	r0
      00151C E6               [12] 4743 	mov	a,@r0
      00151D 09               [12] 4744 	inc	r1
      00151E F7               [12] 4745 	mov	@r1,a
      00151F 18               [12] 4746 	dec	r0
      001520 D0 01            [24] 4747 	pop	ar1
                                   4748 ;	../../../core/loader/elfloader.c:484: datarelasize = shdr.sh_size;
      001522 E5 81            [12] 4749 	mov	a,sp
      001524 24 56            [12] 4750 	add	a,#0x56
      001526 F8               [12] 4751 	mov	r0,a
      001527 C0 01            [24] 4752 	push	ar1
      001529 E5 81            [12] 4753 	mov	a,sp
      00152B 24 43            [12] 4754 	add	a,#0x43
      00152D F9               [12] 4755 	mov	r1,a
      00152E 86 00            [24] 4756 	mov	ar0,@r0
      001530 E6               [12] 4757 	mov	a,@r0
      001531 F7               [12] 4758 	mov	@r1,a
      001532 08               [12] 4759 	inc	r0
      001533 E6               [12] 4760 	mov	a,@r0
      001534 09               [12] 4761 	inc	r1
      001535 F7               [12] 4762 	mov	@r1,a
      001536 18               [12] 4763 	dec	r0
      001537 D0 01            [24] 4764 	pop	ar1
      001539 D0 00            [24] 4765 	pop	ar0
      00153B 02r15rBB         [24] 4766 	ljmp	00149$
      00153E                       4767 00118$:
                                   4768 ;	../../../core/loader/elfloader.c:485: } else if(strncmp(name, ".bss", 4) == 0) {
      00153E C0 00            [24] 4769 	push	ar0
      001540 E5 81            [12] 4770 	mov	a,sp
      001542 24 57            [12] 4771 	add	a,#0x57
      001544 F8               [12] 4772 	mov	r0,a
      001545 86 04            [24] 4773 	mov	ar4,@r0
      001547 7E 00            [12] 4774 	mov	r6,#0x00
      001549 7F 40            [12] 4775 	mov	r7,#0x40
      00154B D0 00            [24] 4776 	pop	ar0
      00154D C0 05            [24] 4777 	push	ar5
      00154F C0 02            [24] 4778 	push	ar2
      001551 C0 01            [24] 4779 	push	ar1
      001553 C0 00            [24] 4780 	push	ar0
      001555 74 04            [12] 4781 	mov	a,#0x04
      001557 C0 E0            [24] 4782 	push	acc
      001559 E4               [12] 4783 	clr	a
      00155A C0 E0            [24] 4784 	push	acc
      00155C 74r72            [12] 4785 	mov	a,#___str_10
      00155E C0 E0            [24] 4786 	push	acc
      001560 74s00            [12] 4787 	mov	a,#(___str_10 >> 8)
      001562 C0 E0            [24] 4788 	push	acc
      001564 74 80            [12] 4789 	mov	a,#0x80
      001566 C0 E0            [24] 4790 	push	acc
      001568 8C 82            [24] 4791 	mov	dpl,r4
      00156A 8E 83            [24] 4792 	mov	dph,r6
      00156C 8F F0            [24] 4793 	mov	b,r7
      00156E 78r00            [12] 4794 	mov	r0,#_strncmp
      001570 79s00            [12] 4795 	mov	r1,#(_strncmp >> 8)
      001572 7As00            [12] 4796 	mov	r2,#(_strncmp >> 16)
      001574 12r00r00         [24] 4797 	lcall	__sdcc_banked_call
      001577 AE 82            [24] 4798 	mov	r6,dpl
      001579 AF 83            [24] 4799 	mov	r7,dph
      00157B E5 81            [12] 4800 	mov	a,sp
      00157D 24 FB            [12] 4801 	add	a,#0xfb
      00157F F5 81            [12] 4802 	mov	sp,a
      001581 D0 00            [24] 4803 	pop	ar0
      001583 D0 01            [24] 4804 	pop	ar1
      001585 D0 02            [24] 4805 	pop	ar2
      001587 D0 05            [24] 4806 	pop	ar5
      001589 EE               [12] 4807 	mov	a,r6
      00158A 4F               [12] 4808 	orl	a,r7
      00158B 70 2E            [24] 4809 	jnz	00149$
                                   4810 ;	../../../core/loader/elfloader.c:486: bsssize = shdr.sh_size;
      00158D C0 00            [24] 4811 	push	ar0
      00158F E5 81            [12] 4812 	mov	a,sp
      001591 24 56            [12] 4813 	add	a,#0x56
      001593 F8               [12] 4814 	mov	r0,a
      001594 C0 01            [24] 4815 	push	ar1
      001596 E5 81            [12] 4816 	mov	a,sp
      001598 24 3A            [12] 4817 	add	a,#0x3a
      00159A F9               [12] 4818 	mov	r1,a
      00159B 86 00            [24] 4819 	mov	ar0,@r0
      00159D E6               [12] 4820 	mov	a,@r0
      00159E F7               [12] 4821 	mov	@r1,a
      00159F 08               [12] 4822 	inc	r0
      0015A0 E6               [12] 4823 	mov	a,@r0
      0015A1 09               [12] 4824 	inc	r1
      0015A2 F7               [12] 4825 	mov	@r1,a
      0015A3 18               [12] 4826 	dec	r0
      0015A4 D0 01            [24] 4827 	pop	ar1
                                   4828 ;	../../../core/loader/elfloader.c:487: bss.number = i;
      0015A6 E5 81            [12] 4829 	mov	a,sp
      0015A8 24 4A            [12] 4830 	add	a,#0x4a
      0015AA F8               [12] 4831 	mov	r0,a
      0015AB 86 07            [24] 4832 	mov	ar7,@r0
      0015AD D0 00            [24] 4833 	pop	ar0
      0015AF 90r00r21         [24] 4834 	mov	dptr,#_bss
      0015B2 EF               [12] 4835 	mov	a,r7
      0015B3 F0               [24] 4836 	movx	@dptr,a
                                   4837 ;	../../../core/loader/elfloader.c:488: bss.offset = 0;
      0015B4 90r00r22         [24] 4838 	mov	dptr,#(_bss + 0x0001)
      0015B7 E4               [12] 4839 	clr	a
      0015B8 F0               [24] 4840 	movx	@dptr,a
      0015B9 A3               [24] 4841 	inc	dptr
      0015BA F0               [24] 4842 	movx	@dptr,a
      0015BB                       4843 00149$:
                                   4844 ;	../../../core/loader/elfloader.c:492: shdrptr += shdrsize;
      0015BB C0 00            [24] 4845 	push	ar0
      0015BD E5 81            [12] 4846 	mov	a,sp
      0015BF 24 DF            [12] 4847 	add	a,#0xdf
      0015C1 F8               [12] 4848 	mov	r0,a
      0015C2 C0 01            [24] 4849 	push	ar1
      0015C4 E5 81            [12] 4850 	mov	a,sp
      0015C6 24 EE            [12] 4851 	add	a,#0xee
      0015C8 F9               [12] 4852 	mov	r1,a
      0015C9 E7               [12] 4853 	mov	a,@r1
      0015CA 26               [12] 4854 	add	a,@r0
      0015CB F6               [12] 4855 	mov	@r0,a
      0015CC 09               [12] 4856 	inc	r1
      0015CD E7               [12] 4857 	mov	a,@r1
      0015CE 08               [12] 4858 	inc	r0
      0015CF 36               [12] 4859 	addc	a,@r0
      0015D0 F6               [12] 4860 	mov	@r0,a
      0015D1 D0 01            [24] 4861 	pop	ar1
                                   4862 ;	../../../core/loader/elfloader.c:419: for(i = 0; i < shdrnum; ++i) {
      0015D3 E5 81            [12] 4863 	mov	a,sp
      0015D5 24 4A            [12] 4864 	add	a,#0x4a
      0015D7 F8               [12] 4865 	mov	r0,a
      0015D8 06               [12] 4866 	inc	@r0
      0015D9 B6 00 02         [24] 4867 	cjne	@r0,#0x00,00351$
      0015DC 08               [12] 4868 	inc	r0
      0015DD 06               [12] 4869 	inc	@r0
      0015DE                       4870 00351$:
      0015DE D0 00            [24] 4871 	pop	ar0
      0015E0 02r0ErBA         [24] 4872 	ljmp	00205$
      0015E3                       4873 00150$:
                                   4874 ;	../../../core/loader/elfloader.c:495: if(symtabsize == 0) {
      0015E3 E5 81            [12] 4875 	mov	a,sp
      0015E5 24 FD            [12] 4876 	add	a,#0xfd
      0015E7 F8               [12] 4877 	mov	r0,a
      0015E8 E6               [12] 4878 	mov	a,@r0
      0015E9 08               [12] 4879 	inc	r0
      0015EA 46               [12] 4880 	orl	a,@r0
      0015EB 70 06            [24] 4881 	jnz	00152$
                                   4882 ;	../../../core/loader/elfloader.c:496: return ELFLOADER_NO_SYMTAB;
      0015ED 90 00 02         [24] 4883 	mov	dptr,#0x0002
      0015F0 02r1Ar29         [24] 4884 	ljmp	00207$
      0015F3                       4885 00152$:
                                   4886 ;	../../../core/loader/elfloader.c:498: if(strtabsize == 0) {
      0015F3 E5 81            [12] 4887 	mov	a,sp
      0015F5 24 3E            [12] 4888 	add	a,#0x3e
      0015F7 F8               [12] 4889 	mov	r0,a
      0015F8 E6               [12] 4890 	mov	a,@r0
      0015F9 08               [12] 4891 	inc	r0
      0015FA 46               [12] 4892 	orl	a,@r0
      0015FB 70 06            [24] 4893 	jnz	00154$
                                   4894 ;	../../../core/loader/elfloader.c:499: return ELFLOADER_NO_STRTAB;
      0015FD 90 00 03         [24] 4895 	mov	dptr,#0x0003
      001600 02r1Ar29         [24] 4896 	ljmp	00207$
      001603                       4897 00154$:
                                   4898 ;	../../../core/loader/elfloader.c:501: if(textsize == 0) {
      001603 E5 81            [12] 4899 	mov	a,sp
      001605 24 F5            [12] 4900 	add	a,#0xf5
      001607 F8               [12] 4901 	mov	r0,a
      001608 E6               [12] 4902 	mov	a,@r0
      001609 08               [12] 4903 	inc	r0
      00160A 46               [12] 4904 	orl	a,@r0
      00160B 70 06            [24] 4905 	jnz	00157$
                                   4906 ;	../../../core/loader/elfloader.c:502: return ELFLOADER_NO_TEXT;
      00160D 90 00 04         [24] 4907 	mov	dptr,#0x0004
      001610 02r1Ar29         [24] 4908 	ljmp	00207$
                                   4909 ;	../../../core/loader/elfloader.c:505: PRINTF("before allocate ram\n");
      001613                       4910 00157$:
                                   4911 ;	../../../core/loader/elfloader.c:506: bss.address = (char *)elfloader_arch_allocate_ram(bsssize + datasize);
      001613 E5 81            [12] 4912 	mov	a,sp
      001615 24 3C            [12] 4913 	add	a,#0x3c
      001617 F8               [12] 4914 	mov	r0,a
      001618 E5 81            [12] 4915 	mov	a,sp
      00161A 24 47            [12] 4916 	add	a,#0x47
      00161C F9               [12] 4917 	mov	r1,a
      00161D E7               [12] 4918 	mov	a,@r1
      00161E 26               [12] 4919 	add	a,@r0
      00161F FE               [12] 4920 	mov	r6,a
      001620 09               [12] 4921 	inc	r1
      001621 E7               [12] 4922 	mov	a,@r1
      001622 08               [12] 4923 	inc	r0
      001623 36               [12] 4924 	addc	a,@r0
      001624 FF               [12] 4925 	mov	r7,a
      001625 8E 82            [24] 4926 	mov	dpl,r6
      001627 8F 83            [24] 4927 	mov	dph,r7
      001629 C0 05            [24] 4928 	push	ar5
      00162B C0 02            [24] 4929 	push	ar2
      00162D 78r00            [12] 4930 	mov	r0,#_elfloader_arch_allocate_ram
      00162F 79s00            [12] 4931 	mov	r1,#(_elfloader_arch_allocate_ram >> 8)
      001631 7As00            [12] 4932 	mov	r2,#(_elfloader_arch_allocate_ram >> 16)
      001633 12r00r00         [24] 4933 	lcall	__sdcc_banked_call
      001636 AC 82            [24] 4934 	mov	r4,dpl
      001638 AE 83            [24] 4935 	mov	r6,dph
      00163A AF F0            [24] 4936 	mov	r7,b
      00163C D0 02            [24] 4937 	pop	ar2
      00163E D0 05            [24] 4938 	pop	ar5
      001640 90r00r24         [24] 4939 	mov	dptr,#(_bss + 0x0003)
      001643 EC               [12] 4940 	mov	a,r4
      001644 F0               [24] 4941 	movx	@dptr,a
      001645 EE               [12] 4942 	mov	a,r6
      001646 A3               [24] 4943 	inc	dptr
      001647 F0               [24] 4944 	movx	@dptr,a
      001648 EF               [12] 4945 	mov	a,r7
      001649 A3               [24] 4946 	inc	dptr
      00164A F0               [24] 4947 	movx	@dptr,a
                                   4948 ;	../../../core/loader/elfloader.c:507: data.address = (char *)bss.address + bsssize;
      00164B E5 81            [12] 4949 	mov	a,sp
      00164D 24 3C            [12] 4950 	add	a,#0x3c
      00164F F8               [12] 4951 	mov	r0,a
      001650 E6               [12] 4952 	mov	a,@r0
      001651 2C               [12] 4953 	add	a,r4
      001652 FC               [12] 4954 	mov	r4,a
      001653 08               [12] 4955 	inc	r0
      001654 E6               [12] 4956 	mov	a,@r0
      001655 3E               [12] 4957 	addc	a,r6
      001656 FE               [12] 4958 	mov	r6,a
      001657 90r00r2A         [24] 4959 	mov	dptr,#(_data + 0x0003)
      00165A EC               [12] 4960 	mov	a,r4
      00165B F0               [24] 4961 	movx	@dptr,a
      00165C EE               [12] 4962 	mov	a,r6
      00165D A3               [24] 4963 	inc	dptr
      00165E F0               [24] 4964 	movx	@dptr,a
      00165F EF               [12] 4965 	mov	a,r7
      001660 A3               [24] 4966 	inc	dptr
      001661 F0               [24] 4967 	movx	@dptr,a
                                   4968 ;	../../../core/loader/elfloader.c:509: text.address = (char *)elfloader_arch_allocate_rom(textsize + rodatasize);
      001662 E5 81            [12] 4969 	mov	a,sp
      001664 24 F5            [12] 4970 	add	a,#0xf5
      001666 F8               [12] 4971 	mov	r0,a
      001667 E5 81            [12] 4972 	mov	a,sp
      001669 24 43            [12] 4973 	add	a,#0x43
      00166B F9               [12] 4974 	mov	r1,a
      00166C E7               [12] 4975 	mov	a,@r1
      00166D 26               [12] 4976 	add	a,@r0
      00166E FE               [12] 4977 	mov	r6,a
      00166F 09               [12] 4978 	inc	r1
      001670 E7               [12] 4979 	mov	a,@r1
      001671 08               [12] 4980 	inc	r0
      001672 36               [12] 4981 	addc	a,@r0
      001673 FF               [12] 4982 	mov	r7,a
      001674 8E 82            [24] 4983 	mov	dpl,r6
      001676 8F 83            [24] 4984 	mov	dph,r7
      001678 C0 05            [24] 4985 	push	ar5
      00167A C0 02            [24] 4986 	push	ar2
      00167C 78r00            [12] 4987 	mov	r0,#_elfloader_arch_allocate_rom
      00167E 79s00            [12] 4988 	mov	r1,#(_elfloader_arch_allocate_rom >> 8)
      001680 7As00            [12] 4989 	mov	r2,#(_elfloader_arch_allocate_rom >> 16)
      001682 12r00r00         [24] 4990 	lcall	__sdcc_banked_call
      001685 AC 82            [24] 4991 	mov	r4,dpl
      001687 AE 83            [24] 4992 	mov	r6,dph
      001689 AF F0            [24] 4993 	mov	r7,b
      00168B D0 02            [24] 4994 	pop	ar2
      00168D D0 05            [24] 4995 	pop	ar5
      00168F 90r00r36         [24] 4996 	mov	dptr,#(_text + 0x0003)
      001692 EC               [12] 4997 	mov	a,r4
      001693 F0               [24] 4998 	movx	@dptr,a
      001694 EE               [12] 4999 	mov	a,r6
      001695 A3               [24] 5000 	inc	dptr
      001696 F0               [24] 5001 	movx	@dptr,a
      001697 EF               [12] 5002 	mov	a,r7
      001698 A3               [24] 5003 	inc	dptr
      001699 F0               [24] 5004 	movx	@dptr,a
                                   5005 ;	../../../core/loader/elfloader.c:510: rodata.address = (char *)text.address + textsize;
      00169A E5 81            [12] 5006 	mov	a,sp
      00169C 24 F5            [12] 5007 	add	a,#0xf5
      00169E F8               [12] 5008 	mov	r0,a
      00169F E6               [12] 5009 	mov	a,@r0
      0016A0 2C               [12] 5010 	add	a,r4
      0016A1 FC               [12] 5011 	mov	r4,a
      0016A2 08               [12] 5012 	inc	r0
      0016A3 E6               [12] 5013 	mov	a,@r0
      0016A4 3E               [12] 5014 	addc	a,r6
      0016A5 FE               [12] 5015 	mov	r6,a
      0016A6 90r00r30         [24] 5016 	mov	dptr,#(_rodata + 0x0003)
      0016A9 EC               [12] 5017 	mov	a,r4
      0016AA F0               [24] 5018 	movx	@dptr,a
      0016AB EE               [12] 5019 	mov	a,r6
      0016AC A3               [24] 5020 	inc	dptr
      0016AD F0               [24] 5021 	movx	@dptr,a
      0016AE EF               [12] 5022 	mov	a,r7
      0016AF A3               [24] 5023 	inc	dptr
      0016B0 F0               [24] 5024 	movx	@dptr,a
                                   5025 ;	../../../core/loader/elfloader.c:521: if(textrelasize > 0) {
      0016B1 E5 81            [12] 5026 	mov	a,sp
      0016B3 24 49            [12] 5027 	add	a,#0x49
      0016B5 F8               [12] 5028 	mov	r0,a
      0016B6 E6               [12] 5029 	mov	a,@r0
      0016B7 08               [12] 5030 	inc	r0
      0016B8 46               [12] 5031 	orl	a,@r0
      0016B9 70 03            [24] 5032 	jnz	00355$
      0016BB 02r17r4B         [24] 5033 	ljmp	00175$
      0016BE                       5034 00355$:
                                   5035 ;	../../../core/loader/elfloader.c:525: text.address,
      0016BE 90r00r36         [24] 5036 	mov	dptr,#(_text + 0x0003)
      0016C1 E0               [24] 5037 	movx	a,@dptr
      0016C2 FC               [12] 5038 	mov	r4,a
      0016C3 A3               [24] 5039 	inc	dptr
      0016C4 E0               [24] 5040 	movx	a,@dptr
      0016C5 FE               [12] 5041 	mov	r6,a
      0016C6 A3               [24] 5042 	inc	dptr
      0016C7 E0               [24] 5043 	movx	a,@dptr
      0016C8 FF               [12] 5044 	mov	r7,a
                                   5045 ;	../../../core/loader/elfloader.c:522: ret = relocate_section(fd,
      0016C9 E5 81            [12] 5046 	mov	a,sp
      0016CB 24 F2            [12] 5047 	add	a,#0xf2
      0016CD F8               [12] 5048 	mov	r0,a
      0016CE E6               [12] 5049 	mov	a,@r0
      0016CF C0 E0            [24] 5050 	push	acc
      0016D1 E5 81            [12] 5051 	mov	a,sp
      0016D3 24 FC            [12] 5052 	add	a,#0xfc
      0016D5 F8               [12] 5053 	mov	r0,a
      0016D6 E6               [12] 5054 	mov	a,@r0
      0016D7 C0 E0            [24] 5055 	push	acc
      0016D9 08               [12] 5056 	inc	r0
      0016DA E6               [12] 5057 	mov	a,@r0
      0016DB C0 E0            [24] 5058 	push	acc
      0016DD E5 81            [12] 5059 	mov	a,sp
      0016DF 24 F8            [12] 5060 	add	a,#0xf8
      0016E1 F8               [12] 5061 	mov	r0,a
      0016E2 E6               [12] 5062 	mov	a,@r0
      0016E3 C0 E0            [24] 5063 	push	acc
      0016E5 08               [12] 5064 	inc	r0
      0016E6 E6               [12] 5065 	mov	a,@r0
      0016E7 C0 E0            [24] 5066 	push	acc
      0016E9 E5 81            [12] 5067 	mov	a,sp
      0016EB 24 FA            [12] 5068 	add	a,#0xfa
      0016ED F8               [12] 5069 	mov	r0,a
      0016EE E6               [12] 5070 	mov	a,@r0
      0016EF C0 E0            [24] 5071 	push	acc
      0016F1 08               [12] 5072 	inc	r0
      0016F2 E6               [12] 5073 	mov	a,@r0
      0016F3 C0 E0            [24] 5074 	push	acc
      0016F5 E5 81            [12] 5075 	mov	a,sp
      0016F7 24 D7            [12] 5076 	add	a,#0xd7
      0016F9 F8               [12] 5077 	mov	r0,a
      0016FA E6               [12] 5078 	mov	a,@r0
      0016FB C0 E0            [24] 5079 	push	acc
      0016FD 08               [12] 5080 	inc	r0
      0016FE E6               [12] 5081 	mov	a,@r0
      0016FF C0 E0            [24] 5082 	push	acc
      001701 C0 04            [24] 5083 	push	ar4
      001703 C0 06            [24] 5084 	push	ar6
      001705 C0 07            [24] 5085 	push	ar7
      001707 E5 81            [12] 5086 	mov	a,sp
      001709 24 E7            [12] 5087 	add	a,#0xe7
      00170B F8               [12] 5088 	mov	r0,a
      00170C E6               [12] 5089 	mov	a,@r0
      00170D C0 E0            [24] 5090 	push	acc
      00170F 08               [12] 5091 	inc	r0
      001710 E6               [12] 5092 	mov	a,@r0
      001711 C0 E0            [24] 5093 	push	acc
      001713 E5 81            [12] 5094 	mov	a,sp
      001715 24 3B            [12] 5095 	add	a,#0x3b
      001717 F8               [12] 5096 	mov	r0,a
      001718 E6               [12] 5097 	mov	a,@r0
      001719 C0 E0            [24] 5098 	push	acc
      00171B 08               [12] 5099 	inc	r0
      00171C E6               [12] 5100 	mov	a,@r0
      00171D C0 E0            [24] 5101 	push	acc
      00171F C0 02            [24] 5102 	push	ar2
      001721 C0 05            [24] 5103 	push	ar5
      001723 E5 81            [12] 5104 	mov	a,sp
      001725 24 24            [12] 5105 	add	a,#0x24
      001727 F8               [12] 5106 	mov	r0,a
      001728 86 82            [24] 5107 	mov	dpl,@r0
      00172A 08               [12] 5108 	inc	r0
      00172B 86 83            [24] 5109 	mov	dph,@r0
      00172D 78rEA            [12] 5110 	mov	r0,#_relocate_section
      00172F 79s02            [12] 5111 	mov	r1,#(_relocate_section >> 8)
      001731 7As00            [12] 5112 	mov	r2,#(_relocate_section >> 16)
      001733 12r00r00         [24] 5113 	lcall	__sdcc_banked_call
      001736 AE 82            [24] 5114 	mov	r6,dpl
      001738 AF 83            [24] 5115 	mov	r7,dph
      00173A E5 81            [12] 5116 	mov	a,sp
      00173C 24 EE            [12] 5117 	add	a,#0xee
      00173E F5 81            [12] 5118 	mov	sp,a
                                   5119 ;	../../../core/loader/elfloader.c:529: if(ret != ELFLOADER_OK) {
      001740 EE               [12] 5120 	mov	a,r6
      001741 4F               [12] 5121 	orl	a,r7
      001742 60 07            [24] 5122 	jz	00175$
                                   5123 ;	../../../core/loader/elfloader.c:530: return ret;
      001744 8E 82            [24] 5124 	mov	dpl,r6
      001746 8F 83            [24] 5125 	mov	dph,r7
      001748 02r1Ar29         [24] 5126 	ljmp	00207$
                                   5127 ;	../../../core/loader/elfloader.c:535: PRINTF("elfloader: relocate rodata\n");
      00174B                       5128 00175$:
                                   5129 ;	../../../core/loader/elfloader.c:536: if(rodatarelasize > 0) {
      00174B E5 81            [12] 5130 	mov	a,sp
      00174D 24 41            [12] 5131 	add	a,#0x41
      00174F F8               [12] 5132 	mov	r0,a
      001750 E6               [12] 5133 	mov	a,@r0
      001751 08               [12] 5134 	inc	r0
      001752 46               [12] 5135 	orl	a,@r0
      001753 70 03            [24] 5136 	jnz	00357$
      001755 02r17rED         [24] 5137 	ljmp	00183$
      001758                       5138 00357$:
                                   5139 ;	../../../core/loader/elfloader.c:540: rodata.address,
      001758 90r00r30         [24] 5140 	mov	dptr,#(_rodata + 0x0003)
      00175B E0               [24] 5141 	movx	a,@dptr
      00175C FD               [12] 5142 	mov	r5,a
      00175D A3               [24] 5143 	inc	dptr
      00175E E0               [24] 5144 	movx	a,@dptr
      00175F FE               [12] 5145 	mov	r6,a
      001760 A3               [24] 5146 	inc	dptr
      001761 E0               [24] 5147 	movx	a,@dptr
      001762 FF               [12] 5148 	mov	r7,a
                                   5149 ;	../../../core/loader/elfloader.c:537: ret = relocate_section(fd,
      001763 E5 81            [12] 5150 	mov	a,sp
      001765 24 F2            [12] 5151 	add	a,#0xf2
      001767 F8               [12] 5152 	mov	r0,a
      001768 E6               [12] 5153 	mov	a,@r0
      001769 C0 E0            [24] 5154 	push	acc
      00176B E5 81            [12] 5155 	mov	a,sp
      00176D 24 FC            [12] 5156 	add	a,#0xfc
      00176F F8               [12] 5157 	mov	r0,a
      001770 E6               [12] 5158 	mov	a,@r0
      001771 C0 E0            [24] 5159 	push	acc
      001773 08               [12] 5160 	inc	r0
      001774 E6               [12] 5161 	mov	a,@r0
      001775 C0 E0            [24] 5162 	push	acc
      001777 E5 81            [12] 5163 	mov	a,sp
      001779 24 F8            [12] 5164 	add	a,#0xf8
      00177B F8               [12] 5165 	mov	r0,a
      00177C E6               [12] 5166 	mov	a,@r0
      00177D C0 E0            [24] 5167 	push	acc
      00177F 08               [12] 5168 	inc	r0
      001780 E6               [12] 5169 	mov	a,@r0
      001781 C0 E0            [24] 5170 	push	acc
      001783 E5 81            [12] 5171 	mov	a,sp
      001785 24 FA            [12] 5172 	add	a,#0xfa
      001787 F8               [12] 5173 	mov	r0,a
      001788 E6               [12] 5174 	mov	a,@r0
      001789 C0 E0            [24] 5175 	push	acc
      00178B 08               [12] 5176 	inc	r0
      00178C E6               [12] 5177 	mov	a,@r0
      00178D C0 E0            [24] 5178 	push	acc
      00178F E5 81            [12] 5179 	mov	a,sp
      001791 24 D7            [12] 5180 	add	a,#0xd7
      001793 F8               [12] 5181 	mov	r0,a
      001794 E6               [12] 5182 	mov	a,@r0
      001795 C0 E0            [24] 5183 	push	acc
      001797 08               [12] 5184 	inc	r0
      001798 E6               [12] 5185 	mov	a,@r0
      001799 C0 E0            [24] 5186 	push	acc
      00179B C0 05            [24] 5187 	push	ar5
      00179D C0 06            [24] 5188 	push	ar6
      00179F C0 07            [24] 5189 	push	ar7
      0017A1 E5 81            [12] 5190 	mov	a,sp
      0017A3 24 ED            [12] 5191 	add	a,#0xed
      0017A5 F8               [12] 5192 	mov	r0,a
      0017A6 E6               [12] 5193 	mov	a,@r0
      0017A7 C0 E0            [24] 5194 	push	acc
      0017A9 08               [12] 5195 	inc	r0
      0017AA E6               [12] 5196 	mov	a,@r0
      0017AB C0 E0            [24] 5197 	push	acc
      0017AD E5 81            [12] 5198 	mov	a,sp
      0017AF 24 33            [12] 5199 	add	a,#0x33
      0017B1 F8               [12] 5200 	mov	r0,a
      0017B2 E6               [12] 5201 	mov	a,@r0
      0017B3 C0 E0            [24] 5202 	push	acc
      0017B5 08               [12] 5203 	inc	r0
      0017B6 E6               [12] 5204 	mov	a,@r0
      0017B7 C0 E0            [24] 5205 	push	acc
      0017B9 E5 81            [12] 5206 	mov	a,sp
      0017BB 24 2A            [12] 5207 	add	a,#0x2a
      0017BD F8               [12] 5208 	mov	r0,a
      0017BE E6               [12] 5209 	mov	a,@r0
      0017BF C0 E0            [24] 5210 	push	acc
      0017C1 08               [12] 5211 	inc	r0
      0017C2 E6               [12] 5212 	mov	a,@r0
      0017C3 C0 E0            [24] 5213 	push	acc
      0017C5 E5 81            [12] 5214 	mov	a,sp
      0017C7 24 24            [12] 5215 	add	a,#0x24
      0017C9 F8               [12] 5216 	mov	r0,a
      0017CA 86 82            [24] 5217 	mov	dpl,@r0
      0017CC 08               [12] 5218 	inc	r0
      0017CD 86 83            [24] 5219 	mov	dph,@r0
      0017CF 78rEA            [12] 5220 	mov	r0,#_relocate_section
      0017D1 79s02            [12] 5221 	mov	r1,#(_relocate_section >> 8)
      0017D3 7As00            [12] 5222 	mov	r2,#(_relocate_section >> 16)
      0017D5 12r00r00         [24] 5223 	lcall	__sdcc_banked_call
      0017D8 AE 82            [24] 5224 	mov	r6,dpl
      0017DA AF 83            [24] 5225 	mov	r7,dph
      0017DC E5 81            [12] 5226 	mov	a,sp
      0017DE 24 EE            [12] 5227 	add	a,#0xee
      0017E0 F5 81            [12] 5228 	mov	sp,a
                                   5229 ;	../../../core/loader/elfloader.c:544: if(ret != ELFLOADER_OK) {
      0017E2 EE               [12] 5230 	mov	a,r6
      0017E3 4F               [12] 5231 	orl	a,r7
      0017E4 60 07            [24] 5232 	jz	00183$
                                   5233 ;	../../../core/loader/elfloader.c:546: return ret;
      0017E6 8E 82            [24] 5234 	mov	dpl,r6
      0017E8 8F 83            [24] 5235 	mov	dph,r7
      0017EA 02r1Ar29         [24] 5236 	ljmp	00207$
                                   5237 ;	../../../core/loader/elfloader.c:551: PRINTF("elfloader: relocate data\n");
      0017ED                       5238 00183$:
                                   5239 ;	../../../core/loader/elfloader.c:552: if(datarelasize > 0) {
      0017ED E5 81            [12] 5240 	mov	a,sp
      0017EF 24 45            [12] 5241 	add	a,#0x45
      0017F1 F8               [12] 5242 	mov	r0,a
      0017F2 E6               [12] 5243 	mov	a,@r0
      0017F3 08               [12] 5244 	inc	r0
      0017F4 46               [12] 5245 	orl	a,@r0
      0017F5 70 03            [24] 5246 	jnz	00359$
      0017F7 02r18r8F         [24] 5247 	ljmp	00190$
      0017FA                       5248 00359$:
                                   5249 ;	../../../core/loader/elfloader.c:556: data.address,
      0017FA 90r00r2A         [24] 5250 	mov	dptr,#(_data + 0x0003)
      0017FD E0               [24] 5251 	movx	a,@dptr
      0017FE FD               [12] 5252 	mov	r5,a
      0017FF A3               [24] 5253 	inc	dptr
      001800 E0               [24] 5254 	movx	a,@dptr
      001801 FE               [12] 5255 	mov	r6,a
      001802 A3               [24] 5256 	inc	dptr
      001803 E0               [24] 5257 	movx	a,@dptr
      001804 FF               [12] 5258 	mov	r7,a
                                   5259 ;	../../../core/loader/elfloader.c:553: ret = relocate_section(fd,
      001805 E5 81            [12] 5260 	mov	a,sp
      001807 24 F2            [12] 5261 	add	a,#0xf2
      001809 F8               [12] 5262 	mov	r0,a
      00180A E6               [12] 5263 	mov	a,@r0
      00180B C0 E0            [24] 5264 	push	acc
      00180D E5 81            [12] 5265 	mov	a,sp
      00180F 24 FC            [12] 5266 	add	a,#0xfc
      001811 F8               [12] 5267 	mov	r0,a
      001812 E6               [12] 5268 	mov	a,@r0
      001813 C0 E0            [24] 5269 	push	acc
      001815 08               [12] 5270 	inc	r0
      001816 E6               [12] 5271 	mov	a,@r0
      001817 C0 E0            [24] 5272 	push	acc
      001819 E5 81            [12] 5273 	mov	a,sp
      00181B 24 F8            [12] 5274 	add	a,#0xf8
      00181D F8               [12] 5275 	mov	r0,a
      00181E E6               [12] 5276 	mov	a,@r0
      00181F C0 E0            [24] 5277 	push	acc
      001821 08               [12] 5278 	inc	r0
      001822 E6               [12] 5279 	mov	a,@r0
      001823 C0 E0            [24] 5280 	push	acc
      001825 E5 81            [12] 5281 	mov	a,sp
      001827 24 FA            [12] 5282 	add	a,#0xfa
      001829 F8               [12] 5283 	mov	r0,a
      00182A E6               [12] 5284 	mov	a,@r0
      00182B C0 E0            [24] 5285 	push	acc
      00182D 08               [12] 5286 	inc	r0
      00182E E6               [12] 5287 	mov	a,@r0
      00182F C0 E0            [24] 5288 	push	acc
      001831 E5 81            [12] 5289 	mov	a,sp
      001833 24 D7            [12] 5290 	add	a,#0xd7
      001835 F8               [12] 5291 	mov	r0,a
      001836 E6               [12] 5292 	mov	a,@r0
      001837 C0 E0            [24] 5293 	push	acc
      001839 08               [12] 5294 	inc	r0
      00183A E6               [12] 5295 	mov	a,@r0
      00183B C0 E0            [24] 5296 	push	acc
      00183D C0 05            [24] 5297 	push	ar5
      00183F C0 06            [24] 5298 	push	ar6
      001841 C0 07            [24] 5299 	push	ar7
      001843 E5 81            [12] 5300 	mov	a,sp
      001845 24 EB            [12] 5301 	add	a,#0xeb
      001847 F8               [12] 5302 	mov	r0,a
      001848 E6               [12] 5303 	mov	a,@r0
      001849 C0 E0            [24] 5304 	push	acc
      00184B 08               [12] 5305 	inc	r0
      00184C E6               [12] 5306 	mov	a,@r0
      00184D C0 E0            [24] 5307 	push	acc
      00184F E5 81            [12] 5308 	mov	a,sp
      001851 24 37            [12] 5309 	add	a,#0x37
      001853 F8               [12] 5310 	mov	r0,a
      001854 E6               [12] 5311 	mov	a,@r0
      001855 C0 E0            [24] 5312 	push	acc
      001857 08               [12] 5313 	inc	r0
      001858 E6               [12] 5314 	mov	a,@r0
      001859 C0 E0            [24] 5315 	push	acc
      00185B E5 81            [12] 5316 	mov	a,sp
      00185D 24 28            [12] 5317 	add	a,#0x28
      00185F F8               [12] 5318 	mov	r0,a
      001860 E6               [12] 5319 	mov	a,@r0
      001861 C0 E0            [24] 5320 	push	acc
      001863 08               [12] 5321 	inc	r0
      001864 E6               [12] 5322 	mov	a,@r0
      001865 C0 E0            [24] 5323 	push	acc
      001867 E5 81            [12] 5324 	mov	a,sp
      001869 24 24            [12] 5325 	add	a,#0x24
      00186B F8               [12] 5326 	mov	r0,a
      00186C 86 82            [24] 5327 	mov	dpl,@r0
      00186E 08               [12] 5328 	inc	r0
      00186F 86 83            [24] 5329 	mov	dph,@r0
      001871 78rEA            [12] 5330 	mov	r0,#_relocate_section
      001873 79s02            [12] 5331 	mov	r1,#(_relocate_section >> 8)
      001875 7As00            [12] 5332 	mov	r2,#(_relocate_section >> 16)
      001877 12r00r00         [24] 5333 	lcall	__sdcc_banked_call
      00187A AE 82            [24] 5334 	mov	r6,dpl
      00187C AF 83            [24] 5335 	mov	r7,dph
      00187E E5 81            [12] 5336 	mov	a,sp
      001880 24 EE            [12] 5337 	add	a,#0xee
      001882 F5 81            [12] 5338 	mov	sp,a
                                   5339 ;	../../../core/loader/elfloader.c:560: if(ret != ELFLOADER_OK) {
      001884 EE               [12] 5340 	mov	a,r6
      001885 4F               [12] 5341 	orl	a,r7
      001886 60 07            [24] 5342 	jz	00190$
                                   5343 ;	../../../core/loader/elfloader.c:562: return ret;
      001888 8E 82            [24] 5344 	mov	dpl,r6
      00188A 8F 83            [24] 5345 	mov	dph,r7
      00188C 02r1Ar29         [24] 5346 	ljmp	00207$
      00188F                       5347 00190$:
                                   5348 ;	../../../core/loader/elfloader.c:567: elfloader_arch_write_rom(fd, textoff, textsize, text.address);
      00188F 90r00r36         [24] 5349 	mov	dptr,#(_text + 0x0003)
      001892 E0               [24] 5350 	movx	a,@dptr
      001893 FD               [12] 5351 	mov	r5,a
      001894 A3               [24] 5352 	inc	dptr
      001895 E0               [24] 5353 	movx	a,@dptr
      001896 FE               [12] 5354 	mov	r6,a
      001897 A3               [24] 5355 	inc	dptr
      001898 E0               [24] 5356 	movx	a,@dptr
      001899 FF               [12] 5357 	mov	r7,a
      00189A C0 05            [24] 5358 	push	ar5
      00189C C0 06            [24] 5359 	push	ar6
      00189E C0 07            [24] 5360 	push	ar7
      0018A0 E5 81            [12] 5361 	mov	a,sp
      0018A2 24 F2            [12] 5362 	add	a,#0xf2
      0018A4 F8               [12] 5363 	mov	r0,a
      0018A5 E6               [12] 5364 	mov	a,@r0
      0018A6 C0 E0            [24] 5365 	push	acc
      0018A8 08               [12] 5366 	inc	r0
      0018A9 E6               [12] 5367 	mov	a,@r0
      0018AA C0 E0            [24] 5368 	push	acc
      0018AC E5 81            [12] 5369 	mov	a,sp
      0018AE 24 EE            [12] 5370 	add	a,#0xee
      0018B0 F8               [12] 5371 	mov	r0,a
      0018B1 E6               [12] 5372 	mov	a,@r0
      0018B2 C0 E0            [24] 5373 	push	acc
      0018B4 08               [12] 5374 	inc	r0
      0018B5 E6               [12] 5375 	mov	a,@r0
      0018B6 C0 E0            [24] 5376 	push	acc
      0018B8 E5 81            [12] 5377 	mov	a,sp
      0018BA 24 2F            [12] 5378 	add	a,#0x2f
      0018BC F8               [12] 5379 	mov	r0,a
      0018BD 86 82            [24] 5380 	mov	dpl,@r0
      0018BF 08               [12] 5381 	inc	r0
      0018C0 86 83            [24] 5382 	mov	dph,@r0
      0018C2 78r00            [12] 5383 	mov	r0,#_elfloader_arch_write_rom
      0018C4 79s00            [12] 5384 	mov	r1,#(_elfloader_arch_write_rom >> 8)
      0018C6 7As00            [12] 5385 	mov	r2,#(_elfloader_arch_write_rom >> 16)
      0018C8 12r00r00         [24] 5386 	lcall	__sdcc_banked_call
      0018CB E5 81            [12] 5387 	mov	a,sp
      0018CD 24 F9            [12] 5388 	add	a,#0xf9
      0018CF F5 81            [12] 5389 	mov	sp,a
                                   5390 ;	../../../core/loader/elfloader.c:568: elfloader_arch_write_rom(fd, rodataoff, rodatasize, rodata.address);
      0018D1 90r00r30         [24] 5391 	mov	dptr,#(_rodata + 0x0003)
      0018D4 E0               [24] 5392 	movx	a,@dptr
      0018D5 FD               [12] 5393 	mov	r5,a
      0018D6 A3               [24] 5394 	inc	dptr
      0018D7 E0               [24] 5395 	movx	a,@dptr
      0018D8 FE               [12] 5396 	mov	r6,a
      0018D9 A3               [24] 5397 	inc	dptr
      0018DA E0               [24] 5398 	movx	a,@dptr
      0018DB FF               [12] 5399 	mov	r7,a
      0018DC C0 05            [24] 5400 	push	ar5
      0018DE C0 06            [24] 5401 	push	ar6
      0018E0 C0 07            [24] 5402 	push	ar7
      0018E2 E5 81            [12] 5403 	mov	a,sp
      0018E4 24 40            [12] 5404 	add	a,#0x40
      0018E6 F8               [12] 5405 	mov	r0,a
      0018E7 E6               [12] 5406 	mov	a,@r0
      0018E8 C0 E0            [24] 5407 	push	acc
      0018EA 08               [12] 5408 	inc	r0
      0018EB E6               [12] 5409 	mov	a,@r0
      0018EC C0 E0            [24] 5410 	push	acc
      0018EE E5 81            [12] 5411 	mov	a,sp
      0018F0 24 F4            [12] 5412 	add	a,#0xf4
      0018F2 F8               [12] 5413 	mov	r0,a
      0018F3 E6               [12] 5414 	mov	a,@r0
      0018F4 C0 E0            [24] 5415 	push	acc
      0018F6 08               [12] 5416 	inc	r0
      0018F7 E6               [12] 5417 	mov	a,@r0
      0018F8 C0 E0            [24] 5418 	push	acc
      0018FA E5 81            [12] 5419 	mov	a,sp
      0018FC 24 2F            [12] 5420 	add	a,#0x2f
      0018FE F8               [12] 5421 	mov	r0,a
      0018FF 86 82            [24] 5422 	mov	dpl,@r0
      001901 08               [12] 5423 	inc	r0
      001902 86 83            [24] 5424 	mov	dph,@r0
      001904 78r00            [12] 5425 	mov	r0,#_elfloader_arch_write_rom
      001906 79s00            [12] 5426 	mov	r1,#(_elfloader_arch_write_rom >> 8)
      001908 7As00            [12] 5427 	mov	r2,#(_elfloader_arch_write_rom >> 16)
      00190A 12r00r00         [24] 5428 	lcall	__sdcc_banked_call
      00190D E5 81            [12] 5429 	mov	a,sp
      00190F 24 F9            [12] 5430 	add	a,#0xf9
      001911 F5 81            [12] 5431 	mov	sp,a
                                   5432 ;	../../../core/loader/elfloader.c:570: memset(bss.address, 0, bsssize);
      001913 90r00r24         [24] 5433 	mov	dptr,#(_bss + 0x0003)
      001916 E0               [24] 5434 	movx	a,@dptr
      001917 FD               [12] 5435 	mov	r5,a
      001918 A3               [24] 5436 	inc	dptr
      001919 E0               [24] 5437 	movx	a,@dptr
      00191A FE               [12] 5438 	mov	r6,a
      00191B A3               [24] 5439 	inc	dptr
      00191C E0               [24] 5440 	movx	a,@dptr
      00191D FF               [12] 5441 	mov	r7,a
      00191E E5 81            [12] 5442 	mov	a,sp
      001920 24 3C            [12] 5443 	add	a,#0x3c
      001922 F8               [12] 5444 	mov	r0,a
      001923 E6               [12] 5445 	mov	a,@r0
      001924 C0 E0            [24] 5446 	push	acc
      001926 08               [12] 5447 	inc	r0
      001927 E6               [12] 5448 	mov	a,@r0
      001928 C0 E0            [24] 5449 	push	acc
      00192A E4               [12] 5450 	clr	a
      00192B C0 E0            [24] 5451 	push	acc
      00192D 8D 82            [24] 5452 	mov	dpl,r5
      00192F 8E 83            [24] 5453 	mov	dph,r6
      001931 8F F0            [24] 5454 	mov	b,r7
      001933 78r00            [12] 5455 	mov	r0,#_memset
      001935 79s00            [12] 5456 	mov	r1,#(_memset >> 8)
      001937 7As00            [12] 5457 	mov	r2,#(_memset >> 16)
      001939 12r00r00         [24] 5458 	lcall	__sdcc_banked_call
      00193C 15 81            [12] 5459 	dec	sp
      00193E 15 81            [12] 5460 	dec	sp
      001940 15 81            [12] 5461 	dec	sp
                                   5462 ;	../../../core/loader/elfloader.c:571: seek_read(fd, dataoff, data.address, datasize);
      001942 90r00r2A         [24] 5463 	mov	dptr,#(_data + 0x0003)
      001945 E0               [24] 5464 	movx	a,@dptr
      001946 FD               [12] 5465 	mov	r5,a
      001947 A3               [24] 5466 	inc	dptr
      001948 E0               [24] 5467 	movx	a,@dptr
      001949 FE               [12] 5468 	mov	r6,a
      00194A A3               [24] 5469 	inc	dptr
      00194B E0               [24] 5470 	movx	a,@dptr
      00194C FF               [12] 5471 	mov	r7,a
      00194D E5 81            [12] 5472 	mov	a,sp
      00194F 24 47            [12] 5473 	add	a,#0x47
      001951 F8               [12] 5474 	mov	r0,a
      001952 E6               [12] 5475 	mov	a,@r0
      001953 C0 E0            [24] 5476 	push	acc
      001955 08               [12] 5477 	inc	r0
      001956 E6               [12] 5478 	mov	a,@r0
      001957 C0 E0            [24] 5479 	push	acc
      001959 C0 05            [24] 5480 	push	ar5
      00195B C0 06            [24] 5481 	push	ar6
      00195D C0 07            [24] 5482 	push	ar7
      00195F E5 81            [12] 5483 	mov	a,sp
      001961 24 F2            [12] 5484 	add	a,#0xf2
      001963 F8               [12] 5485 	mov	r0,a
      001964 E6               [12] 5486 	mov	a,@r0
      001965 C0 E0            [24] 5487 	push	acc
      001967 08               [12] 5488 	inc	r0
      001968 E6               [12] 5489 	mov	a,@r0
      001969 C0 E0            [24] 5490 	push	acc
      00196B E5 81            [12] 5491 	mov	a,sp
      00196D 24 2F            [12] 5492 	add	a,#0x2f
      00196F F8               [12] 5493 	mov	r0,a
      001970 86 82            [24] 5494 	mov	dpl,@r0
      001972 08               [12] 5495 	inc	r0
      001973 86 83            [24] 5496 	mov	dph,@r0
      001975 78r00            [12] 5497 	mov	r0,#_seek_read
      001977 79s00            [12] 5498 	mov	r1,#(_seek_read >> 8)
      001979 7As00            [12] 5499 	mov	r2,#(_seek_read >> 16)
      00197B 12r00r00         [24] 5500 	lcall	__sdcc_banked_call
      00197E E5 81            [12] 5501 	mov	a,sp
      001980 24 F9            [12] 5502 	add	a,#0xf9
      001982 F5 81            [12] 5503 	mov	sp,a
                                   5504 ;	../../../core/loader/elfloader.c:574: process = (struct process **) find_local_symbol(fd, "autostart_processes", symtaboff, symtabsize, strtaboff);
      001984 A8 81            [24] 5505 	mov	r0,sp
      001986 18               [12] 5506 	dec	r0
      001987 E6               [12] 5507 	mov	a,@r0
      001988 C0 E0            [24] 5508 	push	acc
      00198A 08               [12] 5509 	inc	r0
      00198B E6               [12] 5510 	mov	a,@r0
      00198C C0 E0            [24] 5511 	push	acc
      00198E E5 81            [12] 5512 	mov	a,sp
      001990 24 FB            [12] 5513 	add	a,#0xfb
      001992 F8               [12] 5514 	mov	r0,a
      001993 E6               [12] 5515 	mov	a,@r0
      001994 C0 E0            [24] 5516 	push	acc
      001996 08               [12] 5517 	inc	r0
      001997 E6               [12] 5518 	mov	a,@r0
      001998 C0 E0            [24] 5519 	push	acc
      00199A E5 81            [12] 5520 	mov	a,sp
      00199C 24 F7            [12] 5521 	add	a,#0xf7
      00199E F8               [12] 5522 	mov	r0,a
      00199F E6               [12] 5523 	mov	a,@r0
      0019A0 C0 E0            [24] 5524 	push	acc
      0019A2 08               [12] 5525 	inc	r0
      0019A3 E6               [12] 5526 	mov	a,@r0
      0019A4 C0 E0            [24] 5527 	push	acc
      0019A6 74r07            [12] 5528 	mov	a,#___str_0
      0019A8 C0 E0            [24] 5529 	push	acc
      0019AA 74s00            [12] 5530 	mov	a,#(___str_0 >> 8)
      0019AC C0 E0            [24] 5531 	push	acc
      0019AE 74 80            [12] 5532 	mov	a,#0x80
      0019B0 C0 E0            [24] 5533 	push	acc
      0019B2 E5 81            [12] 5534 	mov	a,sp
      0019B4 24 2D            [12] 5535 	add	a,#0x2d
      0019B6 F8               [12] 5536 	mov	r0,a
      0019B7 86 82            [24] 5537 	mov	dpl,@r0
      0019B9 08               [12] 5538 	inc	r0
      0019BA 86 83            [24] 5539 	mov	dph,@r0
      0019BC 78r65            [12] 5540 	mov	r0,#_find_local_symbol
      0019BE 79s00            [12] 5541 	mov	r1,#(_find_local_symbol >> 8)
      0019C0 7As00            [12] 5542 	mov	r2,#(_find_local_symbol >> 16)
      0019C2 12r00r00         [24] 5543 	lcall	__sdcc_banked_call
      0019C5 AD 82            [24] 5544 	mov	r5,dpl
      0019C7 AE 83            [24] 5545 	mov	r6,dph
      0019C9 AF F0            [24] 5546 	mov	r7,b
      0019CB E5 81            [12] 5547 	mov	a,sp
      0019CD 24 F7            [12] 5548 	add	a,#0xf7
      0019CF F5 81            [12] 5549 	mov	sp,a
      0019D1 8D 02            [24] 5550 	mov	ar2,r5
      0019D3 8E 03            [24] 5551 	mov	ar3,r6
      0019D5 8F 04            [24] 5552 	mov	ar4,r7
                                   5553 ;	../../../core/loader/elfloader.c:575: if(process != NULL) {
      0019D7 ED               [12] 5554 	mov	a,r5
      0019D8 4E               [12] 5555 	orl	a,r6
      0019D9 60 10            [24] 5556 	jz	00195$
                                   5557 ;	../../../core/loader/elfloader.c:577: elfloader_autostart_processes = process;
      0019DB 90r00r1E         [24] 5558 	mov	dptr,#_elfloader_autostart_processes
      0019DE EA               [12] 5559 	mov	a,r2
      0019DF F0               [24] 5560 	movx	@dptr,a
      0019E0 EB               [12] 5561 	mov	a,r3
      0019E1 A3               [24] 5562 	inc	dptr
      0019E2 F0               [24] 5563 	movx	@dptr,a
      0019E3 EC               [12] 5564 	mov	a,r4
      0019E4 A3               [24] 5565 	inc	dptr
      0019E5 F0               [24] 5566 	movx	@dptr,a
                                   5567 ;	../../../core/loader/elfloader.c:578: return ELFLOADER_OK;
      0019E6 90 00 00         [24] 5568 	mov	dptr,#0x0000
                                   5569 ;	../../../core/loader/elfloader.c:580: PRINTF("elfloader: no autostart\n");
      0019E9 80 3E            [24] 5570 	sjmp	00207$
      0019EB                       5571 00195$:
                                   5572 ;	../../../core/loader/elfloader.c:581: process = (struct process **) find_program_processes(fd, symtaboff, symtabsize, strtaboff);
      0019EB A8 81            [24] 5573 	mov	r0,sp
      0019ED 18               [12] 5574 	dec	r0
      0019EE E6               [12] 5575 	mov	a,@r0
      0019EF C0 E0            [24] 5576 	push	acc
      0019F1 08               [12] 5577 	inc	r0
      0019F2 E6               [12] 5578 	mov	a,@r0
      0019F3 C0 E0            [24] 5579 	push	acc
      0019F5 E5 81            [12] 5580 	mov	a,sp
      0019F7 24 FB            [12] 5581 	add	a,#0xfb
      0019F9 F8               [12] 5582 	mov	r0,a
      0019FA E6               [12] 5583 	mov	a,@r0
      0019FB C0 E0            [24] 5584 	push	acc
      0019FD 08               [12] 5585 	inc	r0
      0019FE E6               [12] 5586 	mov	a,@r0
      0019FF C0 E0            [24] 5587 	push	acc
      001A01 E5 81            [12] 5588 	mov	a,sp
      001A03 24 F7            [12] 5589 	add	a,#0xf7
      001A05 F8               [12] 5590 	mov	r0,a
      001A06 E6               [12] 5591 	mov	a,@r0
      001A07 C0 E0            [24] 5592 	push	acc
      001A09 08               [12] 5593 	inc	r0
      001A0A E6               [12] 5594 	mov	a,@r0
      001A0B C0 E0            [24] 5595 	push	acc
      001A0D E5 81            [12] 5596 	mov	a,sp
      001A0F 24 30            [12] 5597 	add	a,#0x30
      001A11 F8               [12] 5598 	mov	r0,a
      001A12 86 82            [24] 5599 	mov	dpl,@r0
      001A14 08               [12] 5600 	inc	r0
      001A15 86 83            [24] 5601 	mov	dph,@r0
      001A17 78r86            [12] 5602 	mov	r0,#_find_program_processes
      001A19 79s09            [12] 5603 	mov	r1,#(_find_program_processes >> 8)
      001A1B 7As00            [12] 5604 	mov	r2,#(_find_program_processes >> 16)
      001A1D 12r00r00         [24] 5605 	lcall	__sdcc_banked_call
      001A20 E5 81            [12] 5606 	mov	a,sp
      001A22 24 FA            [12] 5607 	add	a,#0xfa
      001A24 F5 81            [12] 5608 	mov	sp,a
                                   5609 ;	../../../core/loader/elfloader.c:585: return ELFLOADER_NO_STARTPOINT;
      001A26 90 00 07         [24] 5610 	mov	dptr,#0x0007
      001A29                       5611 00207$:
                                   5612 ;	../../../core/loader/elfloader.c:587: }
      001A29 E5 81            [12] 5613 	mov	a,sp
      001A2B 24 35            [12] 5614 	add	a,#0x35
      001A2D F5 81            [12] 5615 	mov	sp,a
      001A2F 02r00r00         [24] 5616 	ljmp	__sdcc_banked_ret
                                   5617 	.area CSEG    (CODE)
                                   5618 	.area CONST   (CODE)
      000000                       5619 _elf_magic_header:
      000000 7F                    5620 	.db #0x7f	; 127
      000001 45                    5621 	.db #0x45	; 69	'E'
      000002 4C                    5622 	.db #0x4c	; 76	'L'
      000003 46                    5623 	.db #0x46	; 70	'F'
      000004 01                    5624 	.db #0x01	; 1
      000005 01                    5625 	.db #0x01	; 1
      000006 01                    5626 	.db #0x01	; 1
      000007                       5627 ___str_0:
      000007 61 75 74 6F 73 74 61  5628 	.ascii "autostart_processes"
             72 74 5F 70 72 6F 63
             65 73 73 65 73
      00001A 00                    5629 	.db 0x00
      00001B                       5630 ___str_1:
      00001B 2E 74 65 78 74        5631 	.ascii ".text"
      000020 00                    5632 	.db 0x00
      000021                       5633 ___str_2:
      000021 2E 72 65 6C 2E 74 65  5634 	.ascii ".rel.text"
             78 74
      00002A 00                    5635 	.db 0x00
      00002B                       5636 ___str_3:
      00002B 2E 72 65 6C 61 2E 74  5637 	.ascii ".rela.text"
             65 78 74
      000035 00                    5638 	.db 0x00
      000036                       5639 ___str_4:
      000036 2E 64 61 74 61        5640 	.ascii ".data"
      00003B 00                    5641 	.db 0x00
      00003C                       5642 ___str_5:
      00003C 2E 72 6F 64 61 74 61  5643 	.ascii ".rodata"
      000043 00                    5644 	.db 0x00
      000044                       5645 ___str_6:
      000044 2E 72 65 6C 2E 72 6F  5646 	.ascii ".rel.rodata"
             64 61 74 61
      00004F 00                    5647 	.db 0x00
      000050                       5648 ___str_7:
      000050 2E 72 65 6C 61 2E 72  5649 	.ascii ".rela.rodata"
             6F 64 61 74 61
      00005C 00                    5650 	.db 0x00
      00005D                       5651 ___str_8:
      00005D 2E 72 65 6C 2E 64 61  5652 	.ascii ".rel.data"
             74 61
      000066 00                    5653 	.db 0x00
      000067                       5654 ___str_9:
      000067 2E 72 65 6C 61 2E 64  5655 	.ascii ".rela.data"
             61 74 61
      000071 00                    5656 	.db 0x00
      000072                       5657 ___str_10:
      000072 2E 62 73 73           5658 	.ascii ".bss"
      000076 00                    5659 	.db 0x00
                                   5660 	.area XINIT   (CODE)
                                   5661 	.area CABS    (ABS,CODE)
